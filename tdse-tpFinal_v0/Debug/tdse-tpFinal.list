
tdse-tpFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097dc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  080098f0  080098f0  0000a8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a170  0800a170  0000c208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a178  0800a178  0000c208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0000b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0000b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800a180  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000208  0800a388  0000c208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800a388  0000c60c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c7d  00000000  00000000  0000c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  0001ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c79  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a678  00000000  00000000  00021631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015269  00000000  00000000  0003bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbf8  00000000  00000000  00050f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  000e0b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000e65a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	080098d4 	.word	0x080098d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	080098d4 	.word	0x080098d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <HAL_GPIO_EXTI_Callback>:
#include "Interrupts.h"
#include "MPU6050.h"
#include "main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT_MPU6050_Pin)
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x14>
    {
        MPU6050_HandleInterrupt();
 800114c:	f003 fa40 	bl	80045d0 <MPU6050_HandleInterrupt>
    }
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initialise_monitor_handles();
 800115c:	f005 fa22 	bl	80065a4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f000 fc00 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f828 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 f938 	bl	80013dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116c:	f000 f90c 	bl	8001388 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001170:	f000 f862 	bl	8001238 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001174:	f000 f88e 	bl	8001294 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
  app_init();
 8001178:	f003 fc44 	bl	8004a04 <app_init>
  while(MPU6050_Init(&hi2c1, 0) != HAL_OK){
 800117c:	e006      	b.n	800118c <main+0x34>
		printf("Error al inicializar MPU6050\n");
 800117e:	480b      	ldr	r0, [pc, #44]	@ (80011ac <main+0x54>)
 8001180:	f006 f8d0 	bl	8007324 <puts>
		HAL_Delay(500);
 8001184:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001188:	f000 fc4e 	bl	8001a28 <HAL_Delay>
  while(MPU6050_Init(&hi2c1, 0) != HAL_OK){
 800118c:	2100      	movs	r1, #0
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <main+0x58>)
 8001190:	f003 f932 	bl	80043f8 <MPU6050_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f1      	bne.n	800117e <main+0x26>
  }
  printf("MPU6050 inicializado correctamente\n");
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <main+0x5c>)
 800119c:	f006 f8c2 	bl	8007324 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Process();
 80011a0:	f003 fa22 	bl	80045e8 <MPU6050_Process>

	  /* Application Update */
	  app_update();
 80011a4:	f003 fcf4 	bl	8004b90 <app_update>
	  MPU6050_Process();
 80011a8:	bf00      	nop
 80011aa:	e7f9      	b.n	80011a0 <main+0x48>
 80011ac:	080098f0 	.word	0x080098f0
 80011b0:	20000224 	.word	0x20000224
 80011b4:	08009910 	.word	0x08009910

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	@ 0x40
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2228      	movs	r2, #40	@ 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 f9c0 	bl	800754c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ff80 	bl	80030fc <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001202:	f000 f9cd 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f002 f9ed 	bl	8003600 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800122c:	f000 f9b8 	bl	80015a0 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3740      	adds	r7, #64	@ 0x40
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_I2C1_Init+0x54>)
 800123e:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <MX_I2C1_Init+0x58>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C1_Init+0x54>)
 8001244:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001248:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_I2C1_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2C1_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <MX_I2C1_Init+0x54>)
 8001258:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_I2C1_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2C1_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_I2C1_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2C1_Init+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_I2C1_Init+0x54>)
 8001278:	f000 feda 	bl	8002030 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001282:	f000 f98d 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000224 	.word	0x20000224
 8001290:	40005400 	.word	0x40005400

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012be:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012de:	4829      	ldr	r0, [pc, #164]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012e0:	f002 fb1c 	bl	800391c <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012ea:	f000 f959 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4821      	ldr	r0, [pc, #132]	@ (8001384 <MX_TIM2_Init+0xf0>)
 80012fe:	f002 ff3f 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001308:	f000 f94a 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	@ 0x60
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	@ (8001384 <MX_TIM2_Init+0xf0>)
 8001324:	f002 fc50 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132e:	f000 f937 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2204      	movs	r2, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <MX_TIM2_Init+0xf0>)
 800133a:	f002 fc45 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001344:	f000 f92c 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2208      	movs	r2, #8
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_TIM2_Init+0xf0>)
 8001350:	f002 fc3a 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800135a:	f000 f921 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	220c      	movs	r2, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_TIM2_Init+0xf0>)
 8001366:	f002 fc2f 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001370:	f000 f916 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_TIM2_Init+0xf0>)
 8001376:	f000 f9b7 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000278 	.word	0x20000278

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <MX_USART2_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f002 ff3c 	bl	800423c <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 f8e9 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002c0 	.word	0x200002c0
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b66      	ldr	r3, [pc, #408]	@ (800158c <MX_GPIO_Init+0x1b0>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a65      	ldr	r2, [pc, #404]	@ (800158c <MX_GPIO_Init+0x1b0>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b63      	ldr	r3, [pc, #396]	@ (800158c <MX_GPIO_Init+0x1b0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001408:	4b60      	ldr	r3, [pc, #384]	@ (800158c <MX_GPIO_Init+0x1b0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a5f      	ldr	r2, [pc, #380]	@ (800158c <MX_GPIO_Init+0x1b0>)
 800140e:	f043 0320 	orr.w	r3, r3, #32
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b5d      	ldr	r3, [pc, #372]	@ (800158c <MX_GPIO_Init+0x1b0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b5a      	ldr	r3, [pc, #360]	@ (800158c <MX_GPIO_Init+0x1b0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a59      	ldr	r2, [pc, #356]	@ (800158c <MX_GPIO_Init+0x1b0>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b57      	ldr	r3, [pc, #348]	@ (800158c <MX_GPIO_Init+0x1b0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b54      	ldr	r3, [pc, #336]	@ (800158c <MX_GPIO_Init+0x1b0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a53      	ldr	r2, [pc, #332]	@ (800158c <MX_GPIO_Init+0x1b0>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <MX_GPIO_Init+0x1b0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_Pin|D8_Pin|D6_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 8001456:	484e      	ldr	r0, [pc, #312]	@ (8001590 <MX_GPIO_Init+0x1b4>)
 8001458:	f000 fdb9 	bl	8001fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	@ 0x80
 8001460:	484c      	ldr	r0, [pc, #304]	@ (8001594 <MX_GPIO_Init+0x1b8>)
 8001462:	f000 fdb4 	bl	8001fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2130      	movs	r1, #48	@ 0x30
 800146a:	484b      	ldr	r0, [pc, #300]	@ (8001598 <MX_GPIO_Init+0x1bc>)
 800146c:	f000 fdaf 	bl	8001fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001470:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	4b49      	ldr	r3, [pc, #292]	@ (800159c <MX_GPIO_Init+0x1c0>)
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	4843      	ldr	r0, [pc, #268]	@ (8001594 <MX_GPIO_Init+0x1b8>)
 8001486:	f000 fc07 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D6_Pin;
 800148a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	483b      	ldr	r0, [pc, #236]	@ (8001590 <MX_GPIO_Init+0x1b4>)
 80014a4:	f000 fbf8 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D11_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D11_Pin;
 80014a8:	23c0      	movs	r3, #192	@ 0xc0
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	4835      	ldr	r0, [pc, #212]	@ (8001590 <MX_GPIO_Init+0x1b4>)
 80014bc:	f000 fbec 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 80014c0:	2301      	movs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <MX_GPIO_Init+0x1c0>)
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	4831      	ldr	r0, [pc, #196]	@ (8001598 <MX_GPIO_Init+0x1bc>)
 80014d4:	f000 fbe0 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 80014d8:	2340      	movs	r3, #64	@ 0x40
 80014da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	482a      	ldr	r0, [pc, #168]	@ (8001594 <MX_GPIO_Init+0x1b8>)
 80014ec:	f000 fbd4 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	4823      	ldr	r0, [pc, #140]	@ (8001594 <MX_GPIO_Init+0x1b8>)
 8001508:	f000 fbc6 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin;
 800150c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2302      	movs	r3, #2
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	481a      	ldr	r0, [pc, #104]	@ (8001590 <MX_GPIO_Init+0x1b4>)
 8001526:	f000 fbb7 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 800152a:	2310      	movs	r3, #16
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2302      	movs	r3, #2
 8001538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	4815      	ldr	r0, [pc, #84]	@ (8001598 <MX_GPIO_Init+0x1bc>)
 8001542:	f000 fba9 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8001546:	2320      	movs	r3, #32
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2302      	movs	r3, #2
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4619      	mov	r1, r3
 800155c:	480e      	ldr	r0, [pc, #56]	@ (8001598 <MX_GPIO_Init+0x1bc>)
 800155e:	f000 fb9b 	bl	8001c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2103      	movs	r1, #3
 8001566:	2006      	movs	r0, #6
 8001568:	f000 fb59 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800156c:	2006      	movs	r0, #6
 800156e:	f000 fb72 	bl	8001c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2028      	movs	r0, #40	@ 0x28
 8001578:	f000 fb51 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f000 fb6a 	bl	8001c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800
 8001594:	40011000 	.word	0x40011000
 8001598:	40010c00 	.word	0x40010c00
 800159c:	10110000 	.word	0x10110000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_I2C_MspInit+0x90>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d132      	bne.n	8001696 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001648:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	@ (80016a8 <HAL_I2C_MspInit+0x98>)
 800165e:	f000 fb1b 	bl	8001c98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001662:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_I2C_MspInit+0x9c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
 8001678:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_I2C_MspInit+0x9c>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_I2C_MspInit+0x94>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40010000 	.word	0x40010000

080016b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c0:	d10b      	bne.n	80016da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_TIM_PWM_MspInit+0x34>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_TIM_PWM_MspInit+0x34>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_TIM_PWM_MspInit+0x34>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001706:	d142      	bne.n	800178e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <HAL_TIM_MspPostInit+0xb0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001738:	2303      	movs	r3, #3
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4814      	ldr	r0, [pc, #80]	@ (800179c <HAL_TIM_MspPostInit+0xb4>)
 800174c:	f000 faa4 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001750:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <HAL_TIM_MspPostInit+0xb8>)
 8001766:	f000 fa97 	bl	8001c98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_TIM_MspPostInit+0xbc>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_TIM_MspPostInit+0xbc>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40010000 	.word	0x40010000

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a15      	ldr	r2, [pc, #84]	@ (8001818 <HAL_UART_MspInit+0x70>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d123      	bne.n	8001810 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a13      	ldr	r2, [pc, #76]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d2:	61d3      	str	r3, [r2, #28]
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f8:	230c      	movs	r3, #12
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <HAL_UART_MspInit+0x78>)
 800180c:	f000 fa44 	bl	8001c98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40004400 	.word	0x40004400
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <NMI_Handler+0x4>

0800182c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <MemManage_Handler+0x4>

0800183c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <UsageFault_Handler+0x4>

0800184c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 f8bc 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8001878:	f000 fa07 	bl	8001c8a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fbbb 	bl	8002000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}

0800188e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001892:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001896:	f000 fbb3 	bl	8002000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f005 fe8e 	bl	80075f0 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20005000 	.word	0x20005000
 8001900:	00000400 	.word	0x00000400
 8001904:	20000308 	.word	0x20000308
 8001908:	20000610 	.word	0x20000610

0800190c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001918:	f7ff fff8 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480b      	ldr	r0, [pc, #44]	@ (800194c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800191e:	490c      	ldr	r1, [pc, #48]	@ (8001950 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001920:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001934:	4c09      	ldr	r4, [pc, #36]	@ (800195c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f005 fe5b 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001946:	f7ff fc07 	bl	8001158 <main>
  bx lr
 800194a:	4770      	bx	lr
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001954:	0800a180 	.word	0x0800a180
  ldr r2, =_sbss
 8001958:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800195c:	2000060c 	.word	0x2000060c

08001960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_Init+0x28>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_Init+0x28>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f947 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f808 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fe14 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f95f 	bl	8001c72 <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019cc:	f000 f927 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_IncTick+0x1c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_IncTick+0x20>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a03      	ldr	r2, [pc, #12]	@ (8001a10 <HAL_IncTick+0x20>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000030c 	.word	0x2000030c

08001a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <HAL_GetTick+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	2000030c 	.word	0x2000030c

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffe0 	bl	8001a14 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008

08001a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4906      	ldr	r1, [pc, #24]	@ (8001b08 <__NVIC_EnableIRQ+0x34>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001be8:	f7ff ff90 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff2d 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff42 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff35 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c8e:	f002 ffe5 	bl	8004c5c <HAL_SYSTICK_Callback>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b08b      	sub	sp, #44	@ 0x2c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001caa:	e169      	b.n	8001f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cac:	2201      	movs	r2, #1
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8158 	bne.w	8001f7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a9a      	ldr	r2, [pc, #616]	@ (8001f38 <HAL_GPIO_Init+0x2a0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d05e      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
 8001cd4:	4a98      	ldr	r2, [pc, #608]	@ (8001f38 <HAL_GPIO_Init+0x2a0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d875      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001cda:	4a98      	ldr	r2, [pc, #608]	@ (8001f3c <HAL_GPIO_Init+0x2a4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d058      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
 8001ce0:	4a96      	ldr	r2, [pc, #600]	@ (8001f3c <HAL_GPIO_Init+0x2a4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d86f      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001ce6:	4a96      	ldr	r2, [pc, #600]	@ (8001f40 <HAL_GPIO_Init+0x2a8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d052      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
 8001cec:	4a94      	ldr	r2, [pc, #592]	@ (8001f40 <HAL_GPIO_Init+0x2a8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d869      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001cf2:	4a94      	ldr	r2, [pc, #592]	@ (8001f44 <HAL_GPIO_Init+0x2ac>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04c      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
 8001cf8:	4a92      	ldr	r2, [pc, #584]	@ (8001f44 <HAL_GPIO_Init+0x2ac>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d863      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001cfe:	4a92      	ldr	r2, [pc, #584]	@ (8001f48 <HAL_GPIO_Init+0x2b0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d046      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
 8001d04:	4a90      	ldr	r2, [pc, #576]	@ (8001f48 <HAL_GPIO_Init+0x2b0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d85d      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d82a      	bhi.n	8001d64 <HAL_GPIO_Init+0xcc>
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d859      	bhi.n	8001dc6 <HAL_GPIO_Init+0x12e>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <HAL_GPIO_Init+0x80>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d93 	.word	0x08001d93
 8001d1c:	08001d6d 	.word	0x08001d6d
 8001d20:	08001d7f 	.word	0x08001d7f
 8001d24:	08001dc1 	.word	0x08001dc1
 8001d28:	08001dc7 	.word	0x08001dc7
 8001d2c:	08001dc7 	.word	0x08001dc7
 8001d30:	08001dc7 	.word	0x08001dc7
 8001d34:	08001dc7 	.word	0x08001dc7
 8001d38:	08001dc7 	.word	0x08001dc7
 8001d3c:	08001dc7 	.word	0x08001dc7
 8001d40:	08001dc7 	.word	0x08001dc7
 8001d44:	08001dc7 	.word	0x08001dc7
 8001d48:	08001dc7 	.word	0x08001dc7
 8001d4c:	08001dc7 	.word	0x08001dc7
 8001d50:	08001dc7 	.word	0x08001dc7
 8001d54:	08001dc7 	.word	0x08001dc7
 8001d58:	08001dc7 	.word	0x08001dc7
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001d89 	.word	0x08001d89
 8001d64:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <HAL_GPIO_Init+0x2b4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d6a:	e02c      	b.n	8001dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e029      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e024      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	3308      	adds	r3, #8
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e01f      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	330c      	adds	r3, #12
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e01a      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e013      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da8:	2308      	movs	r3, #8
 8001daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	611a      	str	r2, [r3, #16]
          break;
 8001db2:	e009      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db4:	2308      	movs	r3, #8
 8001db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	615a      	str	r2, [r3, #20]
          break;
 8001dbe:	e003      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x130>
          break;
 8001dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	@ 0xff
 8001dcc:	d801      	bhi.n	8001dd2 <HAL_GPIO_Init+0x13a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	e001      	b.n	8001dd6 <HAL_GPIO_Init+0x13e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2bff      	cmp	r3, #255	@ 0xff
 8001ddc:	d802      	bhi.n	8001de4 <HAL_GPIO_Init+0x14c>
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x152>
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	3b08      	subs	r3, #8
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	210f      	movs	r1, #15
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	6a39      	ldr	r1, [r7, #32]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	431a      	orrs	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80b1 	beq.w	8001f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e18:	4b4d      	ldr	r3, [pc, #308]	@ (8001f50 <HAL_GPIO_Init+0x2b8>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f50 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b4a      	ldr	r3, [pc, #296]	@ (8001f50 <HAL_GPIO_Init+0x2b8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e30:	4a48      	ldr	r2, [pc, #288]	@ (8001f54 <HAL_GPIO_Init+0x2bc>)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a40      	ldr	r2, [pc, #256]	@ (8001f58 <HAL_GPIO_Init+0x2c0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_GPIO_Init+0x1ec>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f5c <HAL_GPIO_Init+0x2c4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1e8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3e      	ldr	r2, [pc, #248]	@ (8001f60 <HAL_GPIO_Init+0x2c8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1e4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f64 <HAL_GPIO_Init+0x2cc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1e0>
 8001e74:	2303      	movs	r3, #3
 8001e76:	e006      	b.n	8001e86 <HAL_GPIO_Init+0x1ee>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e004      	b.n	8001e86 <HAL_GPIO_Init+0x1ee>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x1ee>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_GPIO_Init+0x1ee>
 8001e84:	2300      	movs	r3, #0
 8001e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e88:	f002 0203 	and.w	r2, r2, #3
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e96:	492f      	ldr	r1, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x2bc>)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	492c      	ldr	r1, [pc, #176]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4928      	ldr	r1, [pc, #160]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4922      	ldr	r1, [pc, #136]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	491e      	ldr	r1, [pc, #120]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4918      	ldr	r1, [pc, #96]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4914      	ldr	r1, [pc, #80]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d021      	beq.n	8001f6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	490e      	ldr	r1, [pc, #56]	@ (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e021      	b.n	8001f7a <HAL_GPIO_Init+0x2e2>
 8001f36:	bf00      	nop
 8001f38:	10320000 	.word	0x10320000
 8001f3c:	10310000 	.word	0x10310000
 8001f40:	10220000 	.word	0x10220000
 8001f44:	10210000 	.word	0x10210000
 8001f48:	10120000 	.word	0x10120000
 8001f4c:	10110000 	.word	0x10110000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40011400 	.word	0x40011400
 8001f68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <HAL_GPIO_Init+0x304>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4909      	ldr	r1, [pc, #36]	@ (8001f9c <HAL_GPIO_Init+0x304>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f47f ae8e 	bne.w	8001cac <HAL_GPIO_Init+0x14>
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	372c      	adds	r7, #44	@ 0x2c
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fde:	787b      	ldrb	r3, [r7, #1]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f88c 	bl	800113c <HAL_GPIO_EXTI_Callback>
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e12b      	b.n	800229a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fada 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	@ 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002094:	f001 fbfc 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a81      	ldr	r2, [pc, #516]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d807      	bhi.n	80020b4 <HAL_I2C_Init+0x84>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a80      	ldr	r2, [pc, #512]	@ (80022a8 <HAL_I2C_Init+0x278>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e006      	b.n	80020c2 <HAL_I2C_Init+0x92>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	@ (80022ac <HAL_I2C_Init+0x27c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0e7      	b.n	800229a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a78      	ldr	r2, [pc, #480]	@ (80022b0 <HAL_I2C_Init+0x280>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d802      	bhi.n	8002104 <HAL_I2C_Init+0xd4>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	e009      	b.n	8002118 <HAL_I2C_Init+0xe8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a69      	ldr	r2, [pc, #420]	@ (80022b4 <HAL_I2C_Init+0x284>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800212a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	495c      	ldr	r1, [pc, #368]	@ (80022a4 <HAL_I2C_Init+0x274>)
 8002134:	428b      	cmp	r3, r1
 8002136:	d819      	bhi.n	800216c <HAL_I2C_Init+0x13c>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e59      	subs	r1, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fbb1 f3f3 	udiv	r3, r1, r3
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800214c:	400b      	ands	r3, r1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_I2C_Init+0x138>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e59      	subs	r1, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	e051      	b.n	800220c <HAL_I2C_Init+0x1dc>
 8002168:	2304      	movs	r3, #4
 800216a:	e04f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_I2C_Init+0x168>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e012      	b.n	80021be <HAL_I2C_Init+0x18e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x196>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e022      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_Init+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e58      	subs	r0, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	440b      	add	r3, r1
 80021dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6809      	ldr	r1, [r1, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800223a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6911      	ldr	r1, [r2, #16]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	000186a0 	.word	0x000186a0
 80022a8:	001e847f 	.word	0x001e847f
 80022ac:	003d08ff 	.word	0x003d08ff
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d2:	f7ff fb9f 	bl	8001a14 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	f040 80d9 	bne.w	8002498 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2319      	movs	r3, #25
 80022ec:	2201      	movs	r2, #1
 80022ee:	496d      	ldr	r1, [pc, #436]	@ (80024a4 <HAL_I2C_Mem_Write+0x1ec>)
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fccd 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0cc      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_I2C_Mem_Write+0x56>
 800230a:	2302      	movs	r3, #2
 800230c:	e0c5      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d007      	beq.n	8002334 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	@ 0x21
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2240      	movs	r2, #64	@ 0x40
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002374:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002376:	88f8      	ldrh	r0, [r7, #6]
 8002378:	893a      	ldrh	r2, [r7, #8]
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4603      	mov	r3, r0
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fb04 	bl	8002994 <I2C_RequestMemoryWrite>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d052      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e081      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fd92 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11b      	bne.n	8002438 <HAL_I2C_Mem_Write+0x180>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d017      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1aa      	bne.n	8002396 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fd85 	bl	8002f54 <I2C_WaitOnBTFFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e016      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00100002 	.word	0x00100002
 80024a8:	ffff0000 	.word	0xffff0000

080024ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ca:	f7ff faa3 	bl	8001a14 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b20      	cmp	r3, #32
 80024da:	f040 8250 	bne.w	800297e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2319      	movs	r3, #25
 80024e4:	2201      	movs	r2, #1
 80024e6:	4982      	ldr	r1, [pc, #520]	@ (80026f0 <HAL_I2C_Mem_Read+0x244>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fbd1 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e243      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Mem_Read+0x5a>
 8002502:	2302      	movs	r3, #2
 8002504:	e23c      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d007      	beq.n	800252c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2222      	movs	r2, #34	@ 0x22
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2240      	movs	r2, #64	@ 0x40
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800255c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a62      	ldr	r2, [pc, #392]	@ (80026f4 <HAL_I2C_Mem_Read+0x248>)
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256e:	88f8      	ldrh	r0, [r7, #6]
 8002570:	893a      	ldrh	r2, [r7, #8]
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4603      	mov	r3, r0
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa9e 	bl	8002ac0 <I2C_RequestMemoryRead>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1f8      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d113      	bne.n	80025be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e1cc      	b.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11e      	bne.n	8002604 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d6:	b672      	cpsid	i
}
 80025d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002600:	b662      	cpsie	i
}
 8002602:	e035      	b.n	8002670 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	2b02      	cmp	r3, #2
 800260a:	d11e      	bne.n	800264a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002646:	b662      	cpsie	i
}
 8002648:	e012      	b.n	8002670 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002658:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002670:	e172      	b.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	2b03      	cmp	r3, #3
 8002678:	f200 811f 	bhi.w	80028ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002680:	2b01      	cmp	r3, #1
 8002682:	d123      	bne.n	80026cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002686:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fcab 	bl	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e173      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ca:	e145      	b.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d152      	bne.n	800277a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	2200      	movs	r2, #0
 80026dc:	4906      	ldr	r1, [pc, #24]	@ (80026f8 <HAL_I2C_Mem_Read+0x24c>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fad6 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e148      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
 80026ee:	bf00      	nop
 80026f0:	00100002 	.word	0x00100002
 80026f4:	ffff0000 	.word	0xffff0000
 80026f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
}
 8002744:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002778:	e0ee      	b.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	2200      	movs	r2, #0
 8002782:	4981      	ldr	r1, [pc, #516]	@ (8002988 <HAL_I2C_Mem_Read+0x4dc>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fa83 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0f5      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027da:	4b6c      	ldr	r3, [pc, #432]	@ (800298c <HAL_I2C_Mem_Read+0x4e0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	08db      	lsrs	r3, r3, #3
 80027e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002990 <HAL_I2C_Mem_Read+0x4e4>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a1a      	lsrs	r2, r3, #8
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00da      	lsls	r2, r3, #3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d118      	bne.n	8002832 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002822:	b662      	cpsie	i
}
 8002824:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0a6      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d1d9      	bne.n	80027f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002882:	b662      	cpsie	i
}
 8002884:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028b8:	e04e      	b.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fb90 	bl	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e058      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d124      	bne.n	8002958 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae88 	bne.w	8002672 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	@ 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	00010004 	.word	0x00010004
 800298c:	20000000 	.word	0x20000000
 8002990:	14f8b589 	.word	0x14f8b589

08002994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f960 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e4:	d103      	bne.n	80029ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e05f      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	492d      	ldr	r1, [pc, #180]	@ (8002abc <I2C_RequestMemoryWrite+0x128>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9bb 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04c      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa46 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02b      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e021      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fa20 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e005      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00010002 	.word	0x00010002

08002ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8c2 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b20:	d103      	bne.n	8002b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0aa      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	4952      	ldr	r1, [pc, #328]	@ (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f91d 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e097      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9a8 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e076      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	e021      	b.n	8002bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f982 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e050      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f967 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e035      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f82b 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4e:	d103      	bne.n	8002c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e013      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c5c:	897b      	ldrh	r3, [r7, #10]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	4906      	ldr	r1, [pc, #24]	@ (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f886 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	00010002 	.word	0x00010002

08002c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca0:	e048      	b.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca8:	d044      	beq.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7fe feb3 	bl	8001a14 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d139      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10d      	bne.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	e00c      	b.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d116      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e023      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	e00c      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d093      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d92:	e071      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d123      	bne.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e067      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002df2:	d041      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	f7fe fe0e 	bl	8001a14 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d136      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e00b      	b.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e021      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10c      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e00b      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af6d 	bne.w	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8e3 	bl	800309e <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee8:	d028      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fd93 	bl	8001a14 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11d      	bne.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d016      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d1c3      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f89b 	bl	800309e <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f78:	d028      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fd4b 	bl	8001a14 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11d      	bne.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d1c3      	bne.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff0:	e049      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d119      	bne.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e030      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	f7fe fcee 	bl	8001a14 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11d      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	d016      	beq.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d1ae      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b4:	d11b      	bne.n	80030ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f043 0204 	orr.w	r2, r3, #4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e272      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8087 	beq.w	800322a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800311c:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b04      	cmp	r3, #4
 8003126:	d00c      	beq.n	8003142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003128:	4b8f      	ldr	r3, [pc, #572]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d112      	bne.n	800315a <HAL_RCC_OscConfig+0x5e>
 8003134:	4b8c      	ldr	r3, [pc, #560]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003140:	d10b      	bne.n	800315a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003142:	4b89      	ldr	r3, [pc, #548]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d06c      	beq.n	8003228 <HAL_RCC_OscConfig+0x12c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d168      	bne.n	8003228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e24c      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x76>
 8003164:	4b80      	ldr	r3, [pc, #512]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7f      	ldr	r2, [pc, #508]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e02e      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7a      	ldr	r2, [pc, #488]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b78      	ldr	r3, [pc, #480]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a77      	ldr	r2, [pc, #476]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0xbc>
 800319e:	4b72      	ldr	r3, [pc, #456]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a71      	ldr	r2, [pc, #452]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 80031b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a67      	ldr	r2, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fc1c 	bl	8001a14 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fc18 	bl	8001a14 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e200      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xe4>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fc08 	bl	8001a14 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fc04 	bl	8001a14 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1ec      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x10c>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003236:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003242:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x18c>
 800324e:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b43      	ldr	r3, [pc, #268]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x176>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1c0      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b3d      	ldr	r3, [pc, #244]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4939      	ldr	r1, [pc, #228]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fbbd 	bl	8001a14 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329e:	f7fe fbb9 	bl	8001a14 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1a1      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4927      	ldr	r1, [pc, #156]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b26      	ldr	r3, [pc, #152]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fb9c 	bl	8001a14 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fe fb98 	bl	8001a14 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e180      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03a      	beq.n	8003380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d019      	beq.n	8003346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <HAL_RCC_OscConfig+0x274>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003318:	f7fe fb7c 	bl	8001a14 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fb78 	bl	8001a14 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e160      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f000 face 	bl	80038e0 <RCC_Delay>
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RCC_OscConfig+0x274>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fe fb62 	bl	8001a14 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003352:	e00f      	b.n	8003374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fb5e 	bl	8001a14 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d908      	bls.n	8003374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e146      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	42420000 	.word	0x42420000
 8003370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b92      	ldr	r3, [pc, #584]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e9      	bne.n	8003354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a6 	beq.w	80034da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b8b      	ldr	r3, [pc, #556]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a87      	ldr	r2, [pc, #540]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b85      	ldr	r3, [pc, #532]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b82      	ldr	r3, [pc, #520]	@ (80035c4 <HAL_RCC_OscConfig+0x4c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <HAL_RCC_OscConfig+0x4c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7e      	ldr	r2, [pc, #504]	@ (80035c4 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fb1f 	bl	8001a14 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fe fb1b 	bl	8001a14 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	@ 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e103      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b75      	ldr	r3, [pc, #468]	@ (80035c4 <HAL_RCC_OscConfig+0x4c8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x312>
 8003400:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a6e      	ldr	r2, [pc, #440]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6213      	str	r3, [r2, #32]
 800340c:	e02d      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x334>
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a69      	ldr	r2, [pc, #420]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a66      	ldr	r2, [pc, #408]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	e01c      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x356>
 8003438:	4b61      	ldr	r3, [pc, #388]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a60      	ldr	r2, [pc, #384]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a5d      	ldr	r2, [pc, #372]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 8003452:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a5a      	ldr	r2, [pc, #360]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	4b58      	ldr	r3, [pc, #352]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a57      	ldr	r2, [pc, #348]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe facf 	bl	8001a14 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe facb 	bl	8001a14 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0b1      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	4b4b      	ldr	r3, [pc, #300]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <HAL_RCC_OscConfig+0x37e>
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fe fab9 	bl	8001a14 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fe fab5 	bl	8001a14 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e09b      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	4b40      	ldr	r3, [pc, #256]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ee      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4b3c      	ldr	r3, [pc, #240]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4a3b      	ldr	r2, [pc, #236]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8087 	beq.w	80035f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d061      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d146      	bne.n	8003586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fa89 	bl	8001a14 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe fa85 	bl	8001a14 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e06d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	4b29      	ldr	r3, [pc, #164]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d108      	bne.n	8003540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4921      	ldr	r1, [pc, #132]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003540:	4b1f      	ldr	r3, [pc, #124]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a19      	ldr	r1, [r3, #32]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	430b      	orrs	r3, r1
 8003552:	491b      	ldr	r1, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_RCC_OscConfig+0x4cc>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe fa59 	bl	8001a14 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe fa55 	bl	8001a14 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e03d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x46a>
 8003584:	e035      	b.n	80035f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <HAL_RCC_OscConfig+0x4cc>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fa42 	bl	8001a14 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fa3e 	bl	8001a14 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e026      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x498>
 80035b2:	e01e      	b.n	80035f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e019      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40007000 	.word	0x40007000
 80035c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_RCC_OscConfig+0x500>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d0      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b6a      	ldr	r3, [pc, #424]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d910      	bls.n	8003644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b67      	ldr	r3, [pc, #412]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4965      	ldr	r1, [pc, #404]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800365c:	4b59      	ldr	r3, [pc, #356]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a58      	ldr	r2, [pc, #352]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003674:	4b53      	ldr	r3, [pc, #332]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800367e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b50      	ldr	r3, [pc, #320]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	494d      	ldr	r1, [pc, #308]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d040      	beq.n	8003720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b47      	ldr	r3, [pc, #284]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d115      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036be:	4b41      	ldr	r3, [pc, #260]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e073      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ce:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06b      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036de:	4b39      	ldr	r3, [pc, #228]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4936      	ldr	r1, [pc, #216]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f0:	f7fe f990 	bl	8001a14 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	e00a      	b.n	800370e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7fe f98c 	bl	8001a14 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e053      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 020c 	and.w	r2, r3, #12
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	429a      	cmp	r2, r3
 800371e:	d1eb      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003720:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d210      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0207 	bic.w	r2, r3, #7
 8003736:	4922      	ldr	r1, [pc, #136]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e032      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b19      	ldr	r3, [pc, #100]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4916      	ldr	r1, [pc, #88]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800377a:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	490e      	ldr	r1, [pc, #56]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800378e:	f000 f821 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003792:	4602      	mov	r2, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	490a      	ldr	r1, [pc, #40]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <HAL_RCC_ClockConfig+0x1cc>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_ClockConfig+0x1d0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe f8ee 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08009d20 	.word	0x08009d20
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x94>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x30>
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x36>
 8003802:	e027      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003804:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	613b      	str	r3, [r7, #16]
      break;
 8003808:	e027      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d010      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003822:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x94>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0c5b      	lsrs	r3, r3, #17
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	4a11      	ldr	r2, [pc, #68]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <HAL_RCC_GetSysClockFreq+0x98>)
 8003836:	fb03 f202 	mul.w	r2, r3, r2
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e004      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	613b      	str	r3, [r7, #16]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_GetSysClockFreq+0x98>)
 8003856:	613b      	str	r3, [r7, #16]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	693b      	ldr	r3, [r7, #16]
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	007a1200 	.word	0x007a1200
 8003870:	08009d38 	.word	0x08009d38
 8003874:	08009d48 	.word	0x08009d48
 8003878:	003d0900 	.word	0x003d0900

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b02      	ldr	r3, [pc, #8]	@ (800388c <HAL_RCC_GetHCLKFreq+0x10>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	20000000 	.word	0x20000000

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003894:	f7ff fff2 	bl	800387c <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	@ (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08009d30 	.word	0x08009d30

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038bc:	f7ff ffde 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0adb      	lsrs	r3, r3, #11
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	@ (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08009d30 	.word	0x08009d30

080038e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <RCC_Delay+0x34>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <RCC_Delay+0x38>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a5b      	lsrs	r3, r3, #9
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038fc:	bf00      	nop
  }
  while (Delay --);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <RCC_Delay+0x1c>
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000000 	.word	0x20000000
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e041      	b.n	80039b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd feb4 	bl	80016b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 f9f6 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_TIM_PWM_Start+0x24>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e022      	b.n	8003a26 <HAL_TIM_PWM_Start+0x6a>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d109      	bne.n	80039fa <HAL_TIM_PWM_Start+0x3e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e015      	b.n	8003a26 <HAL_TIM_PWM_Start+0x6a>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d109      	bne.n	8003a14 <HAL_TIM_PWM_Start+0x58>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e008      	b.n	8003a26 <HAL_TIM_PWM_Start+0x6a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e05e      	b.n	8003aec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x82>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a3c:	e013      	b.n	8003a66 <HAL_TIM_PWM_Start+0xaa>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x92>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4c:	e00b      	b.n	8003a66 <HAL_TIM_PWM_Start+0xaa>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0xa2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_PWM_Start+0xaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fb62 	bl	8004138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1e      	ldr	r2, [pc, #120]	@ (8003af4 <HAL_TIM_PWM_Start+0x138>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <HAL_TIM_PWM_Start+0x138>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xfa>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xfa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <HAL_TIM_PWM_Start+0x13c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xfa>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <HAL_TIM_PWM_Start+0x140>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b06      	cmp	r3, #6
 8003ac6:	d010      	beq.n	8003aea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e007      	b.n	8003aea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb10 	bl	8004138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <HAL_TIM_PWM_Stop+0xc4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d117      	bne.n	8003b52 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_TIM_PWM_Stop+0x52>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <HAL_TIM_PWM_Stop+0x52>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_TIM_PWM_Stop+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_PWM_Stop+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x92>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b90:	e013      	b.n	8003bba <HAL_TIM_PWM_Stop+0xba>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba0:	e00b      	b.n	8003bba <HAL_TIM_PWM_Stop+0xba>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Stop+0xb2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb0:	e003      	b.n	8003bba <HAL_TIM_PWM_Stop+0xba>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40012c00 	.word	0x40012c00

08003bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0ae      	b.n	8003d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	f200 809f 	bhi.w	8003d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003d35 	.word	0x08003d35
 8003c04:	08003d35 	.word	0x08003d35
 8003c08:	08003d35 	.word	0x08003d35
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003d35 	.word	0x08003d35
 8003c14:	08003d35 	.word	0x08003d35
 8003c18:	08003d35 	.word	0x08003d35
 8003c1c:	08003cb3 	.word	0x08003cb3
 8003c20:	08003d35 	.word	0x08003d35
 8003c24:	08003d35 	.word	0x08003d35
 8003c28:	08003d35 	.word	0x08003d35
 8003c2c:	08003cf3 	.word	0x08003cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f8f6 	bl	8003e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	619a      	str	r2, [r3, #24]
      break;
 8003c6e:	e064      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f93c 	bl	8003ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6999      	ldr	r1, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	619a      	str	r2, [r3, #24]
      break;
 8003cb0:	e043      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f985 	bl	8003fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0208 	orr.w	r2, r2, #8
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0204 	bic.w	r2, r2, #4
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]
      break;
 8003cf0:	e023      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f9cf 	bl	800409c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e1c <TIM_Base_SetConfig+0xd0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6a:	d007      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e20 <TIM_Base_SetConfig+0xd4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a2b      	ldr	r2, [pc, #172]	@ (8003e24 <TIM_Base_SetConfig+0xd8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <TIM_Base_SetConfig+0xd0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9c:	d007      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <TIM_Base_SetConfig+0xd4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <TIM_Base_SetConfig+0xd8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <TIM_Base_SetConfig+0xd0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]
  }
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800

08003e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 0201 	bic.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 0302 	bic.w	r3, r3, #2
 8003e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00

08003ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f023 0210 	bic.w	r2, r3, #16
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0320 	bic.w	r3, r3, #32
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a14      	ldr	r2, [pc, #80]	@ (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00

08003fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10d      	bne.n	8004042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800402c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d113      	bne.n	8004072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00

0800409c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004134 <TIM_OC4_SetConfig+0x98>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d109      	bne.n	8004110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00

08004138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2201      	movs	r2, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e046      	b.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d009      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10c      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	4313      	orrs	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800

0800423c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e042      	b.n	80042d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd faa0 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800427e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f82b 	bl	80042dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004316:	f023 030c 	bic.w	r3, r3, #12
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	430b      	orrs	r3, r1
 8004322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2c      	ldr	r2, [pc, #176]	@ (80043f0 <UART_SetConfig+0x114>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7ff fab8 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	e002      	b.n	8004352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7ff faa0 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8004350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009a      	lsls	r2, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <UART_SetConfig+0x118>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	0119      	lsls	r1, r3, #4
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009a      	lsls	r2, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	fbb2 f2f3 	udiv	r2, r2, r3
 8004388:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <UART_SetConfig+0x118>)
 800438a:	fba3 0302 	umull	r0, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2064      	movs	r0, #100	@ 0x64
 8004392:	fb00 f303 	mul.w	r3, r0, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	3332      	adds	r3, #50	@ 0x32
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <UART_SetConfig+0x118>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a8:	4419      	add	r1, r3
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <UART_SetConfig+0x118>)
 80043c2:	fba3 0302 	umull	r0, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2064      	movs	r0, #100	@ 0x64
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	@ 0x32
 80043d4:	4a07      	ldr	r2, [pc, #28]	@ (80043f4 <UART_SetConfig+0x118>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	440a      	add	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40013800 	.word	0x40013800
 80043f4:	51eb851f 	.word	0x51eb851f

080043f8 <MPU6050_Init>:
static float alpha = 0.9f; // filtro complementario
static uint8_t inicializado = 0;


HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c, uint8_t int_polarity)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af04      	add	r7, sp, #16
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
    mpu_i2c = hi2c;
 8004404:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <MPU6050_Init+0x1b4>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
    HAL_StatusTypeDef ret;
    uint8_t data;

    uint8_t who_am_i;
    ret = HAL_I2C_Mem_Read(mpu_i2c, MPU6050_ADDR, 0x75, 1, &who_am_i, 1, 100);
 800440a:	4b68      	ldr	r3, [pc, #416]	@ (80045ac <MPU6050_Init+0x1b4>)
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	2364      	movs	r3, #100	@ 0x64
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	2301      	movs	r3, #1
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	f107 030d 	add.w	r3, r7, #13
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2301      	movs	r3, #1
 800441e:	2275      	movs	r2, #117	@ 0x75
 8004420:	21d0      	movs	r1, #208	@ 0xd0
 8004422:	f7fe f843 	bl	80024ac <HAL_I2C_Mem_Read>
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
    if(ret == HAL_OK) {
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <MPU6050_Init+0x44>
        printf("WHO_AM_I = 0x%02X\n", who_am_i);
 8004430:	7b7b      	ldrb	r3, [r7, #13]
 8004432:	4619      	mov	r1, r3
 8004434:	485e      	ldr	r0, [pc, #376]	@ (80045b0 <MPU6050_Init+0x1b8>)
 8004436:	f002 ff0d 	bl	8007254 <iprintf>
 800443a:	e002      	b.n	8004442 <MPU6050_Init+0x4a>
    } else {
        printf("Error leyendo WHO_AM_I\n");
 800443c:	485d      	ldr	r0, [pc, #372]	@ (80045b4 <MPU6050_Init+0x1bc>)
 800443e:	f002 ff71 	bl	8007324 <puts>
    }

    // 1) Setear reloj a PLL con gyro X
    data = 0x01;
 8004442:	2301      	movs	r3, #1
 8004444:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(mpu_i2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8004446:	4b59      	ldr	r3, [pc, #356]	@ (80045ac <MPU6050_Init+0x1b4>)
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	2301      	movs	r3, #1
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	f107 030e 	add.w	r3, r7, #14
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2301      	movs	r3, #1
 800445c:	226b      	movs	r2, #107	@ 0x6b
 800445e:	21d0      	movs	r1, #208	@ 0xd0
 8004460:	f7fd ff2a 	bl	80022b8 <HAL_I2C_Mem_Write>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <MPU6050_Init+0x80>
        printf("Error escribiendo PWR_MGMT_1\n");
 800446e:	4852      	ldr	r0, [pc, #328]	@ (80045b8 <MPU6050_Init+0x1c0>)
 8004470:	f002 ff58 	bl	8007324 <puts>
        return ret;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	e094      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    HAL_Delay(100);
 8004478:	2064      	movs	r0, #100	@ 0x64
 800447a:	f7fd fad5 	bl	8001a28 <HAL_Delay>

    // 2) Configurar acelerometro a ±2g
    data = 0x00;
 800447e:	2300      	movs	r3, #0
 8004480:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(mpu_i2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8004482:	4b4a      	ldr	r3, [pc, #296]	@ (80045ac <MPU6050_Init+0x1b4>)
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800448a:	9302      	str	r3, [sp, #8]
 800448c:	2301      	movs	r3, #1
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	f107 030e 	add.w	r3, r7, #14
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2301      	movs	r3, #1
 8004498:	221c      	movs	r2, #28
 800449a:	21d0      	movs	r1, #208	@ 0xd0
 800449c:	f7fd ff0c 	bl	80022b8 <HAL_I2C_Mem_Write>
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <MPU6050_Init+0xbc>
        printf("Error escribiendo ACCEL_CONFIG\n");
 80044aa:	4844      	ldr	r0, [pc, #272]	@ (80045bc <MPU6050_Init+0x1c4>)
 80044ac:	f002 ff3a 	bl	8007324 <puts>
        return ret;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	e076      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    // 3) Configurar giroscopio a ±250 °/s
    data = 0x00;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(mpu_i2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80044b8:	4b3c      	ldr	r3, [pc, #240]	@ (80045ac <MPU6050_Init+0x1b4>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	2301      	movs	r3, #1
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	f107 030e 	add.w	r3, r7, #14
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2301      	movs	r3, #1
 80044ce:	221b      	movs	r2, #27
 80044d0:	21d0      	movs	r1, #208	@ 0xd0
 80044d2:	f7fd fef1 	bl	80022b8 <HAL_I2C_Mem_Write>
 80044d6:	4603      	mov	r3, r0
 80044d8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <MPU6050_Init+0xf2>
        printf("Error escribiendo GYRO_CONFIG\n");
 80044e0:	4837      	ldr	r0, [pc, #220]	@ (80045c0 <MPU6050_Init+0x1c8>)
 80044e2:	f002 ff1f 	bl	8007324 <puts>
        return ret;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	e05b      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    // 4) Leer registro INT_PIN_CFG
    ret = HAL_I2C_Mem_Read(mpu_i2c, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80044ea:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <MPU6050_Init+0x1b4>)
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044f2:	9302      	str	r3, [sp, #8]
 80044f4:	2301      	movs	r3, #1
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	f107 030e 	add.w	r3, r7, #14
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2301      	movs	r3, #1
 8004500:	2237      	movs	r2, #55	@ 0x37
 8004502:	21d0      	movs	r1, #208	@ 0xd0
 8004504:	f7fd ffd2 	bl	80024ac <HAL_I2C_Mem_Read>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <MPU6050_Init+0x124>
        printf("Error leyendo INT_PIN_CFG\n");
 8004512:	482c      	ldr	r0, [pc, #176]	@ (80045c4 <MPU6050_Init+0x1cc>)
 8004514:	f002 ff06 	bl	8007324 <puts>
        return ret;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	e042      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    // 5) Modificar bit 7 según int_polarity
    if (int_polarity == 0)
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <MPU6050_Init+0x136>
        data &= ~(1 << 7); // activo alto
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004528:	b2db      	uxtb	r3, r3
 800452a:	73bb      	strb	r3, [r7, #14]
 800452c:	e004      	b.n	8004538 <MPU6050_Init+0x140>
    else
        data |= (1 << 7);  // activo bajo
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004534:	b2db      	uxtb	r3, r3
 8004536:	73bb      	strb	r3, [r7, #14]

    // 6) Escribir nuevamente INT_PIN_CFG
    ret = HAL_I2C_Mem_Write(mpu_i2c, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8004538:	4b1c      	ldr	r3, [pc, #112]	@ (80045ac <MPU6050_Init+0x1b4>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004540:	9302      	str	r3, [sp, #8]
 8004542:	2301      	movs	r3, #1
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	f107 030e 	add.w	r3, r7, #14
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	2301      	movs	r3, #1
 800454e:	2237      	movs	r2, #55	@ 0x37
 8004550:	21d0      	movs	r1, #208	@ 0xd0
 8004552:	f7fd feb1 	bl	80022b8 <HAL_I2C_Mem_Write>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <MPU6050_Init+0x172>
        printf("Error escribiendo INT_PIN_CFG\n");
 8004560:	4819      	ldr	r0, [pc, #100]	@ (80045c8 <MPU6050_Init+0x1d0>)
 8004562:	f002 fedf 	bl	8007324 <puts>
        return ret;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	e01b      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    // 7) Activar interrupción Data Ready
    data = 0x01;
 800456a:	2301      	movs	r3, #1
 800456c:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(mpu_i2c, MPU6050_ADDR, INT_ENABLE_REG, 1, &data, 1, HAL_MAX_DELAY);
 800456e:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <MPU6050_Init+0x1b4>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004576:	9302      	str	r3, [sp, #8]
 8004578:	2301      	movs	r3, #1
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	f107 030e 	add.w	r3, r7, #14
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	2238      	movs	r2, #56	@ 0x38
 8004586:	21d0      	movs	r1, #208	@ 0xd0
 8004588:	f7fd fe96 	bl	80022b8 <HAL_I2C_Mem_Write>
 800458c:	4603      	mov	r3, r0
 800458e:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <MPU6050_Init+0x1a8>
        printf("Error escribiendo INT_ENABLE\n");
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <MPU6050_Init+0x1d4>)
 8004598:	f002 fec4 	bl	8007324 <puts>
        return ret;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	e000      	b.n	80045a2 <MPU6050_Init+0x1aa>
    }

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000310 	.word	0x20000310
 80045b0:	08009934 	.word	0x08009934
 80045b4:	08009948 	.word	0x08009948
 80045b8:	08009960 	.word	0x08009960
 80045bc:	08009980 	.word	0x08009980
 80045c0:	080099a0 	.word	0x080099a0
 80045c4:	080099c0 	.word	0x080099c0
 80045c8:	080099dc 	.word	0x080099dc
 80045cc:	080099fc 	.word	0x080099fc

080045d0 <MPU6050_HandleInterrupt>:


void MPU6050_HandleInterrupt(void) {
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
    data_ready = 1;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <MPU6050_HandleInterrupt+0x14>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000034c 	.word	0x2000034c

080045e8 <MPU6050_Process>:

#include <time.h>  // o usa un timer hardware para medir dt

static uint32_t last_tick = 0;

void MPU6050_Process(void) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af04      	add	r7, sp, #16
    if (!data_ready) return;
 80045ee:	4b7f      	ldr	r3, [pc, #508]	@ (80047ec <MPU6050_Process+0x204>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80f5 	beq.w	80047e4 <MPU6050_Process+0x1fc>
    data_ready = 0;
 80045fa:	4b7c      	ldr	r3, [pc, #496]	@ (80047ec <MPU6050_Process+0x204>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]

    uint8_t buf[14];
    if (HAL_I2C_Mem_Read(mpu_i2c, MPU6050_ADDR, DATA_START_REG, 1, buf, 14, HAL_MAX_DELAY) != HAL_OK) {
 8004600:	4b7b      	ldr	r3, [pc, #492]	@ (80047f0 <MPU6050_Process+0x208>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	230e      	movs	r3, #14
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	463b      	mov	r3, r7
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2301      	movs	r3, #1
 8004614:	223b      	movs	r2, #59	@ 0x3b
 8004616:	21d0      	movs	r1, #208	@ 0xd0
 8004618:	f7fd ff48 	bl	80024ac <HAL_I2C_Mem_Read>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <MPU6050_Process+0x42>
        printf("Error leyendo datos del MPU6050\n");
 8004622:	4874      	ldr	r0, [pc, #464]	@ (80047f4 <MPU6050_Process+0x20c>)
 8004624:	f002 fe7e 	bl	8007324 <puts>
        return;
 8004628:	e0dd      	b.n	80047e6 <MPU6050_Process+0x1fe>
    }

    // Leer datos crudos
    mpu_data.accel_x = (buf[0] << 8) | buf[1];
 800462a:	783b      	ldrb	r3, [r7, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	b21a      	sxth	r2, r3
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	b21b      	sxth	r3, r3
 8004634:	4313      	orrs	r3, r2
 8004636:	b21a      	sxth	r2, r3
 8004638:	4b6f      	ldr	r3, [pc, #444]	@ (80047f8 <MPU6050_Process+0x210>)
 800463a:	801a      	strh	r2, [r3, #0]
    mpu_data.accel_y = (buf[2] << 8) | buf[3];
 800463c:	78bb      	ldrb	r3, [r7, #2]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	b21a      	sxth	r2, r3
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	b21b      	sxth	r3, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	b21a      	sxth	r2, r3
 800464a:	4b6b      	ldr	r3, [pc, #428]	@ (80047f8 <MPU6050_Process+0x210>)
 800464c:	805a      	strh	r2, [r3, #2]
    mpu_data.accel_z = (buf[4] << 8) | buf[5];
 800464e:	793b      	ldrb	r3, [r7, #4]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b21a      	sxth	r2, r3
 8004654:	797b      	ldrb	r3, [r7, #5]
 8004656:	b21b      	sxth	r3, r3
 8004658:	4313      	orrs	r3, r2
 800465a:	b21a      	sxth	r2, r3
 800465c:	4b66      	ldr	r3, [pc, #408]	@ (80047f8 <MPU6050_Process+0x210>)
 800465e:	809a      	strh	r2, [r3, #4]
    mpu_data.temp_raw = (buf[6] << 8) | buf[7];
 8004660:	79bb      	ldrb	r3, [r7, #6]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	b21a      	sxth	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	b21b      	sxth	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b21a      	sxth	r2, r3
 800466e:	4b62      	ldr	r3, [pc, #392]	@ (80047f8 <MPU6050_Process+0x210>)
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
    mpu_data.gyro_x  = (buf[8]  << 8) | buf[9];
 8004672:	7a3b      	ldrb	r3, [r7, #8]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	b21a      	sxth	r2, r3
 8004678:	7a7b      	ldrb	r3, [r7, #9]
 800467a:	b21b      	sxth	r3, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	b21a      	sxth	r2, r3
 8004680:	4b5d      	ldr	r3, [pc, #372]	@ (80047f8 <MPU6050_Process+0x210>)
 8004682:	829a      	strh	r2, [r3, #20]
    mpu_data.gyro_y  = (buf[10] << 8) | buf[11];
 8004684:	7abb      	ldrb	r3, [r7, #10]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	b21a      	sxth	r2, r3
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	b21b      	sxth	r3, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	b21a      	sxth	r2, r3
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <MPU6050_Process+0x210>)
 8004694:	82da      	strh	r2, [r3, #22]
    mpu_data.gyro_z  = (buf[12] << 8) | buf[13];
 8004696:	7b3b      	ldrb	r3, [r7, #12]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	b21a      	sxth	r2, r3
 800469c:	7b7b      	ldrb	r3, [r7, #13]
 800469e:	b21b      	sxth	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b21a      	sxth	r2, r3
 80046a4:	4b54      	ldr	r3, [pc, #336]	@ (80047f8 <MPU6050_Process+0x210>)
 80046a6:	831a      	strh	r2, [r3, #24]

    // Convertir unidades
    mpu_data.accel_gx = mpu_data.accel_x * 9.80665f / 16384.0f;
 80046a8:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <MPU6050_Process+0x210>)
 80046aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc faf4 	bl	8000c9c <__aeabi_i2f>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4951      	ldr	r1, [pc, #324]	@ (80047fc <MPU6050_Process+0x214>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fc fb43 	bl	8000d44 <__aeabi_fmul>
 80046be:	4603      	mov	r3, r0
 80046c0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fc fbf1 	bl	8000eac <__aeabi_fdiv>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <MPU6050_Process+0x210>)
 80046d0:	609a      	str	r2, [r3, #8]
    mpu_data.accel_gy = mpu_data.accel_y * 9.80665f / 16384.0f;
 80046d2:	4b49      	ldr	r3, [pc, #292]	@ (80047f8 <MPU6050_Process+0x210>)
 80046d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc fadf 	bl	8000c9c <__aeabi_i2f>
 80046de:	4603      	mov	r3, r0
 80046e0:	4946      	ldr	r1, [pc, #280]	@ (80047fc <MPU6050_Process+0x214>)
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fb2e 	bl	8000d44 <__aeabi_fmul>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fc fbdc 	bl	8000eac <__aeabi_fdiv>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b3f      	ldr	r3, [pc, #252]	@ (80047f8 <MPU6050_Process+0x210>)
 80046fa:	60da      	str	r2, [r3, #12]
    mpu_data.accel_gz = mpu_data.accel_z * 9.80665f / 16384.0f;
 80046fc:	4b3e      	ldr	r3, [pc, #248]	@ (80047f8 <MPU6050_Process+0x210>)
 80046fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc faca 	bl	8000c9c <__aeabi_i2f>
 8004708:	4603      	mov	r3, r0
 800470a:	493c      	ldr	r1, [pc, #240]	@ (80047fc <MPU6050_Process+0x214>)
 800470c:	4618      	mov	r0, r3
 800470e:	f7fc fb19 	bl	8000d44 <__aeabi_fmul>
 8004712:	4603      	mov	r3, r0
 8004714:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc fbc7 	bl	8000eac <__aeabi_fdiv>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	4b35      	ldr	r3, [pc, #212]	@ (80047f8 <MPU6050_Process+0x210>)
 8004724:	611a      	str	r2, [r3, #16]

    mpu_data.gyro_dps_x = mpu_data.gyro_x / 131.0f;
 8004726:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <MPU6050_Process+0x210>)
 8004728:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fc fab5 	bl	8000c9c <__aeabi_i2f>
 8004732:	4603      	mov	r3, r0
 8004734:	4932      	ldr	r1, [pc, #200]	@ (8004800 <MPU6050_Process+0x218>)
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fbb8 	bl	8000eac <__aeabi_fdiv>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	4b2d      	ldr	r3, [pc, #180]	@ (80047f8 <MPU6050_Process+0x210>)
 8004742:	61da      	str	r2, [r3, #28]
    mpu_data.gyro_dps_y = mpu_data.gyro_y / 131.0f;
 8004744:	4b2c      	ldr	r3, [pc, #176]	@ (80047f8 <MPU6050_Process+0x210>)
 8004746:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fc faa6 	bl	8000c9c <__aeabi_i2f>
 8004750:	4603      	mov	r3, r0
 8004752:	492b      	ldr	r1, [pc, #172]	@ (8004800 <MPU6050_Process+0x218>)
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fba9 	bl	8000eac <__aeabi_fdiv>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	4b26      	ldr	r3, [pc, #152]	@ (80047f8 <MPU6050_Process+0x210>)
 8004760:	621a      	str	r2, [r3, #32]
    mpu_data.gyro_dps_z = mpu_data.gyro_z / 131.0f;
 8004762:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <MPU6050_Process+0x210>)
 8004764:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc fa97 	bl	8000c9c <__aeabi_i2f>
 800476e:	4603      	mov	r3, r0
 8004770:	4923      	ldr	r1, [pc, #140]	@ (8004800 <MPU6050_Process+0x218>)
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fb9a 	bl	8000eac <__aeabi_fdiv>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	4b1e      	ldr	r3, [pc, #120]	@ (80047f8 <MPU6050_Process+0x210>)
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24

    mpu_data.temperature = mpu_data.temp_raw / 340.0f + 36.53f;
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <MPU6050_Process+0x210>)
 8004782:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fa88 	bl	8000c9c <__aeabi_i2f>
 800478c:	4603      	mov	r3, r0
 800478e:	491d      	ldr	r1, [pc, #116]	@ (8004804 <MPU6050_Process+0x21c>)
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fb8b 	bl	8000eac <__aeabi_fdiv>
 8004796:	4603      	mov	r3, r0
 8004798:	491b      	ldr	r1, [pc, #108]	@ (8004808 <MPU6050_Process+0x220>)
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc f9ca 	bl	8000b34 <__addsf3>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <MPU6050_Process+0x210>)
 80047a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Obtener tiempo actual (ejemplo con HAL_GetTick)
    uint32_t current_tick = HAL_GetTick(); // ms desde inicio
 80047a8:	f7fd f934 	bl	8001a14 <HAL_GetTick>
 80047ac:	6178      	str	r0, [r7, #20]
    float dt = (last_tick == 0) ? 0.01f : (current_tick - last_tick) / 1000.0f;
 80047ae:	4b17      	ldr	r3, [pc, #92]	@ (800480c <MPU6050_Process+0x224>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <MPU6050_Process+0x1ea>
 80047b6:	4b15      	ldr	r3, [pc, #84]	@ (800480c <MPU6050_Process+0x224>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fa68 	bl	8000c94 <__aeabi_ui2f>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4912      	ldr	r1, [pc, #72]	@ (8004810 <MPU6050_Process+0x228>)
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc fb6f 	bl	8000eac <__aeabi_fdiv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	e000      	b.n	80047d4 <MPU6050_Process+0x1ec>
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <MPU6050_Process+0x22c>)
 80047d4:	613b      	str	r3, [r7, #16]
    last_tick = current_tick;
 80047d6:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <MPU6050_Process+0x224>)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6013      	str	r3, [r2, #0]

    // Actualizar ángulos con filtro complementario
    MPU6050_UpdateOrientation(dt);
 80047dc:	6938      	ldr	r0, [r7, #16]
 80047de:	f000 f81b 	bl	8004818 <MPU6050_UpdateOrientation>
 80047e2:	e000      	b.n	80047e6 <MPU6050_Process+0x1fe>
    if (!data_ready) return;
 80047e4:	bf00      	nop

}
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	2000034c 	.word	0x2000034c
 80047f0:	20000310 	.word	0x20000310
 80047f4:	08009a1c 	.word	0x08009a1c
 80047f8:	20000314 	.word	0x20000314
 80047fc:	411ce80a 	.word	0x411ce80a
 8004800:	43030000 	.word	0x43030000
 8004804:	43aa0000 	.word	0x43aa0000
 8004808:	42121eb8 	.word	0x42121eb8
 800480c:	20000350 	.word	0x20000350
 8004810:	447a0000 	.word	0x447a0000
 8004814:	3c23d70a 	.word	0x3c23d70a

08004818 <MPU6050_UpdateOrientation>:



void MPU6050_UpdateOrientation(float dt) {
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    // Ángulos por acelerómetro (en grados)
    float roll_acc  = atan2f(mpu_data.accel_gy, mpu_data.accel_gz) * 180.0f / M_PI;
 8004820:	4b67      	ldr	r3, [pc, #412]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a66      	ldr	r2, [pc, #408]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 8004826:	6912      	ldr	r2, [r2, #16]
 8004828:	4611      	mov	r1, r2
 800482a:	4618      	mov	r0, r3
 800482c:	f004 fe24 	bl	8009478 <atan2f>
 8004830:	4603      	mov	r3, r0
 8004832:	4964      	ldr	r1, [pc, #400]	@ (80049c4 <MPU6050_UpdateOrientation+0x1ac>)
 8004834:	4618      	mov	r0, r3
 8004836:	f7fc fa85 	bl	8000d44 <__aeabi_fmul>
 800483a:	4603      	mov	r3, r0
 800483c:	4618      	mov	r0, r3
 800483e:	f7fb fdf3 	bl	8000428 <__aeabi_f2d>
 8004842:	a35d      	add	r3, pc, #372	@ (adr r3, 80049b8 <MPU6050_UpdateOrientation+0x1a0>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb ff70 	bl	800072c <__aeabi_ddiv>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f7fc f918 	bl	8000a88 <__aeabi_d2f>
 8004858:	4603      	mov	r3, r0
 800485a:	60fb      	str	r3, [r7, #12]
    float pitch_acc = atan2f(-mpu_data.accel_gx, sqrtf(mpu_data.accel_gy * mpu_data.accel_gy + mpu_data.accel_gz * mpu_data.accel_gz)) * 180.0f / M_PI;
 800485c:	4b58      	ldr	r3, [pc, #352]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004864:	4b56      	ldr	r3, [pc, #344]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a55      	ldr	r2, [pc, #340]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800486a:	68d2      	ldr	r2, [r2, #12]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fa68 	bl	8000d44 <__aeabi_fmul>
 8004874:	4603      	mov	r3, r0
 8004876:	461d      	mov	r5, r3
 8004878:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	4a50      	ldr	r2, [pc, #320]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800487e:	6912      	ldr	r2, [r2, #16]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fa5e 	bl	8000d44 <__aeabi_fmul>
 8004888:	4603      	mov	r3, r0
 800488a:	4619      	mov	r1, r3
 800488c:	4628      	mov	r0, r5
 800488e:	f7fc f951 	bl	8000b34 <__addsf3>
 8004892:	4603      	mov	r3, r0
 8004894:	4618      	mov	r0, r3
 8004896:	f004 fdf1 	bl	800947c <sqrtf>
 800489a:	4603      	mov	r3, r0
 800489c:	4619      	mov	r1, r3
 800489e:	4620      	mov	r0, r4
 80048a0:	f004 fdea 	bl	8009478 <atan2f>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4947      	ldr	r1, [pc, #284]	@ (80049c4 <MPU6050_UpdateOrientation+0x1ac>)
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fa4b 	bl	8000d44 <__aeabi_fmul>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fdb9 	bl	8000428 <__aeabi_f2d>
 80048b6:	a340      	add	r3, pc, #256	@ (adr r3, 80049b8 <MPU6050_UpdateOrientation+0x1a0>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f7fb ff36 	bl	800072c <__aeabi_ddiv>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	f7fc f8de 	bl	8000a88 <__aeabi_d2f>
 80048cc:	4603      	mov	r3, r0
 80048ce:	60bb      	str	r3, [r7, #8]

    // Primera lectura: inicializar ángulos con acelerómetro para evitar "saltos"
    if (!inicializado) {
 80048d0:	4b3d      	ldr	r3, [pc, #244]	@ (80049c8 <MPU6050_UpdateOrientation+0x1b0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <MPU6050_UpdateOrientation+0xd2>
    	mpu_data.roll = roll_acc;
 80048d8:	4a39      	ldr	r2, [pc, #228]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6313      	str	r3, [r2, #48]	@ 0x30
    	mpu_data.pitch = pitch_acc;
 80048de:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6353      	str	r3, [r2, #52]	@ 0x34
        inicializado = 1;
 80048e4:	4b38      	ldr	r3, [pc, #224]	@ (80049c8 <MPU6050_UpdateOrientation+0x1b0>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
    }

    // Integrar giroscopio (velocidad angular en grados/seg)
    mpu_data.roll  += mpu_data.gyro_dps_x * dt;
 80048ea:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 80048ec:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc fa25 	bl	8000d44 <__aeabi_fmul>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4619      	mov	r1, r3
 80048fe:	4620      	mov	r0, r4
 8004900:	f7fc f918 	bl	8000b34 <__addsf3>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
    mpu_data.pitch += mpu_data.gyro_dps_y * dt;
 800490c:	4b2c      	ldr	r3, [pc, #176]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800490e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004910:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc fa14 	bl	8000d44 <__aeabi_fmul>
 800491c:	4603      	mov	r3, r0
 800491e:	4619      	mov	r1, r3
 8004920:	4620      	mov	r0, r4
 8004922:	f7fc f907 	bl	8000b34 <__addsf3>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800492c:	635a      	str	r2, [r3, #52]	@ 0x34

    // Aplicar filtro complementario
    mpu_data.roll  = alpha * mpu_data.roll  + (1.0f - alpha) * roll_acc;
 800492e:	4b24      	ldr	r3, [pc, #144]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	4a26      	ldr	r2, [pc, #152]	@ (80049cc <MPU6050_UpdateOrientation+0x1b4>)
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc fa03 	bl	8000d44 <__aeabi_fmul>
 800493e:	4603      	mov	r3, r0
 8004940:	461c      	mov	r4, r3
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <MPU6050_UpdateOrientation+0x1b4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800494c:	f7fc f8f0 	bl	8000b30 <__aeabi_fsub>
 8004950:	4603      	mov	r3, r0
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fc f9f5 	bl	8000d44 <__aeabi_fmul>
 800495a:	4603      	mov	r3, r0
 800495c:	4619      	mov	r1, r3
 800495e:	4620      	mov	r0, r4
 8004960:	f7fc f8e8 	bl	8000b34 <__addsf3>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
    mpu_data.pitch = alpha * mpu_data.pitch + (1.0f - alpha) * pitch_acc;
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 800496e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004970:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <MPU6050_UpdateOrientation+0x1b4>)
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc f9e4 	bl	8000d44 <__aeabi_fmul>
 800497c:	4603      	mov	r3, r0
 800497e:	461c      	mov	r4, r3
 8004980:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <MPU6050_UpdateOrientation+0x1b4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800498a:	f7fc f8d1 	bl	8000b30 <__aeabi_fsub>
 800498e:	4603      	mov	r3, r0
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc f9d6 	bl	8000d44 <__aeabi_fmul>
 8004998:	4603      	mov	r3, r0
 800499a:	4619      	mov	r1, r3
 800499c:	4620      	mov	r0, r4
 800499e:	f7fc f8c9 	bl	8000b34 <__addsf3>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <MPU6050_UpdateOrientation+0x1a8>)
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34

    //printf("Roll: %.2f°, Pitch: %.2f°\n", mpu_data.roll, mpu_data.pitch);
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bdb0      	pop	{r4, r5, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	54442d18 	.word	0x54442d18
 80049bc:	400921fb 	.word	0x400921fb
 80049c0:	20000314 	.word	0x20000314
 80049c4:	43340000 	.word	0x43340000
 80049c8:	2000034d 	.word	0x2000034d
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <MPU6050_GetData>:



MPU6050_Data_t MPU6050_GetData(void) {
 80049d0:	b4b0      	push	{r4, r5, r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	//printf("Roll: %.2f°, Pitch: %.2f°\n", mpu_data.roll, mpu_data.pitch);
    return mpu_data;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <MPU6050_GetData+0x30>)
 80049dc:	461c      	mov	r4, r3
 80049de:	4615      	mov	r5, r2
 80049e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049f0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bcb0      	pop	{r4, r5, r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000314 	.word	0x20000314

08004a04 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8004a0a:	b672      	cpsid	i
 8004a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8004b4c <app_init+0x148>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4f      	ldr	r2, [pc, #316]	@ (8004b50 <app_init+0x14c>)
 8004a12:	213f      	movs	r1, #63	@ 0x3f
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fc8d 	bl	8007334 <sniprintf>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b54 <app_init+0x150>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b4a      	ldr	r3, [pc, #296]	@ (8004b4c <app_init+0x148>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fb4d 	bl	80050c4 <logger_log_print_>
 8004a2a:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8004a2c:	b672      	cpsid	i
 8004a2e:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <app_init+0x148>)
 8004a30:	681c      	ldr	r4, [r3, #0]
 8004a32:	f7fc ffef 	bl	8001a14 <HAL_GetTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <app_init+0x154>)
 8004a3c:	4a47      	ldr	r2, [pc, #284]	@ (8004b5c <app_init+0x158>)
 8004a3e:	213f      	movs	r1, #63	@ 0x3f
 8004a40:	4620      	mov	r0, r4
 8004a42:	f002 fc77 	bl	8007334 <sniprintf>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4a42      	ldr	r2, [pc, #264]	@ (8004b54 <app_init+0x150>)
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <app_init+0x148>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb37 	bl	80050c4 <logger_log_print_>
 8004a56:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8004a58:	b672      	cpsid	i
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b4c <app_init+0x148>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a40      	ldr	r2, [pc, #256]	@ (8004b60 <app_init+0x15c>)
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	213f      	movs	r1, #63	@ 0x3f
 8004a64:	4618      	mov	r0, r3
 8004a66:	f002 fc65 	bl	8007334 <sniprintf>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4a39      	ldr	r2, [pc, #228]	@ (8004b54 <app_init+0x150>)
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b36      	ldr	r3, [pc, #216]	@ (8004b4c <app_init+0x148>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb25 	bl	80050c4 <logger_log_print_>
 8004a7a:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8004a7c:	b672      	cpsid	i
 8004a7e:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <app_init+0x148>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <app_init+0x160>)
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	213f      	movs	r1, #63	@ 0x3f
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f002 fc53 	bl	8007334 <sniprintf>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4a30      	ldr	r2, [pc, #192]	@ (8004b54 <app_init+0x150>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <app_init+0x148>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fb13 	bl	80050c4 <logger_log_print_>
 8004a9e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8004aa0:	4b31      	ldr	r3, [pc, #196]	@ (8004b68 <app_init+0x164>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8004aa6:	b672      	cpsid	i
 8004aa8:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <app_init+0x148>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4b2e      	ldr	r3, [pc, #184]	@ (8004b68 <app_init+0x164>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <app_init+0x168>)
 8004ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b70 <app_init+0x16c>)
 8004ab6:	213f      	movs	r1, #63	@ 0x3f
 8004ab8:	f002 fc3c 	bl	8007334 <sniprintf>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4a25      	ldr	r2, [pc, #148]	@ (8004b54 <app_init+0x150>)
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <app_init+0x148>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fafc 	bl	80050c4 <logger_log_print_>
 8004acc:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	e01a      	b.n	8004b0a <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8004ad4:	4927      	ldr	r1, [pc, #156]	@ (8004b74 <app_init+0x170>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	4823      	ldr	r0, [pc, #140]	@ (8004b74 <app_init+0x170>)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4403      	add	r3, r0
 8004af2:	3308      	adds	r3, #8
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8004afa:	4a1f      	ldr	r2, [pc, #124]	@ (8004b78 <app_init+0x174>)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2100      	movs	r1, #0
 8004b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3301      	adds	r3, #1
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d9e1      	bls.n	8004ad4 <app_init+0xd0>
	}

	cycle_counter_init();
 8004b10:	4b1a      	ldr	r3, [pc, #104]	@ (8004b7c <app_init+0x178>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a19      	ldr	r2, [pc, #100]	@ (8004b7c <app_init+0x178>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	60d3      	str	r3, [r2, #12]
 8004b1c:	4b18      	ldr	r3, [pc, #96]	@ (8004b80 <app_init+0x17c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	4b17      	ldr	r3, [pc, #92]	@ (8004b80 <app_init+0x17c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <app_init+0x17c>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 8004b2e:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <app_init+0x180>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 8004b36:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <app_init+0x184>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
	g_task_menu_tick_cnt = G_APP_TICK_CNT_INI;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <app_init+0x188>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 8004b42:	b662      	cpsie	i
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	08009d70 	.word	0x08009d70
 8004b50:	08009a88 	.word	0x08009a88
 8004b54:	200003c4 	.word	0x200003c4
 8004b58:	08009a8c 	.word	0x08009a8c
 8004b5c:	08009a98 	.word	0x08009a98
 8004b60:	20000010 	.word	0x20000010
 8004b64:	20000014 	.word	0x20000014
 8004b68:	20000368 	.word	0x20000368
 8004b6c:	08009abc 	.word	0x08009abc
 8004b70:	08009ac8 	.word	0x08009ac8
 8004b74:	08009d4c 	.word	0x08009d4c
 8004b78:	20000374 	.word	0x20000374
 8004b7c:	e000edf0 	.word	0xe000edf0
 8004b80:	e0001000 	.word	0xe0001000
 8004b84:	20000370 	.word	0x20000370
 8004b88:	20000410 	.word	0x20000410
 8004b8c:	200003d4 	.word	0x200003d4

08004b90 <app_update>:

void app_update(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8004b96:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <app_update+0xac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d049      	beq.n	8004c32 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 8004b9e:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <app_update+0xac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <app_update+0xac>)
 8004ba6:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <app_update+0xb0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <app_update+0xb0>)
 8004bb0:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <app_update+0xb4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	e036      	b.n	8004c2c <app_update+0x9c>
    	{
			cycle_counter_reset();
 8004bbe:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <app_update+0xb8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8004bc4:	4921      	ldr	r1, [pc, #132]	@ (8004c4c <app_update+0xbc>)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	481d      	ldr	r0, [pc, #116]	@ (8004c4c <app_update+0xbc>)
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4403      	add	r3, r0
 8004be4:	3308      	adds	r3, #8
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 8004bec:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <app_update+0xb8>)
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <app_update+0xc0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4917      	ldr	r1, [pc, #92]	@ (8004c54 <app_update+0xc4>)
 8004bf6:	fba1 1303 	umull	r1, r3, r1, r3
 8004bfa:	0c9b      	lsrs	r3, r3, #18
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8004c02:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <app_update+0xb4>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c44 <app_update+0xb4>)
 8004c0c:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8004c0e:	4a12      	ldr	r2, [pc, #72]	@ (8004c58 <app_update+0xc8>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d904      	bls.n	8004c26 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8004c1c:	490e      	ldr	r1, [pc, #56]	@ (8004c58 <app_update+0xc8>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d9c5      	bls.n	8004bbe <app_update+0x2e>
			}
	    }
    }
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000370 	.word	0x20000370
 8004c40:	20000368 	.word	0x20000368
 8004c44:	2000036c 	.word	0x2000036c
 8004c48:	e0001000 	.word	0xe0001000
 8004c4c:	08009d4c 	.word	0x08009d4c
 8004c50:	20000000 	.word	0x20000000
 8004c54:	431bde83 	.word	0x431bde83
 8004c58:	20000374 	.word	0x20000374

08004c5c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_SYSTICK_Callback+0x2c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <HAL_SYSTICK_Callback+0x2c>)
 8004c68:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	@ (8004c8c <HAL_SYSTICK_Callback+0x30>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	4a06      	ldr	r2, [pc, #24]	@ (8004c8c <HAL_SYSTICK_Callback+0x30>)
 8004c72:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_SYSTICK_Callback+0x34>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a05      	ldr	r2, [pc, #20]	@ (8004c90 <HAL_SYSTICK_Callback+0x34>)
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000370 	.word	0x20000370
 8004c8c:	20000410 	.word	0x20000410
 8004c90:	200003d4 	.word	0x200003d4

08004c94 <displayInit>:

void display_delay_us(uint32_t delay_us);

//=====[Implementations of public functions]===================================
void displayInit( displayConnection_t connection )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 8004c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d5c <displayInit+0xc8>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <displayInit+0xcc>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8004caa:	2032      	movs	r0, #50	@ 0x32
 8004cac:	f7fc febc 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004cb0:	2130      	movs	r1, #48	@ 0x30
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f000 f8b6 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8004cb8:	2005      	movs	r0, #5
 8004cba:	f7fc feb5 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004cbe:	2130      	movs	r1, #48	@ 0x30
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f000 f8af 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f7fc feae 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004ccc:	2130      	movs	r1, #48	@ 0x30
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f000 f8a8 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fc fea7 	bl	8001a28 <HAL_Delay>

    switch( display.connection ) {
 8004cda:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <displayInit+0xc8>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <displayInit+0x62>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d119      	bne.n	8004d1a <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004ce6:	2138      	movs	r1, #56	@ 0x38
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f000 f89b 	bl	8004e24 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f7fc fe9a 	bl	8001a28 <HAL_Delay>
        break;
 8004cf4:	e011      	b.n	8004d1a <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f000 f893 	bl	8004e24 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f7fc fe92 	bl	8001a28 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <displayInit+0xcc>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d0a:	2128      	movs	r1, #40	@ 0x28
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f000 f889 	bl	8004e24 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7fc fe88 	bl	8001a28 <HAL_Delay>
        break;
 8004d18:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f000 f881 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7fc fe80 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d28:	2101      	movs	r1, #1
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f000 f87a 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7fc fe79 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d36:	2106      	movs	r1, #6
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f000 f873 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f7fc fe72 	bl	8001a28 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d44:	210c      	movs	r1, #12
 8004d46:	2000      	movs	r0, #0
 8004d48:	f000 f86c 	bl	8004e24 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7fc fe6b 	bl	8001a28 <HAL_Delay>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000380 	.word	0x20000380
 8004d60:	20000381 	.word	0x20000381

08004d64 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	71fb      	strb	r3, [r7, #7]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 8004d74:	79bb      	ldrb	r3, [r7, #6]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d83a      	bhi.n	8004df0 <displayCharPositionWrite+0x8c>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <displayCharPositionWrite+0x1c>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004da3 	.word	0x08004da3
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004dd7 	.word	0x08004dd7
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	4619      	mov	r1, r3
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f000 f842 	bl	8004e24 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8004da0:	e026      	b.n	8004df0 <displayCharPositionWrite+0x8c>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	3340      	adds	r3, #64	@ 0x40
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8004daa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dae:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	4619      	mov	r1, r3
 8004db4:	2000      	movs	r0, #0
 8004db6:	f000 f835 	bl	8004e24 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8004dba:	e019      	b.n	8004df0 <displayCharPositionWrite+0x8c>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8004dc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dc8:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f000 f828 	bl	8004e24 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8004dd4:	e00c      	b.n	8004df0 <displayCharPositionWrite+0x8c>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	3354      	adds	r3, #84	@ 0x54
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8004dde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004de2:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	2000      	movs	r0, #0
 8004dea:	f000 f81b 	bl	8004e24 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8004dee:	bf00      	nop
    }
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8004e00:	e007      	b.n	8004e12 <displayStringWrite+0x1a>
    	displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f000 f809 	bl	8004e24 <displayCodeWrite>
    while (*str) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f3      	bne.n	8004e02 <displayStringWrite+0xa>
    }
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	71fb      	strb	r3, [r7, #7]
 8004e30:	4613      	mov	r3, r2
 8004e32:	71bb      	strb	r3, [r7, #6]
	if ( type == DISPLAY_RS_INSTRUCTION )
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	f083 0301 	eor.w	r3, r3, #1
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8004e40:	2100      	movs	r1, #0
 8004e42:	2004      	movs	r0, #4
 8004e44:	f000 f812 	bl	8004e6c <displayPinWrite>
 8004e48:	e003      	b.n	8004e52 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	2004      	movs	r0, #4
 8004e4e:	f000 f80d 	bl	8004e6c <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8004e52:	2100      	movs	r1, #0
 8004e54:	2005      	movs	r0, #5
 8004e56:	f000 f809 	bl	8004e6c <displayPinWrite>
	displayDataBusWrite( dataBus );
 8004e5a:	79bb      	ldrb	r3, [r7, #6]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f873 	bl	8004f48 <displayDataBusWrite>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8004e78:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <displayPinWrite+0xcc>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <displayPinWrite+0x1c>
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d154      	bne.n	8004f2e <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8004e84:	bf00      	nop
            }
            break;
 8004e86:	e052      	b.n	8004f2e <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	2b0a      	cmp	r3, #10
 8004e8e:	d84c      	bhi.n	8004f2a <displayPinWrite+0xbe>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <displayPinWrite+0x2c>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004f09 	.word	0x08004f09
 8004e9c:	08004f2b 	.word	0x08004f2b
 8004ea0:	08004f1b 	.word	0x08004f1b
 8004ea4:	08004f2b 	.word	0x08004f2b
 8004ea8:	08004f2b 	.word	0x08004f2b
 8004eac:	08004f2b 	.word	0x08004f2b
 8004eb0:	08004f2b 	.word	0x08004f2b
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ed5 	.word	0x08004ed5
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004ef7 	.word	0x08004ef7
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, value);   break;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2120      	movs	r1, #32
 8004ecc:	481b      	ldr	r0, [pc, #108]	@ (8004f3c <displayPinWrite+0xd0>)
 8004ece:	f7fd f87e 	bl	8001fce <HAL_GPIO_WritePin>
 8004ed2:	e02b      	b.n	8004f2c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, value);   break;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2110      	movs	r1, #16
 8004edc:	4817      	ldr	r0, [pc, #92]	@ (8004f3c <displayPinWrite+0xd0>)
 8004ede:	f7fd f876 	bl	8001fce <HAL_GPIO_WritePin>
 8004ee2:	e023      	b.n	8004f2c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, value);   break;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004eee:	4814      	ldr	r0, [pc, #80]	@ (8004f40 <displayPinWrite+0xd4>)
 8004ef0:	f7fd f86d 	bl	8001fce <HAL_GPIO_WritePin>
 8004ef4:	e01a      	b.n	8004f2c <displayPinWrite+0xc0>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, value);   break;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f00:	480f      	ldr	r0, [pc, #60]	@ (8004f40 <displayPinWrite+0xd4>)
 8004f02:	f7fd f864 	bl	8001fce <HAL_GPIO_WritePin>
 8004f06:	e011      	b.n	8004f2c <displayPinWrite+0xc0>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, value);   break;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f12:	480b      	ldr	r0, [pc, #44]	@ (8004f40 <displayPinWrite+0xd4>)
 8004f14:	f7fd f85b 	bl	8001fce <HAL_GPIO_WritePin>
 8004f18:	e008      	b.n	8004f2c <displayPinWrite+0xc0>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, value);   break;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2180      	movs	r1, #128	@ 0x80
 8004f22:	4808      	ldr	r0, [pc, #32]	@ (8004f44 <displayPinWrite+0xd8>)
 8004f24:	f7fd f853 	bl	8001fce <HAL_GPIO_WritePin>
 8004f28:	e000      	b.n	8004f2c <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 8004f2a:	bf00      	nop
            }
            break;
 8004f2c:	bf00      	nop
    }
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000380 	.word	0x20000380
 8004f3c:	40010c00 	.word	0x40010c00
 8004f40:	40010800 	.word	0x40010800
 8004f44:	40011000 	.word	0x40011000

08004f48 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8004f52:	2100      	movs	r1, #0
 8004f54:	2006      	movs	r0, #6
 8004f56:	f7ff ff89 	bl	8004e6c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f60:	4619      	mov	r1, r3
 8004f62:	200e      	movs	r0, #14
 8004f64:	f7ff ff82 	bl	8004e6c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	4619      	mov	r1, r3
 8004f70:	200d      	movs	r0, #13
 8004f72:	f7ff ff7b 	bl	8004e6c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	200c      	movs	r0, #12
 8004f80:	f7ff ff74 	bl	8004e6c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	200b      	movs	r0, #11
 8004f8e:	f7ff ff6d 	bl	8004e6c <displayPinWrite>
    switch( display.connection ) {
 8004f92:	4b32      	ldr	r3, [pc, #200]	@ (800505c <displayDataBusWrite+0x114>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01e      	beq.n	8004fd8 <displayDataBusWrite+0x90>
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d14b      	bne.n	8005036 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	200a      	movs	r0, #10
 8004fa8:	f7ff ff60 	bl	8004e6c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	2009      	movs	r0, #9
 8004fb6:	f7ff ff59 	bl	8004e6c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2008      	movs	r0, #8
 8004fc4:	f7ff ff52 	bl	8004e6c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	4619      	mov	r1, r3
 8004fd0:	2007      	movs	r0, #7
 8004fd2:	f7ff ff4b 	bl	8004e6c <displayPinWrite>
        break;
 8004fd6:	e02e      	b.n	8005036 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 8004fd8:	4b21      	ldr	r3, [pc, #132]	@ (8005060 <displayDataBusWrite+0x118>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d029      	beq.n	8005034 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	2006      	movs	r0, #6
 8004fe4:	f7ff ff42 	bl	8004e6c <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_01US);
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f000 f83b 	bl	8005064 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2006      	movs	r0, #6
 8004ff2:	f7ff ff3b 	bl	8004e6c <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_37US);
 8004ff6:	2025      	movs	r0, #37	@ 0x25
 8004ff8:	f000 f834 	bl	8005064 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	4619      	mov	r1, r3
 8005004:	200e      	movs	r0, #14
 8005006:	f7ff ff31 	bl	8004e6c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	200d      	movs	r0, #13
 8005014:	f7ff ff2a 	bl	8004e6c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	4619      	mov	r1, r3
 8005020:	200c      	movs	r0, #12
 8005022:	f7ff ff23 	bl	8004e6c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	4619      	mov	r1, r3
 800502e:	200b      	movs	r0, #11
 8005030:	f7ff ff1c 	bl	8004e6c <displayPinWrite>
            }
        break;
 8005034:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8005036:	2101      	movs	r1, #1
 8005038:	2006      	movs	r0, #6
 800503a:	f7ff ff17 	bl	8004e6c <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_01US);
 800503e:	2001      	movs	r0, #1
 8005040:	f000 f810 	bl	8005064 <display_delay_us>

    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8005044:	2100      	movs	r1, #0
 8005046:	2006      	movs	r0, #6
 8005048:	f7ff ff10 	bl	8004e6c <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_37US);
 800504c:	2025      	movs	r0, #37	@ 0x25
 800504e:	f000 f809 	bl	8005064 <display_delay_us>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000380 	.word	0x20000380
 8005060:	20000381 	.word	0x20000381

08005064 <display_delay_us>:

void display_delay_us(uint32_t delay_us)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	uint32_t now = cycle_counter_time_us();
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <display_delay_us+0x54>)
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <display_delay_us+0x58>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4912      	ldr	r1, [pc, #72]	@ (80050c0 <display_delay_us+0x5c>)
 8005076:	fba1 1303 	umull	r1, r3, r1, r3
 800507a:	0c9b      	lsrs	r3, r3, #18
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	60fb      	str	r3, [r7, #12]
	uint32_t then = delay_us + now;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	60bb      	str	r3, [r7, #8]

	while (now < then)
 800508a:	e00a      	b.n	80050a2 <display_delay_us+0x3e>
		now = cycle_counter_time_us();
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <display_delay_us+0x54>)
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <display_delay_us+0x58>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	490a      	ldr	r1, [pc, #40]	@ (80050c0 <display_delay_us+0x5c>)
 8005096:	fba1 1303 	umull	r1, r3, r1, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	60fb      	str	r3, [r7, #12]
	while (now < then)
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3f0      	bcc.n	800508c <display_delay_us+0x28>
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e0001000 	.word	0xe0001000
 80050bc:	20000000 	.word	0x20000000
 80050c0:	431bde83 	.word	0x431bde83

080050c4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	printf(msg);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f002 f8c1 	bl	8007254 <iprintf>
	fflush(stdout);
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <logger_log_print_+0x24>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f001 ffe5 	bl	80070a8 <fflush>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000044 	.word	0x20000044

080050ec <task_menu_init>:
uint32_t g_task_menu_cnt;
volatile uint32_t g_task_menu_tick_cnt;

/********************** external functions definition ************************/
void task_menu_init(void *parameters)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
	task_menu_st_t	state;
	task_menu_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 80050f4:	b672      	cpsid	i
 80050f6:	4b51      	ldr	r3, [pc, #324]	@ (800523c <task_menu_init+0x150>)
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	4b51      	ldr	r3, [pc, #324]	@ (8005240 <task_menu_init+0x154>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4b50      	ldr	r3, [pc, #320]	@ (8005244 <task_menu_init+0x158>)
 8005102:	4a51      	ldr	r2, [pc, #324]	@ (8005248 <task_menu_init+0x15c>)
 8005104:	213f      	movs	r1, #63	@ 0x3f
 8005106:	f002 f915 	bl	8007334 <sniprintf>
 800510a:	4603      	mov	r3, r0
 800510c:	4a4f      	ldr	r2, [pc, #316]	@ (800524c <task_menu_init+0x160>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <task_menu_init+0x150>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ffd5 	bl	80050c4 <logger_log_print_>
 800511a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 800511c:	b672      	cpsid	i
 800511e:	4b47      	ldr	r3, [pc, #284]	@ (800523c <task_menu_init+0x150>)
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	4b4b      	ldr	r3, [pc, #300]	@ (8005250 <task_menu_init+0x164>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4b4a      	ldr	r3, [pc, #296]	@ (8005254 <task_menu_init+0x168>)
 800512a:	4a4b      	ldr	r2, [pc, #300]	@ (8005258 <task_menu_init+0x16c>)
 800512c:	213f      	movs	r1, #63	@ 0x3f
 800512e:	f002 f901 	bl	8007334 <sniprintf>
 8005132:	4603      	mov	r3, r0
 8005134:	4a45      	ldr	r2, [pc, #276]	@ (800524c <task_menu_init+0x160>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b40      	ldr	r3, [pc, #256]	@ (800523c <task_menu_init+0x150>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ffc1 	bl	80050c4 <logger_log_print_>
 8005142:	b662      	cpsie	i

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 8005144:	4b45      	ldr	r3, [pc, #276]	@ (800525c <task_menu_init+0x170>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 800514a:	b672      	cpsid	i
 800514c:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <task_menu_init+0x150>)
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	4b42      	ldr	r3, [pc, #264]	@ (800525c <task_menu_init+0x170>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4b42      	ldr	r3, [pc, #264]	@ (8005260 <task_menu_init+0x174>)
 8005158:	4a42      	ldr	r2, [pc, #264]	@ (8005264 <task_menu_init+0x178>)
 800515a:	213f      	movs	r1, #63	@ 0x3f
 800515c:	f002 f8ea 	bl	8007334 <sniprintf>
 8005160:	4603      	mov	r3, r0
 8005162:	4a3a      	ldr	r2, [pc, #232]	@ (800524c <task_menu_init+0x160>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4b35      	ldr	r3, [pc, #212]	@ (800523c <task_menu_init+0x150>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ffaa 	bl	80050c4 <logger_log_print_>
 8005170:	b662      	cpsie	i

	init_queue_event_task_menu();
 8005172:	f000 fc21 	bl	80059b8 <init_queue_event_task_menu>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_menu_dta = &task_menu_dta;
 8005176:	4b3c      	ldr	r3, [pc, #240]	@ (8005268 <task_menu_init+0x17c>)
 8005178:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_menu_dta->state;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	791b      	ldrb	r3, [r3, #4]
 800517e:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8005180:	b672      	cpsid	i
 8005182:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <task_menu_init+0x150>)
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	7afb      	ldrb	r3, [r7, #11]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	4b38      	ldr	r3, [pc, #224]	@ (800526c <task_menu_init+0x180>)
 800518c:	4a38      	ldr	r2, [pc, #224]	@ (8005270 <task_menu_init+0x184>)
 800518e:	213f      	movs	r1, #63	@ 0x3f
 8005190:	f002 f8d0 	bl	8007334 <sniprintf>
 8005194:	4603      	mov	r3, r0
 8005196:	4a2d      	ldr	r2, [pc, #180]	@ (800524c <task_menu_init+0x160>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b28      	ldr	r3, [pc, #160]	@ (800523c <task_menu_init+0x150>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff90 	bl	80050c4 <logger_log_print_>
 80051a4:	b662      	cpsie	i

	event = p_task_menu_dta->event;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	795b      	ldrb	r3, [r3, #5]
 80051aa:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80051ac:	b672      	cpsid	i
 80051ae:	4b23      	ldr	r3, [pc, #140]	@ (800523c <task_menu_init+0x150>)
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	7abb      	ldrb	r3, [r7, #10]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005274 <task_menu_init+0x188>)
 80051b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <task_menu_init+0x184>)
 80051ba:	213f      	movs	r1, #63	@ 0x3f
 80051bc:	f002 f8ba 	bl	8007334 <sniprintf>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4a22      	ldr	r2, [pc, #136]	@ (800524c <task_menu_init+0x160>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <task_menu_init+0x150>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff7a 	bl	80050c4 <logger_log_print_>
 80051d0:	b662      	cpsie	i

	b_event = p_task_menu_dta->flag;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	799b      	ldrb	r3, [r3, #6]
 80051d6:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80051d8:	b672      	cpsid	i
 80051da:	4b18      	ldr	r3, [pc, #96]	@ (800523c <task_menu_init+0x150>)
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	7a7b      	ldrb	r3, [r7, #9]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <task_menu_init+0xfc>
 80051e4:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <task_menu_init+0x18c>)
 80051e6:	e000      	b.n	80051ea <task_menu_init+0xfe>
 80051e8:	4b24      	ldr	r3, [pc, #144]	@ (800527c <task_menu_init+0x190>)
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <task_menu_init+0x194>)
 80051ee:	4a25      	ldr	r2, [pc, #148]	@ (8005284 <task_menu_init+0x198>)
 80051f0:	213f      	movs	r1, #63	@ 0x3f
 80051f2:	f002 f89f 	bl	8007334 <sniprintf>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4a14      	ldr	r2, [pc, #80]	@ (800524c <task_menu_init+0x160>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	4b0f      	ldr	r3, [pc, #60]	@ (800523c <task_menu_init+0x150>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff5f 	bl	80050c4 <logger_log_print_>
 8005206:	b662      	cpsie	i

	cycle_counter_init();
 8005208:	4b1f      	ldr	r3, [pc, #124]	@ (8005288 <task_menu_init+0x19c>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <task_menu_init+0x19c>)
 800520e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005212:	60d3      	str	r3, [r2, #12]
 8005214:	4b1d      	ldr	r3, [pc, #116]	@ (800528c <task_menu_init+0x1a0>)
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	4b1c      	ldr	r3, [pc, #112]	@ (800528c <task_menu_init+0x1a0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1b      	ldr	r2, [pc, #108]	@ (800528c <task_menu_init+0x1a0>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6013      	str	r3, [r2, #0]
	cycle_counter_reset();
 8005226:	4b19      	ldr	r3, [pc, #100]	@ (800528c <task_menu_init+0x1a0>)
 8005228:	2200      	movs	r2, #0
 800522a:	605a      	str	r2, [r3, #4]

	displayCharPositionWrite(0, 1);
	displayStringWrite("Test Nro: ");
	*/

	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 800522c:	4b18      	ldr	r3, [pc, #96]	@ (8005290 <task_menu_init+0x1a4>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	08009d70 	.word	0x08009d70
 8005240:	20000018 	.word	0x20000018
 8005244:	08009b18 	.word	0x08009b18
 8005248:	08009b28 	.word	0x08009b28
 800524c:	200003c4 	.word	0x200003c4
 8005250:	2000001c 	.word	0x2000001c
 8005254:	08009b40 	.word	0x08009b40
 8005258:	08009b4c 	.word	0x08009b4c
 800525c:	200003d0 	.word	0x200003d0
 8005260:	08009b5c 	.word	0x08009b5c
 8005264:	08009b6c 	.word	0x08009b6c
 8005268:	200003c8 	.word	0x200003c8
 800526c:	08009b7c 	.word	0x08009b7c
 8005270:	08009b84 	.word	0x08009b84
 8005274:	08009b90 	.word	0x08009b90
 8005278:	08009b98 	.word	0x08009b98
 800527c:	08009ba0 	.word	0x08009ba0
 8005280:	08009ba8 	.word	0x08009ba8
 8005284:	08009bb0 	.word	0x08009bb0
 8005288:	e000edf0 	.word	0xe000edf0
 800528c:	e0001000 	.word	0xe0001000
 8005290:	200003d4 	.word	0x200003d4

08005294 <task_menu_update>:

void task_menu_update(void *parameters)
{
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b0b2      	sub	sp, #200	@ 0xc8
 8005298:	af04      	add	r7, sp, #16
 800529a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	task_menu_dta_t *p_task_menu_dta;
	bool b_time_update_required = false;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	char menu_str[8];
	shared_data_type *shared_data = (shared_data_type *) parameters;
 80052a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	/* Update Task Menu Counter */
	g_task_menu_cnt++;
 80052a8:	4bc2      	ldr	r3, [pc, #776]	@ (80055b4 <task_menu_update+0x320>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	4ac1      	ldr	r2, [pc, #772]	@ (80055b4 <task_menu_update+0x320>)
 80052b0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 80052b2:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80052b4:	4bc0      	ldr	r3, [pc, #768]	@ (80055b8 <task_menu_update+0x324>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <task_menu_update+0x38>
    {
    	g_task_menu_tick_cnt--;
 80052bc:	4bbe      	ldr	r3, [pc, #760]	@ (80055b8 <task_menu_update+0x324>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	4abd      	ldr	r2, [pc, #756]	@ (80055b8 <task_menu_update+0x324>)
 80052c4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80052cc:	b662      	cpsie	i

    while (b_time_update_required)
 80052ce:	e369      	b.n	80059a4 <task_menu_update+0x710>
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 80052d0:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80052d2:	4bb9      	ldr	r3, [pc, #740]	@ (80055b8 <task_menu_update+0x324>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <task_menu_update+0x58>
		{
			g_task_menu_tick_cnt--;
 80052da:	4bb7      	ldr	r3, [pc, #732]	@ (80055b8 <task_menu_update+0x324>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3b01      	subs	r3, #1
 80052e0:	4ab5      	ldr	r2, [pc, #724]	@ (80055b8 <task_menu_update+0x324>)
 80052e2:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 80052ea:	e002      	b.n	80052f2 <task_menu_update+0x5e>
		}
		else
		{
			b_time_update_required = false;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80052f2:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_menu_dta = &task_menu_dta;
 80052f4:	4bb1      	ldr	r3, [pc, #708]	@ (80055bc <task_menu_update+0x328>)
 80052f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    	if (DEL_MEN_XX_MIN < p_task_menu_dta->tick)
 80052fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <task_menu_update+0x80>
		{
			p_task_menu_dta->tick--;
 8005304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e347      	b.n	80059a4 <task_menu_update+0x710>
			snprintf(menu_str, sizeof(menu_str), "%lu", (g_task_menu_cnt/1000ul));
			displayCharPositionWrite(10, 1);
			displayStringWrite(menu_str);
			*/

			p_task_menu_dta->tick = DEL_MEN_XX_MAX;
 8005314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005318:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800531c:	601a      	str	r2, [r3, #0]

			if (true == any_event_task_menu())
 800531e:	f000 fbb7 	bl	8005a90 <any_event_task_menu>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <task_menu_update+0xaa>
			{
				p_task_menu_dta->flag = true;
 8005328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800532c:	2201      	movs	r2, #1
 800532e:	719a      	strb	r2, [r3, #6]
				p_task_menu_dta->event = get_event_task_menu();
 8005330:	f000 fb88 	bl	8005a44 <get_event_task_menu>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800533c:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_menu_dta->state)
 800533e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	2b07      	cmp	r3, #7
 8005346:	f200 830d 	bhi.w	8005964 <task_menu_update+0x6d0>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <task_menu_update+0xbc>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005371 	.word	0x08005371
 8005354:	080053af 	.word	0x080053af
 8005358:	08005437 	.word	0x08005437
 800535c:	080056a3 	.word	0x080056a3
 8005360:	080055d5 	.word	0x080055d5
 8005364:	080054e5 	.word	0x080054e5
 8005368:	08005751 	.word	0x08005751
 800536c:	08005847 	.word	0x08005847
			{
				case ST_MEN_XX_IDLE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8005370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005374:	799b      	ldrb	r3, [r3, #6]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8305 	beq.w	8005986 <task_menu_update+0x6f2>
 800537c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005380:	795b      	ldrb	r3, [r3, #5]
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 82ff 	bne.w	8005986 <task_menu_update+0x6f2>
					{
						p_task_menu_dta->flag = false;
 8005388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800538c:	2200      	movs	r2, #0
 800538e:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU;
 8005390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005394:	2201      	movs	r2, #1
 8005396:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005398:	2000      	movs	r0, #0
 800539a:	f7ff fc7b 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 800539e:	2100      	movs	r1, #0
 80053a0:	2000      	movs	r0, #0
 80053a2:	f7ff fcdf 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MENÚ DE VUELO");
 80053a6:	4886      	ldr	r0, [pc, #536]	@ (80055c0 <task_menu_update+0x32c>)
 80053a8:	f7ff fd26 	bl	8004df8 <displayStringWrite>
					}

					break;
 80053ac:	e2eb      	b.n	8005986 <task_menu_update+0x6f2>

				case ST_MEN_XX_MENU:


					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 80053ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b2:	799b      	ldrb	r3, [r3, #6]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <task_menu_update+0x152>
 80053b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053bc:	795b      	ldrb	r3, [r3, #5]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d111      	bne.n	80053e6 <task_menu_update+0x152>
					{
						p_task_menu_dta->flag = false;
 80053c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053c6:	2200      	movs	r2, #0
 80053c8:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MODE;
 80053ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ce:	2202      	movs	r2, #2
 80053d0:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7ff fc5e 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80053d8:	2100      	movs	r1, #0
 80053da:	2000      	movs	r0, #0
 80053dc:	f7ff fcc2 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MODE");
 80053e0:	4878      	ldr	r0, [pc, #480]	@ (80055c4 <task_menu_update+0x330>)
 80053e2:	f7ff fd09 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_IDLE == p_task_menu_dta->event))
 80053e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ea:	799b      	ldrb	r3, [r3, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 82cc 	beq.w	800598a <task_menu_update+0x6f6>
 80053f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053f6:	795b      	ldrb	r3, [r3, #5]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	f040 82c6 	bne.w	800598a <task_menu_update+0x6f6>
					{
						p_task_menu_dta->flag = false;
 80053fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005402:	2200      	movs	r2, #0
 8005404:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_IDLE;
 8005406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800540a:	2200      	movs	r2, #0
 800540c:	711a      	strb	r2, [r3, #4]
						shared_data->pwm1_enabled = false;
 800540e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005412:	2200      	movs	r2, #0
 8005414:	711a      	strb	r2, [r3, #4]
						shared_data->pwm2_enabled = false;
 8005416:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800541a:	2200      	movs	r2, #0
 800541c:	715a      	strb	r2, [r3, #5]
						shared_data->pwm3_enabled = false;
 800541e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005422:	2200      	movs	r2, #0
 8005424:	719a      	strb	r2, [r3, #6]
						shared_data->pwm4_enabled = false;
 8005426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800542a:	2200      	movs	r2, #0
 800542c:	71da      	strb	r2, [r3, #7]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800542e:	2000      	movs	r0, #0
 8005430:	f7ff fc30 	bl	8004c94 <displayInit>
					}

					break;
 8005434:	e2a9      	b.n	800598a <task_menu_update+0x6f6>


				case ST_MEN_XX_MODE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8005436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800543a:	799b      	ldrb	r3, [r3, #6]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d016      	beq.n	800546e <task_menu_update+0x1da>
 8005440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005444:	795b      	ldrb	r3, [r3, #5]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d111      	bne.n	800546e <task_menu_update+0x1da>
					{
						p_task_menu_dta->flag = false;
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800544e:	2200      	movs	r2, #0
 8005450:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_OFF;
 8005452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005456:	2205      	movs	r2, #5
 8005458:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800545a:	2000      	movs	r0, #0
 800545c:	f7ff fc1a 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005460:	2100      	movs	r1, #0
 8005462:	2000      	movs	r0, #0
 8005464:	f7ff fc7e 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("OFF");
 8005468:	4857      	ldr	r0, [pc, #348]	@ (80055c8 <task_menu_update+0x334>)
 800546a:	f7ff fcc5 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 800546e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005472:	799b      	ldrb	r3, [r3, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <task_menu_update+0x212>
 8005478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800547c:	795b      	ldrb	r3, [r3, #5]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d111      	bne.n	80054a6 <task_menu_update+0x212>
					{
						p_task_menu_dta->flag = false;
 8005482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005486:	2200      	movs	r2, #0
 8005488:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_DATA;
 800548a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800548e:	2203      	movs	r2, #3
 8005490:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005492:	2000      	movs	r0, #0
 8005494:	f7ff fbfe 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005498:	2100      	movs	r1, #0
 800549a:	2000      	movs	r0, #0
 800549c:	f7ff fc62 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("DATA");
 80054a0:	484a      	ldr	r0, [pc, #296]	@ (80055cc <task_menu_update+0x338>)
 80054a2:	f7ff fca9 	bl	8004df8 <displayStringWrite>
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 80054a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054aa:	799b      	ldrb	r3, [r3, #6]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 826e 	beq.w	800598e <task_menu_update+0x6fa>
 80054b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054b6:	795b      	ldrb	r3, [r3, #5]
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	f040 8268 	bne.w	800598e <task_menu_update+0x6fa>
					{
						p_task_menu_dta->flag = false;
 80054be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054c2:	2200      	movs	r2, #0
 80054c4:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU;
 80054c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ca:	2201      	movs	r2, #1
 80054cc:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7ff fbe0 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80054d4:	2100      	movs	r1, #0
 80054d6:	2000      	movs	r0, #0
 80054d8:	f7ff fc44 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MENÚ DE VUELO");
 80054dc:	4838      	ldr	r0, [pc, #224]	@ (80055c0 <task_menu_update+0x32c>)
 80054de:	f7ff fc8b 	bl	8004df8 <displayStringWrite>
					}

					break;
 80054e2:	e254      	b.n	800598e <task_menu_update+0x6fa>


				case ST_MEN_XX_OFF:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 80054e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e8:	799b      	ldrb	r3, [r3, #6]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d026      	beq.n	800553c <task_menu_update+0x2a8>
 80054ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054f2:	795b      	ldrb	r3, [r3, #5]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d121      	bne.n	800553c <task_menu_update+0x2a8>
					{
						p_task_menu_dta->flag = false;
 80054f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054fc:	2200      	movs	r2, #0
 80054fe:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_OFF;
 8005500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005504:	2205      	movs	r2, #5
 8005506:	711a      	strb	r2, [r3, #4]
						shared_data->pwm1_enabled = false;
 8005508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800550c:	2200      	movs	r2, #0
 800550e:	711a      	strb	r2, [r3, #4]
						shared_data->pwm2_enabled = false;
 8005510:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005514:	2200      	movs	r2, #0
 8005516:	715a      	strb	r2, [r3, #5]
						shared_data->pwm3_enabled = false;
 8005518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800551c:	2200      	movs	r2, #0
 800551e:	719a      	strb	r2, [r3, #6]
						shared_data->pwm4_enabled = false;
 8005520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005524:	2200      	movs	r2, #0
 8005526:	71da      	strb	r2, [r3, #7]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005528:	2000      	movs	r0, #0
 800552a:	f7ff fbb3 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 800552e:	2100      	movs	r1, #0
 8005530:	2000      	movs	r0, #0
 8005532:	f7ff fc17 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("OFF");
 8005536:	4824      	ldr	r0, [pc, #144]	@ (80055c8 <task_menu_update+0x334>)
 8005538:	f7ff fc5e 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 800553c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005540:	799b      	ldrb	r3, [r3, #6]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <task_menu_update+0x2e0>
 8005546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800554a:	795b      	ldrb	r3, [r3, #5]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d111      	bne.n	8005574 <task_menu_update+0x2e0>
					{
						p_task_menu_dta->flag = false;
 8005550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005554:	2200      	movs	r2, #0
 8005556:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ON;
 8005558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800555c:	2204      	movs	r2, #4
 800555e:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005560:	2000      	movs	r0, #0
 8005562:	f7ff fb97 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005566:	2100      	movs	r1, #0
 8005568:	2000      	movs	r0, #0
 800556a:	f7ff fbfb 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("ON");
 800556e:	4818      	ldr	r0, [pc, #96]	@ (80055d0 <task_menu_update+0x33c>)
 8005570:	f7ff fc42 	bl	8004df8 <displayStringWrite>

					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8005574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005578:	799b      	ldrb	r3, [r3, #6]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8209 	beq.w	8005992 <task_menu_update+0x6fe>
 8005580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005584:	795b      	ldrb	r3, [r3, #5]
 8005586:	2b05      	cmp	r3, #5
 8005588:	f040 8203 	bne.w	8005992 <task_menu_update+0x6fe>
					{
						p_task_menu_dta->flag = false;
 800558c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005590:	2200      	movs	r2, #0
 8005592:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MODE;
 8005594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005598:	2202      	movs	r2, #2
 800559a:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800559c:	2000      	movs	r0, #0
 800559e:	f7ff fb79 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80055a2:	2100      	movs	r1, #0
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7ff fbdd 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MODE");
 80055aa:	4806      	ldr	r0, [pc, #24]	@ (80055c4 <task_menu_update+0x330>)
 80055ac:	f7ff fc24 	bl	8004df8 <displayStringWrite>
					}

					break;
 80055b0:	e1ef      	b.n	8005992 <task_menu_update+0x6fe>
 80055b2:	bf00      	nop
 80055b4:	200003d0 	.word	0x200003d0
 80055b8:	200003d4 	.word	0x200003d4
 80055bc:	200003c8 	.word	0x200003c8
 80055c0:	08009bc0 	.word	0x08009bc0
 80055c4:	08009bd0 	.word	0x08009bd0
 80055c8:	08009bd8 	.word	0x08009bd8
 80055cc:	08009bdc 	.word	0x08009bdc
 80055d0:	08009be4 	.word	0x08009be4


				case ST_MEN_XX_ON:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 80055d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055d8:	799b      	ldrb	r3, [r3, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d026      	beq.n	800562c <task_menu_update+0x398>
 80055de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e2:	795b      	ldrb	r3, [r3, #5]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d121      	bne.n	800562c <task_menu_update+0x398>
					{
						p_task_menu_dta->flag = false;
 80055e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055ec:	2200      	movs	r2, #0
 80055ee:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ON;
 80055f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055f4:	2204      	movs	r2, #4
 80055f6:	711a      	strb	r2, [r3, #4]
						shared_data->pwm1_enabled = true;
 80055f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055fc:	2201      	movs	r2, #1
 80055fe:	711a      	strb	r2, [r3, #4]
						shared_data->pwm2_enabled = true;
 8005600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005604:	2201      	movs	r2, #1
 8005606:	715a      	strb	r2, [r3, #5]
						shared_data->pwm3_enabled = true;
 8005608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800560c:	2201      	movs	r2, #1
 800560e:	719a      	strb	r2, [r3, #6]
						shared_data->pwm4_enabled = true;
 8005610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005614:	2201      	movs	r2, #1
 8005616:	71da      	strb	r2, [r3, #7]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005618:	2000      	movs	r0, #0
 800561a:	f7ff fb3b 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 800561e:	2100      	movs	r1, #0
 8005620:	2000      	movs	r0, #0
 8005622:	f7ff fb9f 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("ON");
 8005626:	48c6      	ldr	r0, [pc, #792]	@ (8005940 <task_menu_update+0x6ac>)
 8005628:	f7ff fbe6 	bl	8004df8 <displayStringWrite>

					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 800562c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005630:	799b      	ldrb	r3, [r3, #6]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d016      	beq.n	8005664 <task_menu_update+0x3d0>
 8005636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800563a:	795b      	ldrb	r3, [r3, #5]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d111      	bne.n	8005664 <task_menu_update+0x3d0>
					{
						p_task_menu_dta->flag = false;
 8005640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005644:	2200      	movs	r2, #0
 8005646:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_OFF;
 8005648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800564c:	2205      	movs	r2, #5
 800564e:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005650:	2000      	movs	r0, #0
 8005652:	f7ff fb1f 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005656:	2100      	movs	r1, #0
 8005658:	2000      	movs	r0, #0
 800565a:	f7ff fb83 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("OFF");
 800565e:	48b9      	ldr	r0, [pc, #740]	@ (8005944 <task_menu_update+0x6b0>)
 8005660:	f7ff fbca 	bl	8004df8 <displayStringWrite>
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8005664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8193 	beq.w	8005996 <task_menu_update+0x702>
 8005670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005674:	795b      	ldrb	r3, [r3, #5]
 8005676:	2b05      	cmp	r3, #5
 8005678:	f040 818d 	bne.w	8005996 <task_menu_update+0x702>
					{
						p_task_menu_dta->flag = false;
 800567c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005680:	2200      	movs	r2, #0
 8005682:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MODE;
 8005684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005688:	2202      	movs	r2, #2
 800568a:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800568c:	2000      	movs	r0, #0
 800568e:	f7ff fb01 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005692:	2100      	movs	r1, #0
 8005694:	2000      	movs	r0, #0
 8005696:	f7ff fb65 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MODE");
 800569a:	48ab      	ldr	r0, [pc, #684]	@ (8005948 <task_menu_update+0x6b4>)
 800569c:	f7ff fbac 	bl	8004df8 <displayStringWrite>
					}


					break;
 80056a0:	e179      	b.n	8005996 <task_menu_update+0x702>


				case ST_MEN_XX_DATA:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a6:	799b      	ldrb	r3, [r3, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d016      	beq.n	80056da <task_menu_update+0x446>
 80056ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b0:	795b      	ldrb	r3, [r3, #5]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d111      	bne.n	80056da <task_menu_update+0x446>
					{
						p_task_menu_dta->flag = false;
 80056b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ba:	2200      	movs	r2, #0
 80056bc:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ORIENTATION;
 80056be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056c2:	2206      	movs	r2, #6
 80056c4:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7ff fae4 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80056cc:	2100      	movs	r1, #0
 80056ce:	2000      	movs	r0, #0
 80056d0:	f7ff fb48 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("ORIENTATION");
 80056d4:	489d      	ldr	r0, [pc, #628]	@ (800594c <task_menu_update+0x6b8>)
 80056d6:	f7ff fb8f 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 80056da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056de:	799b      	ldrb	r3, [r3, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d016      	beq.n	8005712 <task_menu_update+0x47e>
 80056e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056e8:	795b      	ldrb	r3, [r3, #5]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d111      	bne.n	8005712 <task_menu_update+0x47e>
					{
						p_task_menu_dta->flag = false;
 80056ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056f2:	2200      	movs	r2, #0
 80056f4:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MODE;
 80056f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056fa:	2202      	movs	r2, #2
 80056fc:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80056fe:	2000      	movs	r0, #0
 8005700:	f7ff fac8 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005704:	2100      	movs	r1, #0
 8005706:	2000      	movs	r0, #0
 8005708:	f7ff fb2c 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MODE");
 800570c:	488e      	ldr	r0, [pc, #568]	@ (8005948 <task_menu_update+0x6b4>)
 800570e:	f7ff fb73 	bl	8004df8 <displayStringWrite>
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8005712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005716:	799b      	ldrb	r3, [r3, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 813e 	beq.w	800599a <task_menu_update+0x706>
 800571e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005722:	795b      	ldrb	r3, [r3, #5]
 8005724:	2b05      	cmp	r3, #5
 8005726:	f040 8138 	bne.w	800599a <task_menu_update+0x706>
					{
						p_task_menu_dta->flag = false;
 800572a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800572e:	2200      	movs	r2, #0
 8005730:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU;
 8005732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005736:	2201      	movs	r2, #1
 8005738:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800573a:	2000      	movs	r0, #0
 800573c:	f7ff faaa 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005740:	2100      	movs	r1, #0
 8005742:	2000      	movs	r0, #0
 8005744:	f7ff fb0e 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("MENÚ DE VUELO");
 8005748:	4881      	ldr	r0, [pc, #516]	@ (8005950 <task_menu_update+0x6bc>)
 800574a:	f7ff fb55 	bl	8004df8 <displayStringWrite>
					}

					break;
 800574e:	e124      	b.n	800599a <task_menu_update+0x706>

				case ST_MEN_XX_ORIENTATION:
					MPU6050_Data_t data=MPU6050_GetData();
 8005750:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff f93b 	bl	80049d0 <MPU6050_GetData>
					char buffer[17];
					snprintf(buffer, sizeof(buffer), "P:%5.1f R:%5.1f", data.pitch, data.roll);
 800575a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800575c:	4618      	mov	r0, r3
 800575e:	f7fa fe63 	bl	8000428 <__aeabi_f2d>
 8005762:	4604      	mov	r4, r0
 8005764:	460d      	mov	r5, r1
 8005766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa fe5d 	bl	8000428 <__aeabi_f2d>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8005776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800577a:	e9cd 4500 	strd	r4, r5, [sp]
 800577e:	4a75      	ldr	r2, [pc, #468]	@ (8005954 <task_menu_update+0x6c0>)
 8005780:	2111      	movs	r1, #17
 8005782:	f001 fdd7 	bl	8007334 <sniprintf>
					displayCharPositionWrite(0, 1);
 8005786:	2101      	movs	r1, #1
 8005788:	2000      	movs	r0, #0
 800578a:	f7ff faeb 	bl	8004d64 <displayCharPositionWrite>
					displayStringWrite(buffer);
 800578e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fb30 	bl	8004df8 <displayStringWrite>

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8005798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800579c:	799b      	ldrb	r3, [r3, #6]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <task_menu_update+0x53c>
 80057a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057a6:	795b      	ldrb	r3, [r3, #5]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d111      	bne.n	80057d0 <task_menu_update+0x53c>
					{
						p_task_menu_dta->flag = false;
 80057ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b0:	2200      	movs	r2, #0
 80057b2:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ORIENTATION;
 80057b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b8:	2206      	movs	r2, #6
 80057ba:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80057bc:	2000      	movs	r0, #0
 80057be:	f7ff fa69 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80057c2:	2100      	movs	r1, #0
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7ff facd 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("ORIENTATION");
 80057ca:	4860      	ldr	r0, [pc, #384]	@ (800594c <task_menu_update+0x6b8>)
 80057cc:	f7ff fb14 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 80057d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057d4:	799b      	ldrb	r3, [r3, #6]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <task_menu_update+0x574>
 80057da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057de:	795b      	ldrb	r3, [r3, #5]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d111      	bne.n	8005808 <task_menu_update+0x574>
					{
						p_task_menu_dta->flag = false;
 80057e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057e8:	2200      	movs	r2, #0
 80057ea:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_TEMP;
 80057ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057f0:	2207      	movs	r2, #7
 80057f2:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80057f4:	2000      	movs	r0, #0
 80057f6:	f7ff fa4d 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80057fa:	2100      	movs	r1, #0
 80057fc:	2000      	movs	r0, #0
 80057fe:	f7ff fab1 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("TEMPERATURE");
 8005802:	4855      	ldr	r0, [pc, #340]	@ (8005958 <task_menu_update+0x6c4>)
 8005804:	f7ff faf8 	bl	8004df8 <displayStringWrite>
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8005808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800580c:	799b      	ldrb	r3, [r3, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80c5 	beq.w	800599e <task_menu_update+0x70a>
 8005814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005818:	795b      	ldrb	r3, [r3, #5]
 800581a:	2b05      	cmp	r3, #5
 800581c:	f040 80bf 	bne.w	800599e <task_menu_update+0x70a>
					{
						p_task_menu_dta->flag = false;
 8005820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005824:	2200      	movs	r2, #0
 8005826:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_DATA;
 8005828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800582c:	2203      	movs	r2, #3
 800582e:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8005830:	2000      	movs	r0, #0
 8005832:	f7ff fa2f 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005836:	2100      	movs	r1, #0
 8005838:	2000      	movs	r0, #0
 800583a:	f7ff fa93 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("DATA");
 800583e:	4847      	ldr	r0, [pc, #284]	@ (800595c <task_menu_update+0x6c8>)
 8005840:	f7ff fada 	bl	8004df8 <displayStringWrite>
					}

					break;
 8005844:	e0ab      	b.n	800599e <task_menu_update+0x70a>


				case ST_MEN_XX_TEMP:
					data=MPU6050_GetData();
 8005846:	463b      	mov	r3, r7
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f8c1 	bl	80049d0 <MPU6050_GetData>
 800584e:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8005852:	463d      	mov	r5, r7
 8005854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800585c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005864:	e884 0003 	stmia.w	r4, {r0, r1}
					char buffer2[17];
					snprintf(buffer2, sizeof(buffer2), "%5.1f", data.temperature);
 8005868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800586a:	4618      	mov	r0, r3
 800586c:	f7fa fddc 	bl	8000428 <__aeabi_f2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8005878:	e9cd 2300 	strd	r2, r3, [sp]
 800587c:	4a38      	ldr	r2, [pc, #224]	@ (8005960 <task_menu_update+0x6cc>)
 800587e:	2111      	movs	r1, #17
 8005880:	f001 fd58 	bl	8007334 <sniprintf>
					displayCharPositionWrite(0, 1);
 8005884:	2101      	movs	r1, #1
 8005886:	2000      	movs	r0, #0
 8005888:	f7ff fa6c 	bl	8004d64 <displayCharPositionWrite>
					displayStringWrite(buffer2);
 800588c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fab1 	bl	8004df8 <displayStringWrite>

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8005896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800589a:	799b      	ldrb	r3, [r3, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d016      	beq.n	80058ce <task_menu_update+0x63a>
 80058a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058a4:	795b      	ldrb	r3, [r3, #5]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d111      	bne.n	80058ce <task_menu_update+0x63a>
					{
						p_task_menu_dta->flag = false;
 80058aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ae:	2200      	movs	r2, #0
 80058b0:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_TEMP;
 80058b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058b6:	2207      	movs	r2, #7
 80058b8:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7ff f9ea 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80058c0:	2100      	movs	r1, #0
 80058c2:	2000      	movs	r0, #0
 80058c4:	f7ff fa4e 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("TEMPERATURE");
 80058c8:	4823      	ldr	r0, [pc, #140]	@ (8005958 <task_menu_update+0x6c4>)
 80058ca:	f7ff fa95 	bl	8004df8 <displayStringWrite>
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event))
 80058ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058d2:	799b      	ldrb	r3, [r3, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d016      	beq.n	8005906 <task_menu_update+0x672>
 80058d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058dc:	795b      	ldrb	r3, [r3, #5]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d111      	bne.n	8005906 <task_menu_update+0x672>
					{
						p_task_menu_dta->flag = false;
 80058e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058e6:	2200      	movs	r2, #0
 80058e8:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ORIENTATION;
 80058ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ee:	2206      	movs	r2, #6
 80058f0:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80058f2:	2000      	movs	r0, #0
 80058f4:	f7ff f9ce 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 80058f8:	2100      	movs	r1, #0
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7ff fa32 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("ORIENTATION");
 8005900:	4812      	ldr	r0, [pc, #72]	@ (800594c <task_menu_update+0x6b8>)
 8005902:	f7ff fa79 	bl	8004df8 <displayStringWrite>
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8005906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800590a:	799b      	ldrb	r3, [r3, #6]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d048      	beq.n	80059a2 <task_menu_update+0x70e>
 8005910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005914:	795b      	ldrb	r3, [r3, #5]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d143      	bne.n	80059a2 <task_menu_update+0x70e>
					{
						p_task_menu_dta->flag = false;
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800591e:	2200      	movs	r2, #0
 8005920:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_DATA;
 8005922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005926:	2203      	movs	r2, #3
 8005928:	711a      	strb	r2, [r3, #4]
						displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800592a:	2000      	movs	r0, #0
 800592c:	f7ff f9b2 	bl	8004c94 <displayInit>

						displayCharPositionWrite(0, 0);
 8005930:	2100      	movs	r1, #0
 8005932:	2000      	movs	r0, #0
 8005934:	f7ff fa16 	bl	8004d64 <displayCharPositionWrite>
						displayStringWrite("DATA");
 8005938:	4808      	ldr	r0, [pc, #32]	@ (800595c <task_menu_update+0x6c8>)
 800593a:	f7ff fa5d 	bl	8004df8 <displayStringWrite>
					}

					break;
 800593e:	e030      	b.n	80059a2 <task_menu_update+0x70e>
 8005940:	08009be4 	.word	0x08009be4
 8005944:	08009bd8 	.word	0x08009bd8
 8005948:	08009bd0 	.word	0x08009bd0
 800594c:	08009be8 	.word	0x08009be8
 8005950:	08009bc0 	.word	0x08009bc0
 8005954:	08009bf4 	.word	0x08009bf4
 8005958:	08009c04 	.word	0x08009c04
 800595c:	08009bdc 	.word	0x08009bdc
 8005960:	08009c10 	.word	0x08009c10

				default:

					p_task_menu_dta->tick  = DEL_MEN_XX_MIN;
 8005964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
					p_task_menu_dta->state = ST_MEN_XX_IDLE;
 800596c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005970:	2200      	movs	r2, #0
 8005972:	711a      	strb	r2, [r3, #4]
					p_task_menu_dta->event = EV_MEN_ENT_IDLE;
 8005974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005978:	2200      	movs	r2, #0
 800597a:	715a      	strb	r2, [r3, #5]
					p_task_menu_dta->flag  = false;
 800597c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005980:	2200      	movs	r2, #0
 8005982:	719a      	strb	r2, [r3, #6]

					break;
 8005984:	e00e      	b.n	80059a4 <task_menu_update+0x710>
					break;
 8005986:	bf00      	nop
 8005988:	e00c      	b.n	80059a4 <task_menu_update+0x710>
					break;
 800598a:	bf00      	nop
 800598c:	e00a      	b.n	80059a4 <task_menu_update+0x710>
					break;
 800598e:	bf00      	nop
 8005990:	e008      	b.n	80059a4 <task_menu_update+0x710>
					break;
 8005992:	bf00      	nop
 8005994:	e006      	b.n	80059a4 <task_menu_update+0x710>
					break;
 8005996:	bf00      	nop
 8005998:	e004      	b.n	80059a4 <task_menu_update+0x710>
					break;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <task_menu_update+0x710>
					break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <task_menu_update+0x710>
					break;
 80059a2:	bf00      	nop
    while (b_time_update_required)
 80059a4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f ac91 	bne.w	80052d0 <task_menu_update+0x3c>
			}
		}
	}
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	37b8      	adds	r7, #184	@ 0xb8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdb0      	pop	{r4, r5, r7, pc}

080059b8 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80059be:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <init_queue_event_task_menu+0x44>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80059c4:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <init_queue_event_task_menu+0x44>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <init_queue_event_task_menu+0x44>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e008      	b.n	80059e8 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80059d6:	4a09      	ldr	r2, [pc, #36]	@ (80059fc <init_queue_event_task_menu+0x44>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	330c      	adds	r3, #12
 80059de:	22ff      	movs	r2, #255	@ 0xff
 80059e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3301      	adds	r3, #1
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d9f3      	bls.n	80059d6 <init_queue_event_task_menu+0x1e>
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	200003d8 	.word	0x200003d8

08005a00 <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4a0b      	ldr	r2, [pc, #44]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a12:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	4909      	ldr	r1, [pc, #36]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a1c:	600a      	str	r2, [r1, #0]
 8005a1e:	4a08      	ldr	r2, [pc, #32]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a20:	4413      	add	r3, r2
 8005a22:	79fa      	ldrb	r2, [r7, #7]
 8005a24:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d102      	bne.n	8005a34 <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 8005a2e:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <put_event_task_menu+0x40>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	200003d8 	.word	0x200003d8

08005a44 <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 8005a4a:	4b10      	ldr	r3, [pc, #64]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a0e      	ldr	r2, [pc, #56]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a52:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8005a54:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a0c      	ldr	r2, [pc, #48]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	7b1b      	ldrb	r3, [r3, #12]
 8005a5e:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	4909      	ldr	r1, [pc, #36]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a68:	604a      	str	r2, [r1, #4]
 8005a6a:	4a08      	ldr	r2, [pc, #32]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	22ff      	movs	r2, #255	@ 0xff
 8005a70:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d102      	bne.n	8005a80 <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 8005a7a:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <get_event_task_menu+0x48>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	605a      	str	r2, [r3, #4]

	return event;
 8005a80:	79fb      	ldrb	r3, [r7, #7]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	200003d8 	.word	0x200003d8

08005a90 <any_event_task_menu>:

bool any_event_task_menu(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8005a94:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <any_event_task_menu+0x20>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <any_event_task_menu+0x20>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	200003d8 	.word	0x200003d8

08005ab4 <task_pwm_init>:
extern TIM_HandleTypeDef htim2;


/********************** external functions definition ************************/
void task_pwm_init(void *parameters)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
	shared_data_type *shared_data = (shared_data_type *) parameters;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

	shared_data->pwm1_active = 0;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	815a      	strh	r2, [r3, #10]
	shared_data->pwm2_active = 0;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	819a      	strh	r2, [r3, #12]
	shared_data->pwm3_active = 0;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	81da      	strh	r2, [r3, #14]
	shared_data->pwm4_active = 0;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	821a      	strh	r2, [r3, #16]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_pwm_init), p_task_pwm);
 8005ad8:	b672      	cpsid	i
 8005ada:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <task_pwm_init+0x54>)
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <task_pwm_init+0x58>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <task_pwm_init+0x5c>)
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8005b14 <task_pwm_init+0x60>)
 8005ae8:	213f      	movs	r1, #63	@ 0x3f
 8005aea:	f001 fc23 	bl	8007334 <sniprintf>
 8005aee:	4603      	mov	r3, r0
 8005af0:	4a09      	ldr	r2, [pc, #36]	@ (8005b18 <task_pwm_init+0x64>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <task_pwm_init+0x54>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fae3 	bl	80050c4 <logger_log_print_>
 8005afe:	b662      	cpsie	i
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08009d70 	.word	0x08009d70
 8005b0c:	20000020 	.word	0x20000020
 8005b10:	08009c24 	.word	0x08009c24
 8005b14:	08009c34 	.word	0x08009c34
 8005b18:	200003c4 	.word	0x200003c4

08005b1c <task_pwm_update>:

void task_pwm_update(void *parameters)
{
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	b0a5      	sub	sp, #148	@ 0x94
 8005b20:	af12      	add	r7, sp, #72	@ 0x48
 8005b22:	6078      	str	r0, [r7, #4]

	static uint16_t period=PERIOD;
	static int16_t step = STEP;

	shared_data_type *shared_data = (shared_data_type *) parameters;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	647b      	str	r3, [r7, #68]	@ 0x44

	if( shared_data->pwm1_enabled ){
 8005b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2a:	791b      	ldrb	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d037      	beq.n	8005ba0 <task_pwm_update+0x84>
		MPU6050_Data_t data=MPU6050_GetData();
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe ff4b 	bl	80049d0 <MPU6050_GetData>
		shared_data->pwm1_active = period*(data.pitch)/99;
 8005b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8005da8 <task_pwm_update+0x28c>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fb f8ac 	bl	8000c9c <__aeabi_i2f>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fb f8fa 	bl	8000d44 <__aeabi_fmul>
 8005b50:	4603      	mov	r3, r0
 8005b52:	4996      	ldr	r1, [pc, #600]	@ (8005dac <task_pwm_update+0x290>)
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb f9a9 	bl	8000eac <__aeabi_fdiv>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fb facd 	bl	80010fc <__aeabi_f2uiz>
 8005b62:	4603      	mov	r3, r0
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b68:	815a      	strh	r2, [r3, #10]
		setPWM(htim2, TIM_CHANNEL_1, period, shared_data->pwm1_active);
 8005b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8005da8 <task_pwm_update+0x28c>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b70:	8952      	ldrh	r2, [r2, #10]
 8005b72:	4e8f      	ldr	r6, [pc, #572]	@ (8005db0 <task_pwm_update+0x294>)
 8005b74:	9210      	str	r2, [sp, #64]	@ 0x40
 8005b76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b78:	2300      	movs	r3, #0
 8005b7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b7c:	466d      	mov	r5, sp
 8005b7e:	f106 0410 	add.w	r4, r6, #16
 8005b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005b9a:	f000 f92d 	bl	8005df8 <setPWM>
 8005b9e:	e018      	b.n	8005bd2 <task_pwm_update+0xb6>
	}
	else{
		setPWM(htim2, TIM_CHANNEL_1, period, 0);
 8005ba0:	4b81      	ldr	r3, [pc, #516]	@ (8005da8 <task_pwm_update+0x28c>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	4e82      	ldr	r6, [pc, #520]	@ (8005db0 <task_pwm_update+0x294>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	9210      	str	r2, [sp, #64]	@ 0x40
 8005baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005bac:	2300      	movs	r3, #0
 8005bae:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bb0:	466d      	mov	r5, sp
 8005bb2:	f106 0410 	add.w	r4, r6, #16
 8005bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005bce:	f000 f913 	bl	8005df8 <setPWM>
	}

	if( shared_data->pwm2_enabled ){
 8005bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd4:	795b      	ldrb	r3, [r3, #5]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d037      	beq.n	8005c4a <task_pwm_update+0x12e>
		MPU6050_Data_t data=MPU6050_GetData();
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fef6 	bl	80049d0 <MPU6050_GetData>
		shared_data->pwm2_active = period*(data.roll)/99;
 8005be4:	4b70      	ldr	r3, [pc, #448]	@ (8005da8 <task_pwm_update+0x28c>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fb f857 	bl	8000c9c <__aeabi_i2f>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fb f8a5 	bl	8000d44 <__aeabi_fmul>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	496b      	ldr	r1, [pc, #428]	@ (8005dac <task_pwm_update+0x290>)
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb f954 	bl	8000eac <__aeabi_fdiv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb fa78 	bl	80010fc <__aeabi_f2uiz>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c12:	819a      	strh	r2, [r3, #12]
		setPWM(htim2, TIM_CHANNEL_2, period, shared_data->pwm2_active);
 8005c14:	4b64      	ldr	r3, [pc, #400]	@ (8005da8 <task_pwm_update+0x28c>)
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c1a:	8992      	ldrh	r2, [r2, #12]
 8005c1c:	4e64      	ldr	r6, [pc, #400]	@ (8005db0 <task_pwm_update+0x294>)
 8005c1e:	9210      	str	r2, [sp, #64]	@ 0x40
 8005c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c22:	2304      	movs	r3, #4
 8005c24:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c26:	466d      	mov	r5, sp
 8005c28:	f106 0410 	add.w	r4, r6, #16
 8005c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c44:	f000 f8d8 	bl	8005df8 <setPWM>
 8005c48:	e018      	b.n	8005c7c <task_pwm_update+0x160>
	}
	else{
		setPWM(htim2, TIM_CHANNEL_2, period, 0);
 8005c4a:	4b57      	ldr	r3, [pc, #348]	@ (8005da8 <task_pwm_update+0x28c>)
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	4e58      	ldr	r6, [pc, #352]	@ (8005db0 <task_pwm_update+0x294>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	9210      	str	r2, [sp, #64]	@ 0x40
 8005c54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c56:	2304      	movs	r3, #4
 8005c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c5a:	466d      	mov	r5, sp
 8005c5c:	f106 0410 	add.w	r4, r6, #16
 8005c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c70:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c78:	f000 f8be 	bl	8005df8 <setPWM>
	}

	if( shared_data->pwm3_enabled ){
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7e:	799b      	ldrb	r3, [r3, #6]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d039      	beq.n	8005cf8 <task_pwm_update+0x1dc>
		MPU6050_Data_t data=MPU6050_GetData();
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fea1 	bl	80049d0 <MPU6050_GetData>
		shared_data->pwm3_active = period*(-data.pitch)/99;
 8005c8e:	4b46      	ldr	r3, [pc, #280]	@ (8005da8 <task_pwm_update+0x28c>)
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fb f802 	bl	8000c9c <__aeabi_i2f>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7fb f84e 	bl	8000d44 <__aeabi_fmul>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	4940      	ldr	r1, [pc, #256]	@ (8005dac <task_pwm_update+0x290>)
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fb f8fd 	bl	8000eac <__aeabi_fdiv>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb fa21 	bl	80010fc <__aeabi_f2uiz>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc0:	81da      	strh	r2, [r3, #14]
		setPWM(htim2, TIM_CHANNEL_3, period, shared_data->pwm3_active);
 8005cc2:	4b39      	ldr	r3, [pc, #228]	@ (8005da8 <task_pwm_update+0x28c>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc8:	89d2      	ldrh	r2, [r2, #14]
 8005cca:	4e39      	ldr	r6, [pc, #228]	@ (8005db0 <task_pwm_update+0x294>)
 8005ccc:	9210      	str	r2, [sp, #64]	@ 0x40
 8005cce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cd4:	466d      	mov	r5, sp
 8005cd6:	f106 0410 	add.w	r4, r6, #16
 8005cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cea:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005cf2:	f000 f881 	bl	8005df8 <setPWM>
 8005cf6:	e018      	b.n	8005d2a <task_pwm_update+0x20e>
	}
	else{
		setPWM(htim2, TIM_CHANNEL_3, period, 0);
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8005da8 <task_pwm_update+0x28c>)
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	4e2c      	ldr	r6, [pc, #176]	@ (8005db0 <task_pwm_update+0x294>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	9210      	str	r2, [sp, #64]	@ 0x40
 8005d02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d04:	2308      	movs	r3, #8
 8005d06:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d08:	466d      	mov	r5, sp
 8005d0a:	f106 0410 	add.w	r4, r6, #16
 8005d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005d26:	f000 f867 	bl	8005df8 <setPWM>
	}

	if( shared_data->pwm4_enabled ){
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2c:	79db      	ldrb	r3, [r3, #7]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d040      	beq.n	8005db4 <task_pwm_update+0x298>
		MPU6050_Data_t data=MPU6050_GetData();
 8005d32:	f107 030c 	add.w	r3, r7, #12
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fe4a 	bl	80049d0 <MPU6050_GetData>
		shared_data->pwm4_active = period*(-data.roll)/99;
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005da8 <task_pwm_update+0x28c>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fa ffab 	bl	8000c9c <__aeabi_i2f>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f7fa fff7 	bl	8000d44 <__aeabi_fmul>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4914      	ldr	r1, [pc, #80]	@ (8005dac <task_pwm_update+0x290>)
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fb f8a6 	bl	8000eac <__aeabi_fdiv>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fb f9ca 	bl	80010fc <__aeabi_f2uiz>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d6e:	821a      	strh	r2, [r3, #16]
		setPWM(htim2, TIM_CHANNEL_4, period, shared_data->pwm4_active);
 8005d70:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <task_pwm_update+0x28c>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d76:	8a12      	ldrh	r2, [r2, #16]
 8005d78:	4e0d      	ldr	r6, [pc, #52]	@ (8005db0 <task_pwm_update+0x294>)
 8005d7a:	9210      	str	r2, [sp, #64]	@ 0x40
 8005d7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d7e:	230c      	movs	r3, #12
 8005d80:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d82:	466d      	mov	r5, sp
 8005d84:	f106 0410 	add.w	r4, r6, #16
 8005d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005da0:	f000 f82a 	bl	8005df8 <setPWM>
			}
		}
		shared_data->pwm_active = shared_data->pwm_active + step;
	}
	*/
}
 8005da4:	e01f      	b.n	8005de6 <task_pwm_update+0x2ca>
 8005da6:	bf00      	nop
 8005da8:	20000024 	.word	0x20000024
 8005dac:	42c60000 	.word	0x42c60000
 8005db0:	20000278 	.word	0x20000278
		setPWM(htim2, TIM_CHANNEL_4, period, 0);
 8005db4:	4b0e      	ldr	r3, [pc, #56]	@ (8005df0 <task_pwm_update+0x2d4>)
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	4e0e      	ldr	r6, [pc, #56]	@ (8005df4 <task_pwm_update+0x2d8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	9210      	str	r2, [sp, #64]	@ 0x40
 8005dbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dc0:	230c      	movs	r3, #12
 8005dc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dc4:	466d      	mov	r5, sp
 8005dc6:	f106 0410 	add.w	r4, r6, #16
 8005dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005de2:	f000 f809 	bl	8005df8 <setPWM>
}
 8005de6:	bf00      	nop
 8005de8:	374c      	adds	r7, #76	@ 0x4c
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000024 	.word	0x20000024
 8005df4:	20000278 	.word	0x20000278

08005df8 <setPWM>:


void setPWM(TIM_HandleTypeDef timer, uint32_t channel,
            uint16_t period, uint16_t pulse) {
 8005df8:	b084      	sub	sp, #16
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b088      	sub	sp, #32
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8005e04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_TIM_PWM_Stop(&timer, channel);
 8005e08:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005e0a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e0e:	f7fd fe77 	bl	8003b00 <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  timer.Init.Period = period;
 8005e12:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIM_PWM_Init(&timer);
 8005e18:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e1c:	f7fd fd7e 	bl	800391c <HAL_TIM_PWM_Init>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e20:	2360      	movs	r3, #96	@ 0x60
 8005e22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = pulse;
 8005e24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8005e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e36:	4619      	mov	r1, r3
 8005e38:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e3c:	f7fd fec4 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&timer,channel);
 8005e40:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005e42:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e46:	f7fd fdb9 	bl	80039bc <HAL_TIM_PWM_Start>
}
 8005e4a:	bf00      	nop
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e54:	b004      	add	sp, #16
 8005e56:	4770      	bx	lr

08005e58 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8005e60:	b672      	cpsid	i
 8005e62:	4b49      	ldr	r3, [pc, #292]	@ (8005f88 <task_sensor_init+0x130>)
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	4b49      	ldr	r3, [pc, #292]	@ (8005f8c <task_sensor_init+0x134>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4b48      	ldr	r3, [pc, #288]	@ (8005f90 <task_sensor_init+0x138>)
 8005e6e:	4a49      	ldr	r2, [pc, #292]	@ (8005f94 <task_sensor_init+0x13c>)
 8005e70:	213f      	movs	r1, #63	@ 0x3f
 8005e72:	f001 fa5f 	bl	8007334 <sniprintf>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <task_sensor_init+0x140>)
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <task_sensor_init+0x130>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff f91f 	bl	80050c4 <logger_log_print_>
 8005e86:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8005e88:	b672      	cpsid	i
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f88 <task_sensor_init+0x130>)
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	4b43      	ldr	r3, [pc, #268]	@ (8005f9c <task_sensor_init+0x144>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4b42      	ldr	r3, [pc, #264]	@ (8005fa0 <task_sensor_init+0x148>)
 8005e96:	4a43      	ldr	r2, [pc, #268]	@ (8005fa4 <task_sensor_init+0x14c>)
 8005e98:	213f      	movs	r1, #63	@ 0x3f
 8005e9a:	f001 fa4b 	bl	8007334 <sniprintf>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8005f98 <task_sensor_init+0x140>)
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4b38      	ldr	r3, [pc, #224]	@ (8005f88 <task_sensor_init+0x130>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff f90b 	bl	80050c4 <logger_log_print_>
 8005eae:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8005eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa8 <task_sensor_init+0x150>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8005eb6:	b672      	cpsid	i
 8005eb8:	4b33      	ldr	r3, [pc, #204]	@ (8005f88 <task_sensor_init+0x130>)
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8005fa8 <task_sensor_init+0x150>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fac <task_sensor_init+0x154>)
 8005ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fb0 <task_sensor_init+0x158>)
 8005ec6:	213f      	movs	r1, #63	@ 0x3f
 8005ec8:	f001 fa34 	bl	8007334 <sniprintf>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4a32      	ldr	r2, [pc, #200]	@ (8005f98 <task_sensor_init+0x140>)
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <task_sensor_init+0x130>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f8f4 	bl	80050c4 <logger_log_print_>
 8005edc:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e046      	b.n	8005f72 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4a32      	ldr	r2, [pc, #200]	@ (8005fb4 <task_sensor_init+0x15c>)
 8005eea:	4413      	add	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8005eee:	b672      	cpsid	i
 8005ef0:	4b25      	ldr	r3, [pc, #148]	@ (8005f88 <task_sensor_init+0x130>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb8 <task_sensor_init+0x160>)
 8005efa:	4a30      	ldr	r2, [pc, #192]	@ (8005fbc <task_sensor_init+0x164>)
 8005efc:	213f      	movs	r1, #63	@ 0x3f
 8005efe:	f001 fa19 	bl	8007334 <sniprintf>
 8005f02:	4603      	mov	r3, r0
 8005f04:	4a24      	ldr	r2, [pc, #144]	@ (8005f98 <task_sensor_init+0x140>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4b1f      	ldr	r3, [pc, #124]	@ (8005f88 <task_sensor_init+0x130>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f8d9 	bl	80050c4 <logger_log_print_>
 8005f12:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8005f1a:	b672      	cpsid	i
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f88 <task_sensor_init+0x130>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4b26      	ldr	r3, [pc, #152]	@ (8005fc0 <task_sensor_init+0x168>)
 8005f26:	4a25      	ldr	r2, [pc, #148]	@ (8005fbc <task_sensor_init+0x164>)
 8005f28:	213f      	movs	r1, #63	@ 0x3f
 8005f2a:	f001 fa03 	bl	8007334 <sniprintf>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <task_sensor_init+0x140>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b14      	ldr	r3, [pc, #80]	@ (8005f88 <task_sensor_init+0x130>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff f8c3 	bl	80050c4 <logger_log_print_>
 8005f3e:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	795b      	ldrb	r3, [r3, #5]
 8005f44:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8005f46:	b672      	cpsid	i
 8005f48:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <task_sensor_init+0x130>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc4 <task_sensor_init+0x16c>)
 8005f52:	4a17      	ldr	r2, [pc, #92]	@ (8005fb0 <task_sensor_init+0x158>)
 8005f54:	213f      	movs	r1, #63	@ 0x3f
 8005f56:	f001 f9ed 	bl	8007334 <sniprintf>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f98 <task_sensor_init+0x140>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <task_sensor_init+0x130>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff f8ad 	bl	80050c4 <logger_log_print_>
 8005f6a:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d9b5      	bls.n	8005ee4 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8005f78:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <task_sensor_init+0x170>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	08009d70 	.word	0x08009d70
 8005f8c:	20000028 	.word	0x20000028
 8005f90:	08009c90 	.word	0x08009c90
 8005f94:	08009ca4 	.word	0x08009ca4
 8005f98:	200003c4 	.word	0x200003c4
 8005f9c:	2000002c 	.word	0x2000002c
 8005fa0:	08009cbc 	.word	0x08009cbc
 8005fa4:	08009cc8 	.word	0x08009cc8
 8005fa8:	2000040c 	.word	0x2000040c
 8005fac:	08009cd8 	.word	0x08009cd8
 8005fb0:	08009cec 	.word	0x08009cec
 8005fb4:	200003f4 	.word	0x200003f4
 8005fb8:	08009cfc 	.word	0x08009cfc
 8005fbc:	08009d04 	.word	0x08009d04
 8005fc0:	08009d10 	.word	0x08009d10
 8005fc4:	08009d18 	.word	0x08009d18
 8005fc8:	20000410 	.word	0x20000410

08005fcc <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8005fd8:	4b61      	ldr	r3, [pc, #388]	@ (8006160 <task_sensor_update+0x194>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	4a60      	ldr	r2, [pc, #384]	@ (8006160 <task_sensor_update+0x194>)
 8005fe0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8005fe2:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8005fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8006164 <task_sensor_update+0x198>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8005fec:	4b5d      	ldr	r3, [pc, #372]	@ (8006164 <task_sensor_update+0x198>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8006164 <task_sensor_update+0x198>)
 8005ff4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8005ffa:	b662      	cpsie	i

    while (b_time_update_required)
 8005ffc:	e0a6      	b.n	800614c <task_sensor_update+0x180>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8005ffe:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8006000:	4b58      	ldr	r3, [pc, #352]	@ (8006164 <task_sensor_update+0x198>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8006008:	4b56      	ldr	r3, [pc, #344]	@ (8006164 <task_sensor_update+0x198>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	4a55      	ldr	r2, [pc, #340]	@ (8006164 <task_sensor_update+0x198>)
 8006010:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8006012:	2301      	movs	r3, #1
 8006014:	74fb      	strb	r3, [r7, #19]
 8006016:	e001      	b.n	800601c <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8006018:	2300      	movs	r3, #0
 800601a:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 800601c:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	e08f      	b.n	8006144 <task_sensor_update+0x178>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a4e      	ldr	r2, [pc, #312]	@ (8006168 <task_sensor_update+0x19c>)
 8006030:	4413      	add	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4a4c      	ldr	r2, [pc, #304]	@ (800616c <task_sensor_update+0x1a0>)
 800603a:	4413      	add	r3, r2
 800603c:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7a9c      	ldrb	r4, [r3, #10]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	891b      	ldrh	r3, [r3, #8]
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7fb ffa7 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8006052:	4603      	mov	r3, r0
 8006054:	429c      	cmp	r4, r3
 8006056:	d103      	bne.n	8006060 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2201      	movs	r2, #1
 800605c:	715a      	strb	r2, [r3, #5]
 800605e:	e002      	b.n	8006066 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	791b      	ldrb	r3, [r3, #4]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d856      	bhi.n	800611c <task_sensor_update+0x150>
 800606e:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <task_sensor_update+0xa8>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006085 	.word	0x08006085
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060d1 	.word	0x080060d1
 8006080:	080060e9 	.word	0x080060e9
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	795b      	ldrb	r3, [r3, #5]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d151      	bne.n	8006130 <task_sensor_update+0x164>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2201      	movs	r2, #1
 8006098:	711a      	strb	r2, [r3, #4]
					}

					break;
 800609a:	e049      	b.n	8006130 <task_sensor_update+0x164>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1e5a      	subs	r2, r3, #1
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d142      	bne.n	8006134 <task_sensor_update+0x168>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	795b      	ldrb	r3, [r3, #5]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d108      	bne.n	80060c8 <task_sensor_update+0xfc>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7c5b      	ldrb	r3, [r3, #17]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fca0 	bl	8005a00 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2202      	movs	r2, #2
 80060c4:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 80060c6:	e035      	b.n	8006134 <task_sensor_update+0x168>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	711a      	strb	r2, [r3, #4]
					break;
 80060ce:	e031      	b.n	8006134 <task_sensor_update+0x168>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	795b      	ldrb	r3, [r3, #5]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d12f      	bne.n	8006138 <task_sensor_update+0x16c>
					{
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2203      	movs	r2, #3
 80060dc:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	601a      	str	r2, [r3, #0]
					}

					break;
 80060e6:	e027      	b.n	8006138 <task_sensor_update+0x16c>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d120      	bne.n	800613c <task_sensor_update+0x170>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	795b      	ldrb	r3, [r3, #5]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <task_sensor_update+0x148>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_up);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	7c1b      	ldrb	r3, [r3, #16]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fc7a 	bl	8005a00 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 8006112:	e013      	b.n	800613c <task_sensor_update+0x170>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2202      	movs	r2, #2
 8006118:	711a      	strb	r2, [r3, #4]
					break;
 800611a:	e00f      	b.n	800613c <task_sensor_update+0x170>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	715a      	strb	r2, [r3, #5]

					break;
 800612e:	e006      	b.n	800613e <task_sensor_update+0x172>
					break;
 8006130:	bf00      	nop
 8006132:	e004      	b.n	800613e <task_sensor_update+0x172>
					break;
 8006134:	bf00      	nop
 8006136:	e002      	b.n	800613e <task_sensor_update+0x172>
					break;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <task_sensor_update+0x172>
					break;
 800613c:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	3301      	adds	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b02      	cmp	r3, #2
 8006148:	f67f af6c 	bls.w	8006024 <task_sensor_update+0x58>
    while (b_time_update_required)
 800614c:	7cfb      	ldrb	r3, [r7, #19]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f47f af55 	bne.w	8005ffe <task_sensor_update+0x32>
			}
		}
    }
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}
 800615e:	bf00      	nop
 8006160:	2000040c 	.word	0x2000040c
 8006164:	20000410 	.word	0x20000410
 8006168:	08009d74 	.word	0x08009d74
 800616c:	200003f4 	.word	0x200003f4

08006170 <findslot>:
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <findslot+0x2c>)
 8006172:	b510      	push	{r4, lr}
 8006174:	4604      	mov	r4, r0
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	b118      	cbz	r0, 8006182 <findslot+0x12>
 800617a:	6a03      	ldr	r3, [r0, #32]
 800617c:	b90b      	cbnz	r3, 8006182 <findslot+0x12>
 800617e:	f001 f833 	bl	80071e8 <__sinit>
 8006182:	2c13      	cmp	r4, #19
 8006184:	d807      	bhi.n	8006196 <findslot+0x26>
 8006186:	4806      	ldr	r0, [pc, #24]	@ (80061a0 <findslot+0x30>)
 8006188:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800618c:	3201      	adds	r2, #1
 800618e:	d002      	beq.n	8006196 <findslot+0x26>
 8006190:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006194:	bd10      	pop	{r4, pc}
 8006196:	2000      	movs	r0, #0
 8006198:	e7fc      	b.n	8006194 <findslot+0x24>
 800619a:	bf00      	nop
 800619c:	20000044 	.word	0x20000044
 80061a0:	20000420 	.word	0x20000420

080061a4 <error>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	4604      	mov	r4, r0
 80061a8:	f001 fa22 	bl	80075f0 <__errno>
 80061ac:	2613      	movs	r6, #19
 80061ae:	4605      	mov	r5, r0
 80061b0:	2700      	movs	r7, #0
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	beab      	bkpt	0x00ab
 80061b8:	4606      	mov	r6, r0
 80061ba:	4620      	mov	r0, r4
 80061bc:	602e      	str	r6, [r5, #0]
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061c0 <checkerror>:
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d101      	bne.n	80061c8 <checkerror+0x8>
 80061c4:	f7ff bfee 	b.w	80061a4 <error>
 80061c8:	4770      	bx	lr

080061ca <_swiread>:
 80061ca:	b530      	push	{r4, r5, lr}
 80061cc:	b085      	sub	sp, #20
 80061ce:	2406      	movs	r4, #6
 80061d0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80061d4:	9203      	str	r2, [sp, #12]
 80061d6:	ad01      	add	r5, sp, #4
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	beab      	bkpt	0x00ab
 80061de:	4604      	mov	r4, r0
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff ffed 	bl	80061c0 <checkerror>
 80061e6:	b005      	add	sp, #20
 80061e8:	bd30      	pop	{r4, r5, pc}

080061ea <_read>:
 80061ea:	b570      	push	{r4, r5, r6, lr}
 80061ec:	460e      	mov	r6, r1
 80061ee:	4614      	mov	r4, r2
 80061f0:	f7ff ffbe 	bl	8006170 <findslot>
 80061f4:	4605      	mov	r5, r0
 80061f6:	b930      	cbnz	r0, 8006206 <_read+0x1c>
 80061f8:	f001 f9fa 	bl	80075f0 <__errno>
 80061fc:	2309      	movs	r3, #9
 80061fe:	6003      	str	r3, [r0, #0]
 8006200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	4622      	mov	r2, r4
 8006208:	4631      	mov	r1, r6
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	f7ff ffdd 	bl	80061ca <_swiread>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d0f5      	beq.n	8006200 <_read+0x16>
 8006214:	686b      	ldr	r3, [r5, #4]
 8006216:	1a20      	subs	r0, r4, r0
 8006218:	4403      	add	r3, r0
 800621a:	606b      	str	r3, [r5, #4]
 800621c:	e7f2      	b.n	8006204 <_read+0x1a>

0800621e <_swilseek>:
 800621e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006220:	460c      	mov	r4, r1
 8006222:	4616      	mov	r6, r2
 8006224:	f7ff ffa4 	bl	8006170 <findslot>
 8006228:	4605      	mov	r5, r0
 800622a:	b940      	cbnz	r0, 800623e <_swilseek+0x20>
 800622c:	f001 f9e0 	bl	80075f0 <__errno>
 8006230:	2309      	movs	r3, #9
 8006232:	6003      	str	r3, [r0, #0]
 8006234:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006238:	4620      	mov	r0, r4
 800623a:	b003      	add	sp, #12
 800623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623e:	2e02      	cmp	r6, #2
 8006240:	d903      	bls.n	800624a <_swilseek+0x2c>
 8006242:	f001 f9d5 	bl	80075f0 <__errno>
 8006246:	2316      	movs	r3, #22
 8006248:	e7f3      	b.n	8006232 <_swilseek+0x14>
 800624a:	2e01      	cmp	r6, #1
 800624c:	d112      	bne.n	8006274 <_swilseek+0x56>
 800624e:	6843      	ldr	r3, [r0, #4]
 8006250:	18e4      	adds	r4, r4, r3
 8006252:	d4f6      	bmi.n	8006242 <_swilseek+0x24>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	260a      	movs	r6, #10
 8006258:	466f      	mov	r7, sp
 800625a:	e9cd 3400 	strd	r3, r4, [sp]
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	beab      	bkpt	0x00ab
 8006264:	4606      	mov	r6, r0
 8006266:	4630      	mov	r0, r6
 8006268:	f7ff ffaa 	bl	80061c0 <checkerror>
 800626c:	2800      	cmp	r0, #0
 800626e:	dbe1      	blt.n	8006234 <_swilseek+0x16>
 8006270:	606c      	str	r4, [r5, #4]
 8006272:	e7e1      	b.n	8006238 <_swilseek+0x1a>
 8006274:	2e02      	cmp	r6, #2
 8006276:	6803      	ldr	r3, [r0, #0]
 8006278:	d1ec      	bne.n	8006254 <_swilseek+0x36>
 800627a:	260c      	movs	r6, #12
 800627c:	466f      	mov	r7, sp
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	beab      	bkpt	0x00ab
 8006286:	4606      	mov	r6, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff ff99 	bl	80061c0 <checkerror>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d0d0      	beq.n	8006234 <_swilseek+0x16>
 8006292:	4404      	add	r4, r0
 8006294:	e7de      	b.n	8006254 <_swilseek+0x36>

08006296 <_lseek>:
 8006296:	f7ff bfc2 	b.w	800621e <_swilseek>

0800629a <_swiwrite>:
 800629a:	b530      	push	{r4, r5, lr}
 800629c:	b085      	sub	sp, #20
 800629e:	2405      	movs	r4, #5
 80062a0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80062a4:	9203      	str	r2, [sp, #12]
 80062a6:	ad01      	add	r5, sp, #4
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	beab      	bkpt	0x00ab
 80062ae:	4604      	mov	r4, r0
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7ff ff85 	bl	80061c0 <checkerror>
 80062b6:	b005      	add	sp, #20
 80062b8:	bd30      	pop	{r4, r5, pc}

080062ba <_write>:
 80062ba:	b570      	push	{r4, r5, r6, lr}
 80062bc:	460e      	mov	r6, r1
 80062be:	4615      	mov	r5, r2
 80062c0:	f7ff ff56 	bl	8006170 <findslot>
 80062c4:	4604      	mov	r4, r0
 80062c6:	b930      	cbnz	r0, 80062d6 <_write+0x1c>
 80062c8:	f001 f992 	bl	80075f0 <__errno>
 80062cc:	2309      	movs	r3, #9
 80062ce:	6003      	str	r3, [r0, #0]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	462a      	mov	r2, r5
 80062d8:	4631      	mov	r1, r6
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	f7ff ffdd 	bl	800629a <_swiwrite>
 80062e0:	1e03      	subs	r3, r0, #0
 80062e2:	dbf5      	blt.n	80062d0 <_write+0x16>
 80062e4:	6862      	ldr	r2, [r4, #4]
 80062e6:	1ae8      	subs	r0, r5, r3
 80062e8:	4402      	add	r2, r0
 80062ea:	42ab      	cmp	r3, r5
 80062ec:	6062      	str	r2, [r4, #4]
 80062ee:	d1f1      	bne.n	80062d4 <_write+0x1a>
 80062f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062f4:	2000      	movs	r0, #0
 80062f6:	f7ff bf55 	b.w	80061a4 <error>

080062fa <_swiclose>:
 80062fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062fc:	2402      	movs	r4, #2
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	ad01      	add	r5, sp, #4
 8006302:	4620      	mov	r0, r4
 8006304:	4629      	mov	r1, r5
 8006306:	beab      	bkpt	0x00ab
 8006308:	4604      	mov	r4, r0
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff ff58 	bl	80061c0 <checkerror>
 8006310:	b003      	add	sp, #12
 8006312:	bd30      	pop	{r4, r5, pc}

08006314 <_close>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4605      	mov	r5, r0
 8006318:	f7ff ff2a 	bl	8006170 <findslot>
 800631c:	4604      	mov	r4, r0
 800631e:	b930      	cbnz	r0, 800632e <_close+0x1a>
 8006320:	f001 f966 	bl	80075f0 <__errno>
 8006324:	2309      	movs	r3, #9
 8006326:	6003      	str	r3, [r0, #0]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	3d01      	subs	r5, #1
 8006330:	2d01      	cmp	r5, #1
 8006332:	d809      	bhi.n	8006348 <_close+0x34>
 8006334:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <_close+0x40>)
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d104      	bne.n	8006348 <_close+0x34>
 800633e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006342:	2000      	movs	r0, #0
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	e7f1      	b.n	800632c <_close+0x18>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	f7ff ffd6 	bl	80062fa <_swiclose>
 800634e:	2800      	cmp	r0, #0
 8006350:	d0f5      	beq.n	800633e <_close+0x2a>
 8006352:	e7eb      	b.n	800632c <_close+0x18>
 8006354:	20000420 	.word	0x20000420

08006358 <_getpid>:
 8006358:	2001      	movs	r0, #1
 800635a:	4770      	bx	lr

0800635c <_swistat>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	460c      	mov	r4, r1
 8006360:	f7ff ff06 	bl	8006170 <findslot>
 8006364:	4605      	mov	r5, r0
 8006366:	b930      	cbnz	r0, 8006376 <_swistat+0x1a>
 8006368:	f001 f942 	bl	80075f0 <__errno>
 800636c:	2309      	movs	r3, #9
 800636e:	6003      	str	r3, [r0, #0]
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	260c      	movs	r6, #12
 800637a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006384:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006386:	4630      	mov	r0, r6
 8006388:	4629      	mov	r1, r5
 800638a:	beab      	bkpt	0x00ab
 800638c:	4605      	mov	r5, r0
 800638e:	4628      	mov	r0, r5
 8006390:	f7ff ff16 	bl	80061c0 <checkerror>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d0eb      	beq.n	8006370 <_swistat+0x14>
 8006398:	6120      	str	r0, [r4, #16]
 800639a:	2000      	movs	r0, #0
 800639c:	e7ea      	b.n	8006374 <_swistat+0x18>

0800639e <_fstat>:
 800639e:	460b      	mov	r3, r1
 80063a0:	b510      	push	{r4, lr}
 80063a2:	2100      	movs	r1, #0
 80063a4:	4604      	mov	r4, r0
 80063a6:	2258      	movs	r2, #88	@ 0x58
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 f8cf 	bl	800754c <memset>
 80063ae:	4601      	mov	r1, r0
 80063b0:	4620      	mov	r0, r4
 80063b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b6:	f7ff bfd1 	b.w	800635c <_swistat>

080063ba <_stat>:
 80063ba:	b538      	push	{r3, r4, r5, lr}
 80063bc:	460d      	mov	r5, r1
 80063be:	4604      	mov	r4, r0
 80063c0:	2258      	movs	r2, #88	@ 0x58
 80063c2:	2100      	movs	r1, #0
 80063c4:	4628      	mov	r0, r5
 80063c6:	f001 f8c1 	bl	800754c <memset>
 80063ca:	4620      	mov	r0, r4
 80063cc:	2100      	movs	r1, #0
 80063ce:	f000 f811 	bl	80063f4 <_swiopen>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	4604      	mov	r4, r0
 80063d6:	d00b      	beq.n	80063f0 <_stat+0x36>
 80063d8:	686b      	ldr	r3, [r5, #4]
 80063da:	4629      	mov	r1, r5
 80063dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063e0:	606b      	str	r3, [r5, #4]
 80063e2:	f7ff ffbb 	bl	800635c <_swistat>
 80063e6:	4605      	mov	r5, r0
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff ff93 	bl	8006314 <_close>
 80063ee:	462c      	mov	r4, r5
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd38      	pop	{r3, r4, r5, pc}

080063f4 <_swiopen>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	4682      	mov	sl, r0
 80063fa:	460e      	mov	r6, r1
 80063fc:	2400      	movs	r4, #0
 80063fe:	4f28      	ldr	r7, [pc, #160]	@ (80064a0 <_swiopen+0xac>)
 8006400:	b096      	sub	sp, #88	@ 0x58
 8006402:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006406:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800640a:	3301      	adds	r3, #1
 800640c:	d00c      	beq.n	8006428 <_swiopen+0x34>
 800640e:	3401      	adds	r4, #1
 8006410:	2c14      	cmp	r4, #20
 8006412:	d1f6      	bne.n	8006402 <_swiopen+0xe>
 8006414:	f001 f8ec 	bl	80075f0 <__errno>
 8006418:	2318      	movs	r3, #24
 800641a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800641e:	6003      	str	r3, [r0, #0]
 8006420:	4620      	mov	r0, r4
 8006422:	b016      	add	sp, #88	@ 0x58
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800642c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006430:	46e9      	mov	r9, sp
 8006432:	d109      	bne.n	8006448 <_swiopen+0x54>
 8006434:	4649      	mov	r1, r9
 8006436:	4650      	mov	r0, sl
 8006438:	f7ff ffbf 	bl	80063ba <_stat>
 800643c:	3001      	adds	r0, #1
 800643e:	d003      	beq.n	8006448 <_swiopen+0x54>
 8006440:	f001 f8d6 	bl	80075f0 <__errno>
 8006444:	2311      	movs	r3, #17
 8006446:	e7e8      	b.n	800641a <_swiopen+0x26>
 8006448:	f240 6301 	movw	r3, #1537	@ 0x601
 800644c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006450:	07b2      	lsls	r2, r6, #30
 8006452:	bf48      	it	mi
 8006454:	f045 0502 	orrmi.w	r5, r5, #2
 8006458:	421e      	tst	r6, r3
 800645a:	bf18      	it	ne
 800645c:	f045 0504 	orrne.w	r5, r5, #4
 8006460:	0733      	lsls	r3, r6, #28
 8006462:	bf48      	it	mi
 8006464:	f025 0504 	bicmi.w	r5, r5, #4
 8006468:	4650      	mov	r0, sl
 800646a:	bf48      	it	mi
 800646c:	f045 0508 	orrmi.w	r5, r5, #8
 8006470:	f8cd a000 	str.w	sl, [sp]
 8006474:	f7f9 fe6c 	bl	8000150 <strlen>
 8006478:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800647c:	2501      	movs	r5, #1
 800647e:	4628      	mov	r0, r5
 8006480:	4649      	mov	r1, r9
 8006482:	beab      	bkpt	0x00ab
 8006484:	4605      	mov	r5, r0
 8006486:	2d00      	cmp	r5, #0
 8006488:	db05      	blt.n	8006496 <_swiopen+0xa2>
 800648a:	2300      	movs	r3, #0
 800648c:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006490:	4447      	add	r7, r8
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	e7c4      	b.n	8006420 <_swiopen+0x2c>
 8006496:	4628      	mov	r0, r5
 8006498:	f7ff fe84 	bl	80061a4 <error>
 800649c:	4604      	mov	r4, r0
 800649e:	e7bf      	b.n	8006420 <_swiopen+0x2c>
 80064a0:	20000420 	.word	0x20000420

080064a4 <_get_semihosting_exts>:
 80064a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	4606      	mov	r6, r0
 80064aa:	460f      	mov	r7, r1
 80064ac:	4829      	ldr	r0, [pc, #164]	@ (8006554 <_get_semihosting_exts+0xb0>)
 80064ae:	2100      	movs	r1, #0
 80064b0:	4615      	mov	r5, r2
 80064b2:	f7ff ff9f 	bl	80063f4 <_swiopen>
 80064b6:	4604      	mov	r4, r0
 80064b8:	462a      	mov	r2, r5
 80064ba:	2100      	movs	r1, #0
 80064bc:	4630      	mov	r0, r6
 80064be:	f001 f845 	bl	800754c <memset>
 80064c2:	1c63      	adds	r3, r4, #1
 80064c4:	d014      	beq.n	80064f0 <_get_semihosting_exts+0x4c>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fe52 	bl	8006170 <findslot>
 80064cc:	f04f 080c 	mov.w	r8, #12
 80064d0:	4681      	mov	r9, r0
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	beab      	bkpt	0x00ab
 80064d8:	4680      	mov	r8, r0
 80064da:	4640      	mov	r0, r8
 80064dc:	f7ff fe70 	bl	80061c0 <checkerror>
 80064e0:	2803      	cmp	r0, #3
 80064e2:	dd02      	ble.n	80064ea <_get_semihosting_exts+0x46>
 80064e4:	1ec3      	subs	r3, r0, #3
 80064e6:	42ab      	cmp	r3, r5
 80064e8:	dc07      	bgt.n	80064fa <_get_semihosting_exts+0x56>
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff ff12 	bl	8006314 <_close>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064f4:	b003      	add	sp, #12
 80064f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064fa:	2204      	movs	r2, #4
 80064fc:	4620      	mov	r0, r4
 80064fe:	eb0d 0102 	add.w	r1, sp, r2
 8006502:	f7ff fe72 	bl	80061ea <_read>
 8006506:	2803      	cmp	r0, #3
 8006508:	ddef      	ble.n	80064ea <_get_semihosting_exts+0x46>
 800650a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800650e:	2b53      	cmp	r3, #83	@ 0x53
 8006510:	d1eb      	bne.n	80064ea <_get_semihosting_exts+0x46>
 8006512:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006516:	2b48      	cmp	r3, #72	@ 0x48
 8006518:	d1e7      	bne.n	80064ea <_get_semihosting_exts+0x46>
 800651a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800651e:	2b46      	cmp	r3, #70	@ 0x46
 8006520:	d1e3      	bne.n	80064ea <_get_semihosting_exts+0x46>
 8006522:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006526:	2b42      	cmp	r3, #66	@ 0x42
 8006528:	d1df      	bne.n	80064ea <_get_semihosting_exts+0x46>
 800652a:	2201      	movs	r2, #1
 800652c:	4639      	mov	r1, r7
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fe75 	bl	800621e <_swilseek>
 8006534:	2800      	cmp	r0, #0
 8006536:	dbd8      	blt.n	80064ea <_get_semihosting_exts+0x46>
 8006538:	462a      	mov	r2, r5
 800653a:	4631      	mov	r1, r6
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fe54 	bl	80061ea <_read>
 8006542:	4605      	mov	r5, r0
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff fee5 	bl	8006314 <_close>
 800654a:	4628      	mov	r0, r5
 800654c:	f7ff fe38 	bl	80061c0 <checkerror>
 8006550:	e7d0      	b.n	80064f4 <_get_semihosting_exts+0x50>
 8006552:	bf00      	nop
 8006554:	08009db0 	.word	0x08009db0

08006558 <initialise_semihosting_exts>:
 8006558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800655a:	2100      	movs	r1, #0
 800655c:	2201      	movs	r2, #1
 800655e:	4d09      	ldr	r5, [pc, #36]	@ (8006584 <initialise_semihosting_exts+0x2c>)
 8006560:	4c09      	ldr	r4, [pc, #36]	@ (8006588 <initialise_semihosting_exts+0x30>)
 8006562:	a801      	add	r0, sp, #4
 8006564:	6029      	str	r1, [r5, #0]
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	f7ff ff9c 	bl	80064a4 <_get_semihosting_exts>
 800656c:	2800      	cmp	r0, #0
 800656e:	dd07      	ble.n	8006580 <initialise_semihosting_exts+0x28>
 8006570:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006574:	f003 0201 	and.w	r2, r3, #1
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
 8006584:	20000034 	.word	0x20000034
 8006588:	20000030 	.word	0x20000030

0800658c <_has_ext_stdout_stderr>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4c04      	ldr	r4, [pc, #16]	@ (80065a0 <_has_ext_stdout_stderr+0x14>)
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da01      	bge.n	800659a <_has_ext_stdout_stderr+0xe>
 8006596:	f7ff ffdf 	bl	8006558 <initialise_semihosting_exts>
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	20000030 	.word	0x20000030

080065a4 <initialise_monitor_handles>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	2303      	movs	r3, #3
 80065aa:	2400      	movs	r4, #0
 80065ac:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8006650 <initialise_monitor_handles+0xac>
 80065b0:	b085      	sub	sp, #20
 80065b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80065b6:	af01      	add	r7, sp, #4
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	2501      	movs	r5, #1
 80065bc:	9402      	str	r4, [sp, #8]
 80065be:	4628      	mov	r0, r5
 80065c0:	4639      	mov	r1, r7
 80065c2:	beab      	bkpt	0x00ab
 80065c4:	4605      	mov	r5, r0
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065ca:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8006654 <initialise_monitor_handles+0xb0>
 80065ce:	4623      	mov	r3, r4
 80065d0:	4c21      	ldr	r4, [pc, #132]	@ (8006658 <initialise_monitor_handles+0xb4>)
 80065d2:	f8c8 5000 	str.w	r5, [r8]
 80065d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80065da:	3301      	adds	r3, #1
 80065dc:	2b14      	cmp	r3, #20
 80065de:	d1fa      	bne.n	80065d6 <initialise_monitor_handles+0x32>
 80065e0:	f7ff ffd4 	bl	800658c <_has_ext_stdout_stderr>
 80065e4:	4d1d      	ldr	r5, [pc, #116]	@ (800665c <initialise_monitor_handles+0xb8>)
 80065e6:	b1d0      	cbz	r0, 800661e <initialise_monitor_handles+0x7a>
 80065e8:	f04f 0a03 	mov.w	sl, #3
 80065ec:	2304      	movs	r3, #4
 80065ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80065f2:	2601      	movs	r6, #1
 80065f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	beab      	bkpt	0x00ab
 8006600:	4683      	mov	fp, r0
 8006602:	4b17      	ldr	r3, [pc, #92]	@ (8006660 <initialise_monitor_handles+0xbc>)
 8006604:	f8cd 9004 	str.w	r9, [sp, #4]
 8006608:	f8c3 b000 	str.w	fp, [r3]
 800660c:	2308      	movs	r3, #8
 800660e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	beab      	bkpt	0x00ab
 800661a:	4606      	mov	r6, r0
 800661c:	602e      	str	r6, [r5, #0]
 800661e:	2600      	movs	r6, #0
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	6066      	str	r6, [r4, #4]
 8006624:	3301      	adds	r3, #1
 8006626:	bf02      	ittt	eq
 8006628:	4b0d      	ldreq	r3, [pc, #52]	@ (8006660 <initialise_monitor_handles+0xbc>)
 800662a:	681b      	ldreq	r3, [r3, #0]
 800662c:	602b      	streq	r3, [r5, #0]
 800662e:	f8d8 3000 	ldr.w	r3, [r8]
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	f7ff ffaa 	bl	800658c <_has_ext_stdout_stderr>
 8006638:	b130      	cbz	r0, 8006648 <initialise_monitor_handles+0xa4>
 800663a:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <initialise_monitor_handles+0xbc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006648:	b005      	add	sp, #20
 800664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	bf00      	nop
 8006650:	08009dc6 	.word	0x08009dc6
 8006654:	2000041c 	.word	0x2000041c
 8006658:	20000420 	.word	0x20000420
 800665c:	20000414 	.word	0x20000414
 8006660:	20000418 	.word	0x20000418

08006664 <_isatty>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	f7ff fd83 	bl	8006170 <findslot>
 800666a:	2409      	movs	r4, #9
 800666c:	4605      	mov	r5, r0
 800666e:	b920      	cbnz	r0, 800667a <_isatty+0x16>
 8006670:	f000 ffbe 	bl	80075f0 <__errno>
 8006674:	6004      	str	r4, [r0, #0]
 8006676:	2000      	movs	r0, #0
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	beab      	bkpt	0x00ab
 8006680:	4604      	mov	r4, r0
 8006682:	2c01      	cmp	r4, #1
 8006684:	4620      	mov	r0, r4
 8006686:	d0f7      	beq.n	8006678 <_isatty+0x14>
 8006688:	f000 ffb2 	bl	80075f0 <__errno>
 800668c:	2513      	movs	r5, #19
 800668e:	4604      	mov	r4, r0
 8006690:	2600      	movs	r6, #0
 8006692:	4628      	mov	r0, r5
 8006694:	4631      	mov	r1, r6
 8006696:	beab      	bkpt	0x00ab
 8006698:	4605      	mov	r5, r0
 800669a:	6025      	str	r5, [r4, #0]
 800669c:	e7eb      	b.n	8006676 <_isatty+0x12>

0800669e <__cvt>:
 800669e:	2b00      	cmp	r3, #0
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	461d      	mov	r5, r3
 80066a6:	bfbb      	ittet	lt
 80066a8:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	461d      	movlt	r5, r3
 80066ae:	2300      	movge	r3, #0
 80066b0:	232d      	movlt	r3, #45	@ 0x2d
 80066b2:	b088      	sub	sp, #32
 80066b4:	4614      	mov	r4, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4614      	movlt	r4, r2
 80066ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066bc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80066be:	7013      	strb	r3, [r2, #0]
 80066c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066c2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80066c6:	f023 0820 	bic.w	r8, r3, #32
 80066ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066ce:	d005      	beq.n	80066dc <__cvt+0x3e>
 80066d0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066d4:	d100      	bne.n	80066d8 <__cvt+0x3a>
 80066d6:	3601      	adds	r6, #1
 80066d8:	2302      	movs	r3, #2
 80066da:	e000      	b.n	80066de <__cvt+0x40>
 80066dc:	2303      	movs	r3, #3
 80066de:	aa07      	add	r2, sp, #28
 80066e0:	9204      	str	r2, [sp, #16]
 80066e2:	aa06      	add	r2, sp, #24
 80066e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80066e8:	e9cd 3600 	strd	r3, r6, [sp]
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	f001 f842 	bl	8007778 <_dtoa_r>
 80066f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066f8:	4607      	mov	r7, r0
 80066fa:	d119      	bne.n	8006730 <__cvt+0x92>
 80066fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d50e      	bpl.n	8006720 <__cvt+0x82>
 8006702:	eb00 0906 	add.w	r9, r0, r6
 8006706:	2200      	movs	r2, #0
 8006708:	2300      	movs	r3, #0
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7fa f94b 	bl	80009a8 <__aeabi_dcmpeq>
 8006712:	b108      	cbz	r0, 8006718 <__cvt+0x7a>
 8006714:	f8cd 901c 	str.w	r9, [sp, #28]
 8006718:	2230      	movs	r2, #48	@ 0x30
 800671a:	9b07      	ldr	r3, [sp, #28]
 800671c:	454b      	cmp	r3, r9
 800671e:	d31e      	bcc.n	800675e <__cvt+0xc0>
 8006720:	4638      	mov	r0, r7
 8006722:	9b07      	ldr	r3, [sp, #28]
 8006724:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006726:	1bdb      	subs	r3, r3, r7
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	b008      	add	sp, #32
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006730:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006734:	eb00 0906 	add.w	r9, r0, r6
 8006738:	d1e5      	bne.n	8006706 <__cvt+0x68>
 800673a:	7803      	ldrb	r3, [r0, #0]
 800673c:	2b30      	cmp	r3, #48	@ 0x30
 800673e:	d10a      	bne.n	8006756 <__cvt+0xb8>
 8006740:	2200      	movs	r2, #0
 8006742:	2300      	movs	r3, #0
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7fa f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800674c:	b918      	cbnz	r0, 8006756 <__cvt+0xb8>
 800674e:	f1c6 0601 	rsb	r6, r6, #1
 8006752:	f8ca 6000 	str.w	r6, [sl]
 8006756:	f8da 3000 	ldr.w	r3, [sl]
 800675a:	4499      	add	r9, r3
 800675c:	e7d3      	b.n	8006706 <__cvt+0x68>
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	9107      	str	r1, [sp, #28]
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e7d9      	b.n	800671a <__cvt+0x7c>

08006766 <__exponent>:
 8006766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006768:	2900      	cmp	r1, #0
 800676a:	bfb6      	itet	lt
 800676c:	232d      	movlt	r3, #45	@ 0x2d
 800676e:	232b      	movge	r3, #43	@ 0x2b
 8006770:	4249      	neglt	r1, r1
 8006772:	2909      	cmp	r1, #9
 8006774:	7002      	strb	r2, [r0, #0]
 8006776:	7043      	strb	r3, [r0, #1]
 8006778:	dd29      	ble.n	80067ce <__exponent+0x68>
 800677a:	f10d 0307 	add.w	r3, sp, #7
 800677e:	461d      	mov	r5, r3
 8006780:	270a      	movs	r7, #10
 8006782:	fbb1 f6f7 	udiv	r6, r1, r7
 8006786:	461a      	mov	r2, r3
 8006788:	fb07 1416 	mls	r4, r7, r6, r1
 800678c:	3430      	adds	r4, #48	@ 0x30
 800678e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006792:	460c      	mov	r4, r1
 8006794:	2c63      	cmp	r4, #99	@ 0x63
 8006796:	4631      	mov	r1, r6
 8006798:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800679c:	dcf1      	bgt.n	8006782 <__exponent+0x1c>
 800679e:	3130      	adds	r1, #48	@ 0x30
 80067a0:	1e94      	subs	r4, r2, #2
 80067a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067a6:	4623      	mov	r3, r4
 80067a8:	1c41      	adds	r1, r0, #1
 80067aa:	42ab      	cmp	r3, r5
 80067ac:	d30a      	bcc.n	80067c4 <__exponent+0x5e>
 80067ae:	f10d 0309 	add.w	r3, sp, #9
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ac      	cmp	r4, r5
 80067b6:	bf88      	it	hi
 80067b8:	2300      	movhi	r3, #0
 80067ba:	3302      	adds	r3, #2
 80067bc:	4403      	add	r3, r0
 80067be:	1a18      	subs	r0, r3, r0
 80067c0:	b003      	add	sp, #12
 80067c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067cc:	e7ed      	b.n	80067aa <__exponent+0x44>
 80067ce:	2330      	movs	r3, #48	@ 0x30
 80067d0:	3130      	adds	r1, #48	@ 0x30
 80067d2:	7083      	strb	r3, [r0, #2]
 80067d4:	70c1      	strb	r1, [r0, #3]
 80067d6:	1d03      	adds	r3, r0, #4
 80067d8:	e7f1      	b.n	80067be <__exponent+0x58>
	...

080067dc <_printf_float>:
 80067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	b091      	sub	sp, #68	@ 0x44
 80067e2:	460c      	mov	r4, r1
 80067e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80067e8:	4616      	mov	r6, r2
 80067ea:	461f      	mov	r7, r3
 80067ec:	4605      	mov	r5, r0
 80067ee:	f000 feb5 	bl	800755c <_localeconv_r>
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	9308      	str	r3, [sp, #32]
 80067f8:	f7f9 fcaa 	bl	8000150 <strlen>
 80067fc:	2300      	movs	r3, #0
 80067fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8006800:	f8d8 3000 	ldr.w	r3, [r8]
 8006804:	9009      	str	r0, [sp, #36]	@ 0x24
 8006806:	3307      	adds	r3, #7
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	f103 0208 	add.w	r2, r3, #8
 8006810:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006814:	f8d4 b000 	ldr.w	fp, [r4]
 8006818:	f8c8 2000 	str.w	r2, [r8]
 800681c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006820:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006824:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006826:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800682a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800682e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006832:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006836:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa8 <_printf_float+0x2cc>)
 8006838:	f7fa f8e8 	bl	8000a0c <__aeabi_dcmpun>
 800683c:	bb70      	cbnz	r0, 800689c <_printf_float+0xc0>
 800683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006846:	4b98      	ldr	r3, [pc, #608]	@ (8006aa8 <_printf_float+0x2cc>)
 8006848:	f7fa f8c2 	bl	80009d0 <__aeabi_dcmple>
 800684c:	bb30      	cbnz	r0, 800689c <_printf_float+0xc0>
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7fa f8b1 	bl	80009bc <__aeabi_dcmplt>
 800685a:	b110      	cbz	r0, 8006862 <_printf_float+0x86>
 800685c:	232d      	movs	r3, #45	@ 0x2d
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006862:	4a92      	ldr	r2, [pc, #584]	@ (8006aac <_printf_float+0x2d0>)
 8006864:	4b92      	ldr	r3, [pc, #584]	@ (8006ab0 <_printf_float+0x2d4>)
 8006866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800686a:	bf94      	ite	ls
 800686c:	4690      	movls	r8, r2
 800686e:	4698      	movhi	r8, r3
 8006870:	2303      	movs	r3, #3
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f02b 0304 	bic.w	r3, fp, #4
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	9700      	str	r7, [sp, #0]
 8006886:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006888:	f000 f9d4 	bl	8006c34 <_printf_common>
 800688c:	3001      	adds	r0, #1
 800688e:	f040 8090 	bne.w	80069b2 <_printf_float+0x1d6>
 8006892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006896:	b011      	add	sp, #68	@ 0x44
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f8b2 	bl	8000a0c <__aeabi_dcmpun>
 80068a8:	b148      	cbz	r0, 80068be <_printf_float+0xe2>
 80068aa:	464b      	mov	r3, r9
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfb8      	it	lt
 80068b0:	232d      	movlt	r3, #45	@ 0x2d
 80068b2:	4a80      	ldr	r2, [pc, #512]	@ (8006ab4 <_printf_float+0x2d8>)
 80068b4:	bfb8      	it	lt
 80068b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ba:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab8 <_printf_float+0x2dc>)
 80068bc:	e7d3      	b.n	8006866 <_printf_float+0x8a>
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	d13f      	bne.n	8006948 <_printf_float+0x16c>
 80068c8:	2306      	movs	r3, #6
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	9206      	str	r2, [sp, #24]
 80068d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80068d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80068dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80068de:	9203      	str	r2, [sp, #12]
 80068e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80068e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	4642      	mov	r2, r8
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4628      	mov	r0, r5
 80068f0:	464b      	mov	r3, r9
 80068f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80068f4:	f7ff fed3 	bl	800669e <__cvt>
 80068f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068fa:	4680      	mov	r8, r0
 80068fc:	2947      	cmp	r1, #71	@ 0x47
 80068fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006900:	d128      	bne.n	8006954 <_printf_float+0x178>
 8006902:	1cc8      	adds	r0, r1, #3
 8006904:	db02      	blt.n	800690c <_printf_float+0x130>
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	4299      	cmp	r1, r3
 800690a:	dd40      	ble.n	800698e <_printf_float+0x1b2>
 800690c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006910:	fa5f fa8a 	uxtb.w	sl, sl
 8006914:	4652      	mov	r2, sl
 8006916:	3901      	subs	r1, #1
 8006918:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800691c:	910d      	str	r1, [sp, #52]	@ 0x34
 800691e:	f7ff ff22 	bl	8006766 <__exponent>
 8006922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006924:	4681      	mov	r9, r0
 8006926:	1813      	adds	r3, r2, r0
 8006928:	2a01      	cmp	r2, #1
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	dc02      	bgt.n	8006934 <_printf_float+0x158>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	07d2      	lsls	r2, r2, #31
 8006932:	d501      	bpl.n	8006938 <_printf_float+0x15c>
 8006934:	3301      	adds	r3, #1
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800693c:	2b00      	cmp	r3, #0
 800693e:	d09e      	beq.n	800687e <_printf_float+0xa2>
 8006940:	232d      	movs	r3, #45	@ 0x2d
 8006942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006946:	e79a      	b.n	800687e <_printf_float+0xa2>
 8006948:	2947      	cmp	r1, #71	@ 0x47
 800694a:	d1bf      	bne.n	80068cc <_printf_float+0xf0>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1bd      	bne.n	80068cc <_printf_float+0xf0>
 8006950:	2301      	movs	r3, #1
 8006952:	e7ba      	b.n	80068ca <_printf_float+0xee>
 8006954:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006958:	d9dc      	bls.n	8006914 <_printf_float+0x138>
 800695a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800695e:	d118      	bne.n	8006992 <_printf_float+0x1b6>
 8006960:	2900      	cmp	r1, #0
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	dd0b      	ble.n	800697e <_printf_float+0x1a2>
 8006966:	6121      	str	r1, [r4, #16]
 8006968:	b913      	cbnz	r3, 8006970 <_printf_float+0x194>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	07d0      	lsls	r0, r2, #31
 800696e:	d502      	bpl.n	8006976 <_printf_float+0x19a>
 8006970:	3301      	adds	r3, #1
 8006972:	440b      	add	r3, r1
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800697c:	e7dc      	b.n	8006938 <_printf_float+0x15c>
 800697e:	b913      	cbnz	r3, 8006986 <_printf_float+0x1aa>
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	07d2      	lsls	r2, r2, #31
 8006984:	d501      	bpl.n	800698a <_printf_float+0x1ae>
 8006986:	3302      	adds	r3, #2
 8006988:	e7f4      	b.n	8006974 <_printf_float+0x198>
 800698a:	2301      	movs	r3, #1
 800698c:	e7f2      	b.n	8006974 <_printf_float+0x198>
 800698e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	4299      	cmp	r1, r3
 8006996:	db05      	blt.n	80069a4 <_printf_float+0x1c8>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	6121      	str	r1, [r4, #16]
 800699c:	07d8      	lsls	r0, r3, #31
 800699e:	d5ea      	bpl.n	8006976 <_printf_float+0x19a>
 80069a0:	1c4b      	adds	r3, r1, #1
 80069a2:	e7e7      	b.n	8006974 <_printf_float+0x198>
 80069a4:	2900      	cmp	r1, #0
 80069a6:	bfcc      	ite	gt
 80069a8:	2201      	movgt	r2, #1
 80069aa:	f1c1 0202 	rsble	r2, r1, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	e7e0      	b.n	8006974 <_printf_float+0x198>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	055a      	lsls	r2, r3, #21
 80069b6:	d407      	bmi.n	80069c8 <_printf_float+0x1ec>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	4642      	mov	r2, r8
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	d12b      	bne.n	8006a1e <_printf_float+0x242>
 80069c6:	e764      	b.n	8006892 <_printf_float+0xb6>
 80069c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069cc:	f240 80dc 	bls.w	8006b88 <_printf_float+0x3ac>
 80069d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	f7f9 ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d033      	beq.n	8006a48 <_printf_float+0x26c>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	4a35      	ldr	r2, [pc, #212]	@ (8006abc <_printf_float+0x2e0>)
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f af51 	beq.w	8006892 <_printf_float+0xb6>
 80069f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80069f4:	4543      	cmp	r3, r8
 80069f6:	db02      	blt.n	80069fe <_printf_float+0x222>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	07d8      	lsls	r0, r3, #31
 80069fc:	d50f      	bpl.n	8006a1e <_printf_float+0x242>
 80069fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f af42 	beq.w	8006892 <_printf_float+0xb6>
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006a16:	f104 0a1a 	add.w	sl, r4, #26
 8006a1a:	45c8      	cmp	r8, r9
 8006a1c:	dc09      	bgt.n	8006a32 <_printf_float+0x256>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	079b      	lsls	r3, r3, #30
 8006a22:	f100 8102 	bmi.w	8006c2a <_printf_float+0x44e>
 8006a26:	68e0      	ldr	r0, [r4, #12]
 8006a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	bfb8      	it	lt
 8006a2e:	4618      	movlt	r0, r3
 8006a30:	e731      	b.n	8006896 <_printf_float+0xba>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4652      	mov	r2, sl
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f af28 	beq.w	8006892 <_printf_float+0xb6>
 8006a42:	f109 0901 	add.w	r9, r9, #1
 8006a46:	e7e8      	b.n	8006a1a <_printf_float+0x23e>
 8006a48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dc38      	bgt.n	8006ac0 <_printf_float+0x2e4>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <_printf_float+0x2e0>)
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f af1a 	beq.w	8006892 <_printf_float+0xb6>
 8006a5e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006a62:	ea59 0303 	orrs.w	r3, r9, r3
 8006a66:	d102      	bne.n	8006a6e <_printf_float+0x292>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07d9      	lsls	r1, r3, #31
 8006a6c:	d5d7      	bpl.n	8006a1e <_printf_float+0x242>
 8006a6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f af0a 	beq.w	8006892 <_printf_float+0xb6>
 8006a7e:	f04f 0a00 	mov.w	sl, #0
 8006a82:	f104 0b1a 	add.w	fp, r4, #26
 8006a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a88:	425b      	negs	r3, r3
 8006a8a:	4553      	cmp	r3, sl
 8006a8c:	dc01      	bgt.n	8006a92 <_printf_float+0x2b6>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	e793      	b.n	80069ba <_printf_float+0x1de>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f aef8 	beq.w	8006892 <_printf_float+0xb6>
 8006aa2:	f10a 0a01 	add.w	sl, sl, #1
 8006aa6:	e7ee      	b.n	8006a86 <_printf_float+0x2aa>
 8006aa8:	7fefffff 	.word	0x7fefffff
 8006aac:	08009dca 	.word	0x08009dca
 8006ab0:	08009dce 	.word	0x08009dce
 8006ab4:	08009dd2 	.word	0x08009dd2
 8006ab8:	08009dd6 	.word	0x08009dd6
 8006abc:	08009dda 	.word	0x08009dda
 8006ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ac6:	4553      	cmp	r3, sl
 8006ac8:	bfa8      	it	ge
 8006aca:	4653      	movge	r3, sl
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4699      	mov	r9, r3
 8006ad0:	dc36      	bgt.n	8006b40 <_printf_float+0x364>
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ada:	f104 021a 	add.w	r2, r4, #26
 8006ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae2:	eba3 0309 	sub.w	r3, r3, r9
 8006ae6:	455b      	cmp	r3, fp
 8006ae8:	dc31      	bgt.n	8006b4e <_printf_float+0x372>
 8006aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aec:	459a      	cmp	sl, r3
 8006aee:	dc3a      	bgt.n	8006b66 <_printf_float+0x38a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d437      	bmi.n	8006b66 <_printf_float+0x38a>
 8006af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af8:	ebaa 0903 	sub.w	r9, sl, r3
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	ebaa 0303 	sub.w	r3, sl, r3
 8006b02:	4599      	cmp	r9, r3
 8006b04:	bfa8      	it	ge
 8006b06:	4699      	movge	r9, r3
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	dc33      	bgt.n	8006b76 <_printf_float+0x39a>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b16:	f104 0b1a 	add.w	fp, r4, #26
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b20:	eba3 0309 	sub.w	r3, r3, r9
 8006b24:	4543      	cmp	r3, r8
 8006b26:	f77f af7a 	ble.w	8006a1e <_printf_float+0x242>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	465a      	mov	r2, fp
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f aeac 	beq.w	8006892 <_printf_float+0xb6>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	e7ec      	b.n	8006b1a <_printf_float+0x33e>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c2      	bne.n	8006ad2 <_printf_float+0x2f6>
 8006b4c:	e6a1      	b.n	8006892 <_printf_float+0xb6>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	920a      	str	r2, [sp, #40]	@ 0x28
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae9a 	beq.w	8006892 <_printf_float+0xb6>
 8006b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b60:	f10b 0b01 	add.w	fp, fp, #1
 8006b64:	e7bb      	b.n	8006ade <_printf_float+0x302>
 8006b66:	4631      	mov	r1, r6
 8006b68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1c0      	bne.n	8006af6 <_printf_float+0x31a>
 8006b74:	e68d      	b.n	8006892 <_printf_float+0xb6>
 8006b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b78:	464b      	mov	r3, r9
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	4442      	add	r2, r8
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	d1c3      	bne.n	8006b0e <_printf_float+0x332>
 8006b86:	e684      	b.n	8006892 <_printf_float+0xb6>
 8006b88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b8c:	f1ba 0f01 	cmp.w	sl, #1
 8006b90:	dc01      	bgt.n	8006b96 <_printf_float+0x3ba>
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d536      	bpl.n	8006c04 <_printf_float+0x428>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae76 	beq.w	8006892 <_printf_float+0xb6>
 8006ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae6e 	beq.w	8006892 <_printf_float+0xb6>
 8006bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006bc2:	f7f9 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc6:	b9c0      	cbnz	r0, 8006bfa <_printf_float+0x41e>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	f108 0201 	add.w	r2, r8, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d10c      	bne.n	8006bf2 <_printf_float+0x416>
 8006bd8:	e65b      	b.n	8006892 <_printf_float+0xb6>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	465a      	mov	r2, fp
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae54 	beq.w	8006892 <_printf_float+0xb6>
 8006bea:	f108 0801 	add.w	r8, r8, #1
 8006bee:	45d0      	cmp	r8, sl
 8006bf0:	dbf3      	blt.n	8006bda <_printf_float+0x3fe>
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf8:	e6e0      	b.n	80069bc <_printf_float+0x1e0>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	f104 0b1a 	add.w	fp, r4, #26
 8006c02:	e7f4      	b.n	8006bee <_printf_float+0x412>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4642      	mov	r2, r8
 8006c08:	e7e1      	b.n	8006bce <_printf_float+0x3f2>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae3c 	beq.w	8006892 <_printf_float+0xb6>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	4543      	cmp	r3, r8
 8006c26:	dcf0      	bgt.n	8006c0a <_printf_float+0x42e>
 8006c28:	e6fd      	b.n	8006a26 <_printf_float+0x24a>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0919 	add.w	r9, r4, #25
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x442>

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	4607      	mov	r7, r0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfb8      	it	lt
 8006c46:	4613      	movlt	r3, r2
 8006c48:	6033      	str	r3, [r6, #0]
 8006c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc2b      	bgt.n	8006cd4 <_printf_common+0xa0>
 8006c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	3b00      	subs	r3, #0
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d430      	bmi.n	8006cee <_printf_common+0xba>
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d023      	beq.n	8006ce2 <_printf_common+0xae>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	f003 0306 	and.w	r3, r3, #6
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	bf14      	ite	ne
 8006ca6:	2500      	movne	r5, #0
 8006ca8:	6833      	ldreq	r3, [r6, #0]
 8006caa:	f04f 0600 	mov.w	r6, #0
 8006cae:	bf08      	it	eq
 8006cb0:	68e5      	ldreq	r5, [r4, #12]
 8006cb2:	f104 041a 	add.w	r4, r4, #26
 8006cb6:	bf08      	it	eq
 8006cb8:	1aed      	subeq	r5, r5, r3
 8006cba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006cbe:	bf08      	it	eq
 8006cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfc4      	itt	gt
 8006cc8:	1a9b      	subgt	r3, r3, r2
 8006cca:	18ed      	addgt	r5, r5, r3
 8006ccc:	42b5      	cmp	r5, r6
 8006cce:	d11a      	bne.n	8006d06 <_printf_common+0xd2>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e008      	b.n	8006ce6 <_printf_common+0xb2>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c8      	blx	r9
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d103      	bne.n	8006cea <_printf_common+0xb6>
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	3501      	adds	r5, #1
 8006cec:	e7c1      	b.n	8006c72 <_printf_common+0x3e>
 8006cee:	2030      	movs	r0, #48	@ 0x30
 8006cf0:	18e1      	adds	r1, r4, r3
 8006cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cfc:	4422      	add	r2, r4
 8006cfe:	3302      	adds	r3, #2
 8006d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d04:	e7c2      	b.n	8006c8c <_printf_common+0x58>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	47c8      	blx	r9
 8006d10:	3001      	adds	r0, #1
 8006d12:	d0e6      	beq.n	8006ce2 <_printf_common+0xae>
 8006d14:	3601      	adds	r6, #1
 8006d16:	e7d9      	b.n	8006ccc <_printf_common+0x98>

08006d18 <_printf_i>:
 8006d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	7e0f      	ldrb	r7, [r1, #24]
 8006d1e:	4691      	mov	r9, r2
 8006d20:	2f78      	cmp	r7, #120	@ 0x78
 8006d22:	4680      	mov	r8, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	469a      	mov	sl, r3
 8006d28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d2e:	d807      	bhi.n	8006d40 <_printf_i+0x28>
 8006d30:	2f62      	cmp	r7, #98	@ 0x62
 8006d32:	d80a      	bhi.n	8006d4a <_printf_i+0x32>
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	f000 80d3 	beq.w	8006ee0 <_printf_i+0x1c8>
 8006d3a:	2f58      	cmp	r7, #88	@ 0x58
 8006d3c:	f000 80ba 	beq.w	8006eb4 <_printf_i+0x19c>
 8006d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d48:	e03a      	b.n	8006dc0 <_printf_i+0xa8>
 8006d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d4e:	2b15      	cmp	r3, #21
 8006d50:	d8f6      	bhi.n	8006d40 <_printf_i+0x28>
 8006d52:	a101      	add	r1, pc, #4	@ (adr r1, 8006d58 <_printf_i+0x40>)
 8006d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006d41 	.word	0x08006d41
 8006d64:	08006d41 	.word	0x08006d41
 8006d68:	08006d41 	.word	0x08006d41
 8006d6c:	08006d41 	.word	0x08006d41
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d41 	.word	0x08006d41
 8006d78:	08006d41 	.word	0x08006d41
 8006d7c:	08006d41 	.word	0x08006d41
 8006d80:	08006d41 	.word	0x08006d41
 8006d84:	08006ec7 	.word	0x08006ec7
 8006d88:	08006def 	.word	0x08006def
 8006d8c:	08006e81 	.word	0x08006e81
 8006d90:	08006d41 	.word	0x08006d41
 8006d94:	08006d41 	.word	0x08006d41
 8006d98:	08006ee9 	.word	0x08006ee9
 8006d9c:	08006d41 	.word	0x08006d41
 8006da0:	08006def 	.word	0x08006def
 8006da4:	08006d41 	.word	0x08006d41
 8006da8:	08006d41 	.word	0x08006d41
 8006dac:	08006e89 	.word	0x08006e89
 8006db0:	6833      	ldr	r3, [r6, #0]
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6032      	str	r2, [r6, #0]
 8006db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e09e      	b.n	8006f02 <_printf_i+0x1ea>
 8006dc4:	6833      	ldr	r3, [r6, #0]
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	1d19      	adds	r1, r3, #4
 8006dca:	6031      	str	r1, [r6, #0]
 8006dcc:	0606      	lsls	r6, r0, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xbc>
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	e003      	b.n	8006ddc <_printf_i+0xc4>
 8006dd4:	0645      	lsls	r5, r0, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xb8>
 8006dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	da03      	bge.n	8006de8 <_printf_i+0xd0>
 8006de0:	232d      	movs	r3, #45	@ 0x2d
 8006de2:	426d      	negs	r5, r5
 8006de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de8:	230a      	movs	r3, #10
 8006dea:	4859      	ldr	r0, [pc, #356]	@ (8006f50 <_printf_i+0x238>)
 8006dec:	e011      	b.n	8006e12 <_printf_i+0xfa>
 8006dee:	6821      	ldr	r1, [r4, #0]
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	0608      	lsls	r0, r1, #24
 8006df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006df8:	d402      	bmi.n	8006e00 <_printf_i+0xe8>
 8006dfa:	0649      	lsls	r1, r1, #25
 8006dfc:	bf48      	it	mi
 8006dfe:	b2ad      	uxthmi	r5, r5
 8006e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	bf14      	ite	ne
 8006e06:	230a      	movne	r3, #10
 8006e08:	2308      	moveq	r3, #8
 8006e0a:	4851      	ldr	r0, [pc, #324]	@ (8006f50 <_printf_i+0x238>)
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e12:	6866      	ldr	r6, [r4, #4]
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	bfa8      	it	ge
 8006e18:	6821      	ldrge	r1, [r4, #0]
 8006e1a:	60a6      	str	r6, [r4, #8]
 8006e1c:	bfa4      	itt	ge
 8006e1e:	f021 0104 	bicge.w	r1, r1, #4
 8006e22:	6021      	strge	r1, [r4, #0]
 8006e24:	b90d      	cbnz	r5, 8006e2a <_printf_i+0x112>
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d04b      	beq.n	8006ec2 <_printf_i+0x1aa>
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e30:	fb03 5711 	mls	r7, r3, r1, r5
 8006e34:	5dc7      	ldrb	r7, [r0, r7]
 8006e36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e3a:	462f      	mov	r7, r5
 8006e3c:	42bb      	cmp	r3, r7
 8006e3e:	460d      	mov	r5, r1
 8006e40:	d9f4      	bls.n	8006e2c <_printf_i+0x114>
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d10b      	bne.n	8006e5e <_printf_i+0x146>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	07df      	lsls	r7, r3, #31
 8006e4a:	d508      	bpl.n	8006e5e <_printf_i+0x146>
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	6861      	ldr	r1, [r4, #4]
 8006e50:	4299      	cmp	r1, r3
 8006e52:	bfde      	ittt	le
 8006e54:	2330      	movle	r3, #48	@ 0x30
 8006e56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e5a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e5e:	1b92      	subs	r2, r2, r6
 8006e60:	6122      	str	r2, [r4, #16]
 8006e62:	464b      	mov	r3, r9
 8006e64:	4621      	mov	r1, r4
 8006e66:	4640      	mov	r0, r8
 8006e68:	f8cd a000 	str.w	sl, [sp]
 8006e6c:	aa03      	add	r2, sp, #12
 8006e6e:	f7ff fee1 	bl	8006c34 <_printf_common>
 8006e72:	3001      	adds	r0, #1
 8006e74:	d14a      	bne.n	8006f0c <_printf_i+0x1f4>
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e7a:	b004      	add	sp, #16
 8006e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	f043 0320 	orr.w	r3, r3, #32
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	2778      	movs	r7, #120	@ 0x78
 8006e8a:	4832      	ldr	r0, [pc, #200]	@ (8006f54 <_printf_i+0x23c>)
 8006e8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	6831      	ldr	r1, [r6, #0]
 8006e94:	061f      	lsls	r7, r3, #24
 8006e96:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e9a:	d402      	bmi.n	8006ea2 <_printf_i+0x18a>
 8006e9c:	065f      	lsls	r7, r3, #25
 8006e9e:	bf48      	it	mi
 8006ea0:	b2ad      	uxthmi	r5, r5
 8006ea2:	6031      	str	r1, [r6, #0]
 8006ea4:	07d9      	lsls	r1, r3, #31
 8006ea6:	bf44      	itt	mi
 8006ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8006eac:	6023      	strmi	r3, [r4, #0]
 8006eae:	b11d      	cbz	r5, 8006eb8 <_printf_i+0x1a0>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	e7ab      	b.n	8006e0c <_printf_i+0xf4>
 8006eb4:	4826      	ldr	r0, [pc, #152]	@ (8006f50 <_printf_i+0x238>)
 8006eb6:	e7e9      	b.n	8006e8c <_printf_i+0x174>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	f023 0320 	bic.w	r3, r3, #32
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	e7f6      	b.n	8006eb0 <_printf_i+0x198>
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	e7bd      	b.n	8006e42 <_printf_i+0x12a>
 8006ec6:	6833      	ldr	r3, [r6, #0]
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1d18      	adds	r0, r3, #4
 8006ecc:	6961      	ldr	r1, [r4, #20]
 8006ece:	6030      	str	r0, [r6, #0]
 8006ed0:	062e      	lsls	r6, r5, #24
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	d501      	bpl.n	8006eda <_printf_i+0x1c2>
 8006ed6:	6019      	str	r1, [r3, #0]
 8006ed8:	e002      	b.n	8006ee0 <_printf_i+0x1c8>
 8006eda:	0668      	lsls	r0, r5, #25
 8006edc:	d5fb      	bpl.n	8006ed6 <_printf_i+0x1be>
 8006ede:	8019      	strh	r1, [r3, #0]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4616      	mov	r6, r2
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	e7bc      	b.n	8006e62 <_printf_i+0x14a>
 8006ee8:	6833      	ldr	r3, [r6, #0]
 8006eea:	2100      	movs	r1, #0
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	6032      	str	r2, [r6, #0]
 8006ef0:	681e      	ldr	r6, [r3, #0]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 fba8 	bl	800764a <memchr>
 8006efa:	b108      	cbz	r0, 8006f00 <_printf_i+0x1e8>
 8006efc:	1b80      	subs	r0, r0, r6
 8006efe:	6060      	str	r0, [r4, #4]
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	2300      	movs	r3, #0
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0a:	e7aa      	b.n	8006e62 <_printf_i+0x14a>
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	47d0      	blx	sl
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0ad      	beq.n	8006e76 <_printf_i+0x15e>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	079b      	lsls	r3, r3, #30
 8006f1e:	d413      	bmi.n	8006f48 <_printf_i+0x230>
 8006f20:	68e0      	ldr	r0, [r4, #12]
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	4298      	cmp	r0, r3
 8006f26:	bfb8      	it	lt
 8006f28:	4618      	movlt	r0, r3
 8006f2a:	e7a6      	b.n	8006e7a <_printf_i+0x162>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4632      	mov	r2, r6
 8006f30:	4649      	mov	r1, r9
 8006f32:	4640      	mov	r0, r8
 8006f34:	47d0      	blx	sl
 8006f36:	3001      	adds	r0, #1
 8006f38:	d09d      	beq.n	8006e76 <_printf_i+0x15e>
 8006f3a:	3501      	adds	r5, #1
 8006f3c:	68e3      	ldr	r3, [r4, #12]
 8006f3e:	9903      	ldr	r1, [sp, #12]
 8006f40:	1a5b      	subs	r3, r3, r1
 8006f42:	42ab      	cmp	r3, r5
 8006f44:	dcf2      	bgt.n	8006f2c <_printf_i+0x214>
 8006f46:	e7eb      	b.n	8006f20 <_printf_i+0x208>
 8006f48:	2500      	movs	r5, #0
 8006f4a:	f104 0619 	add.w	r6, r4, #25
 8006f4e:	e7f5      	b.n	8006f3c <_printf_i+0x224>
 8006f50:	08009ddc 	.word	0x08009ddc
 8006f54:	08009ded 	.word	0x08009ded

08006f58 <__sflush_r>:
 8006f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	0716      	lsls	r6, r2, #28
 8006f60:	4605      	mov	r5, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	d454      	bmi.n	8007010 <__sflush_r+0xb8>
 8006f66:	684b      	ldr	r3, [r1, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc02      	bgt.n	8006f72 <__sflush_r+0x1a>
 8006f6c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd48      	ble.n	8007004 <__sflush_r+0xac>
 8006f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d045      	beq.n	8007004 <__sflush_r+0xac>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f7e:	682f      	ldr	r7, [r5, #0]
 8006f80:	6a21      	ldr	r1, [r4, #32]
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	d030      	beq.n	8006fe8 <__sflush_r+0x90>
 8006f86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	0759      	lsls	r1, r3, #29
 8006f8c:	d505      	bpl.n	8006f9a <__sflush_r+0x42>
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	1ad2      	subs	r2, r2, r3
 8006f92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f94:	b10b      	cbz	r3, 8006f9a <__sflush_r+0x42>
 8006f96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fa0:	6a21      	ldr	r1, [r4, #32]
 8006fa2:	47b0      	blx	r6
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	d106      	bne.n	8006fb8 <__sflush_r+0x60>
 8006faa:	6829      	ldr	r1, [r5, #0]
 8006fac:	291d      	cmp	r1, #29
 8006fae:	d82b      	bhi.n	8007008 <__sflush_r+0xb0>
 8006fb0:	4a28      	ldr	r2, [pc, #160]	@ (8007054 <__sflush_r+0xfc>)
 8006fb2:	410a      	asrs	r2, r1
 8006fb4:	07d6      	lsls	r6, r2, #31
 8006fb6:	d427      	bmi.n	8007008 <__sflush_r+0xb0>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	6062      	str	r2, [r4, #4]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	04d9      	lsls	r1, r3, #19
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	d504      	bpl.n	8006fce <__sflush_r+0x76>
 8006fc4:	1c42      	adds	r2, r0, #1
 8006fc6:	d101      	bne.n	8006fcc <__sflush_r+0x74>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b903      	cbnz	r3, 8006fce <__sflush_r+0x76>
 8006fcc:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fd0:	602f      	str	r7, [r5, #0]
 8006fd2:	b1b9      	cbz	r1, 8007004 <__sflush_r+0xac>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__sflush_r+0x8a>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f001 f993 	bl	8008308 <_free_r>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fe6:	e00d      	b.n	8007004 <__sflush_r+0xac>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b0      	blx	r6
 8006fee:	4602      	mov	r2, r0
 8006ff0:	1c50      	adds	r0, r2, #1
 8006ff2:	d1c9      	bne.n	8006f88 <__sflush_r+0x30>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c6      	beq.n	8006f88 <__sflush_r+0x30>
 8006ffa:	2b1d      	cmp	r3, #29
 8006ffc:	d001      	beq.n	8007002 <__sflush_r+0xaa>
 8006ffe:	2b16      	cmp	r3, #22
 8007000:	d11d      	bne.n	800703e <__sflush_r+0xe6>
 8007002:	602f      	str	r7, [r5, #0]
 8007004:	2000      	movs	r0, #0
 8007006:	e021      	b.n	800704c <__sflush_r+0xf4>
 8007008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800700c:	b21b      	sxth	r3, r3
 800700e:	e01a      	b.n	8007046 <__sflush_r+0xee>
 8007010:	690f      	ldr	r7, [r1, #16]
 8007012:	2f00      	cmp	r7, #0
 8007014:	d0f6      	beq.n	8007004 <__sflush_r+0xac>
 8007016:	0793      	lsls	r3, r2, #30
 8007018:	bf18      	it	ne
 800701a:	2300      	movne	r3, #0
 800701c:	680e      	ldr	r6, [r1, #0]
 800701e:	bf08      	it	eq
 8007020:	694b      	ldreq	r3, [r1, #20]
 8007022:	1bf6      	subs	r6, r6, r7
 8007024:	600f      	str	r7, [r1, #0]
 8007026:	608b      	str	r3, [r1, #8]
 8007028:	2e00      	cmp	r6, #0
 800702a:	ddeb      	ble.n	8007004 <__sflush_r+0xac>
 800702c:	4633      	mov	r3, r6
 800702e:	463a      	mov	r2, r7
 8007030:	4628      	mov	r0, r5
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007038:	47e0      	blx	ip
 800703a:	2800      	cmp	r0, #0
 800703c:	dc07      	bgt.n	800704e <__sflush_r+0xf6>
 800703e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704e:	4407      	add	r7, r0
 8007050:	1a36      	subs	r6, r6, r0
 8007052:	e7e9      	b.n	8007028 <__sflush_r+0xd0>
 8007054:	dfbffffe 	.word	0xdfbffffe

08007058 <_fflush_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b913      	cbnz	r3, 8007068 <_fflush_r+0x10>
 8007062:	2500      	movs	r5, #0
 8007064:	4628      	mov	r0, r5
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	b118      	cbz	r0, 8007072 <_fflush_r+0x1a>
 800706a:	6a03      	ldr	r3, [r0, #32]
 800706c:	b90b      	cbnz	r3, 8007072 <_fflush_r+0x1a>
 800706e:	f000 f8bb 	bl	80071e8 <__sinit>
 8007072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f3      	beq.n	8007062 <_fflush_r+0xa>
 800707a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800707c:	07d0      	lsls	r0, r2, #31
 800707e:	d404      	bmi.n	800708a <_fflush_r+0x32>
 8007080:	0599      	lsls	r1, r3, #22
 8007082:	d402      	bmi.n	800708a <_fflush_r+0x32>
 8007084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007086:	f000 fade 	bl	8007646 <__retarget_lock_acquire_recursive>
 800708a:	4628      	mov	r0, r5
 800708c:	4621      	mov	r1, r4
 800708e:	f7ff ff63 	bl	8006f58 <__sflush_r>
 8007092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007094:	4605      	mov	r5, r0
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d4e4      	bmi.n	8007064 <_fflush_r+0xc>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	059b      	lsls	r3, r3, #22
 800709e:	d4e1      	bmi.n	8007064 <_fflush_r+0xc>
 80070a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a2:	f000 fad1 	bl	8007648 <__retarget_lock_release_recursive>
 80070a6:	e7dd      	b.n	8007064 <_fflush_r+0xc>

080070a8 <fflush>:
 80070a8:	4601      	mov	r1, r0
 80070aa:	b920      	cbnz	r0, 80070b6 <fflush+0xe>
 80070ac:	4a04      	ldr	r2, [pc, #16]	@ (80070c0 <fflush+0x18>)
 80070ae:	4905      	ldr	r1, [pc, #20]	@ (80070c4 <fflush+0x1c>)
 80070b0:	4805      	ldr	r0, [pc, #20]	@ (80070c8 <fflush+0x20>)
 80070b2:	f000 b8b1 	b.w	8007218 <_fwalk_sglue>
 80070b6:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <fflush+0x24>)
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	f7ff bfcd 	b.w	8007058 <_fflush_r>
 80070be:	bf00      	nop
 80070c0:	20000038 	.word	0x20000038
 80070c4:	08007059 	.word	0x08007059
 80070c8:	20000048 	.word	0x20000048
 80070cc:	20000044 	.word	0x20000044

080070d0 <std>:
 80070d0:	2300      	movs	r3, #0
 80070d2:	b510      	push	{r4, lr}
 80070d4:	4604      	mov	r4, r0
 80070d6:	e9c0 3300 	strd	r3, r3, [r0]
 80070da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070de:	6083      	str	r3, [r0, #8]
 80070e0:	8181      	strh	r1, [r0, #12]
 80070e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80070e4:	81c2      	strh	r2, [r0, #14]
 80070e6:	6183      	str	r3, [r0, #24]
 80070e8:	4619      	mov	r1, r3
 80070ea:	2208      	movs	r2, #8
 80070ec:	305c      	adds	r0, #92	@ 0x5c
 80070ee:	f000 fa2d 	bl	800754c <memset>
 80070f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007128 <std+0x58>)
 80070f4:	6224      	str	r4, [r4, #32]
 80070f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80070f8:	4b0c      	ldr	r3, [pc, #48]	@ (800712c <std+0x5c>)
 80070fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <std+0x60>)
 80070fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007100:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <std+0x64>)
 8007102:	6323      	str	r3, [r4, #48]	@ 0x30
 8007104:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <std+0x68>)
 8007106:	429c      	cmp	r4, r3
 8007108:	d006      	beq.n	8007118 <std+0x48>
 800710a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800710e:	4294      	cmp	r4, r2
 8007110:	d002      	beq.n	8007118 <std+0x48>
 8007112:	33d0      	adds	r3, #208	@ 0xd0
 8007114:	429c      	cmp	r4, r3
 8007116:	d105      	bne.n	8007124 <std+0x54>
 8007118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f000 ba90 	b.w	8007644 <__retarget_lock_init_recursive>
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	0800739d 	.word	0x0800739d
 800712c:	080073bf 	.word	0x080073bf
 8007130:	080073f7 	.word	0x080073f7
 8007134:	0800741b 	.word	0x0800741b
 8007138:	200004c0 	.word	0x200004c0

0800713c <stdio_exit_handler>:
 800713c:	4a02      	ldr	r2, [pc, #8]	@ (8007148 <stdio_exit_handler+0xc>)
 800713e:	4903      	ldr	r1, [pc, #12]	@ (800714c <stdio_exit_handler+0x10>)
 8007140:	4803      	ldr	r0, [pc, #12]	@ (8007150 <stdio_exit_handler+0x14>)
 8007142:	f000 b869 	b.w	8007218 <_fwalk_sglue>
 8007146:	bf00      	nop
 8007148:	20000038 	.word	0x20000038
 800714c:	08007059 	.word	0x08007059
 8007150:	20000048 	.word	0x20000048

08007154 <cleanup_stdio>:
 8007154:	6841      	ldr	r1, [r0, #4]
 8007156:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <cleanup_stdio+0x34>)
 8007158:	b510      	push	{r4, lr}
 800715a:	4299      	cmp	r1, r3
 800715c:	4604      	mov	r4, r0
 800715e:	d001      	beq.n	8007164 <cleanup_stdio+0x10>
 8007160:	f7ff ff7a 	bl	8007058 <_fflush_r>
 8007164:	68a1      	ldr	r1, [r4, #8]
 8007166:	4b09      	ldr	r3, [pc, #36]	@ (800718c <cleanup_stdio+0x38>)
 8007168:	4299      	cmp	r1, r3
 800716a:	d002      	beq.n	8007172 <cleanup_stdio+0x1e>
 800716c:	4620      	mov	r0, r4
 800716e:	f7ff ff73 	bl	8007058 <_fflush_r>
 8007172:	68e1      	ldr	r1, [r4, #12]
 8007174:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <cleanup_stdio+0x3c>)
 8007176:	4299      	cmp	r1, r3
 8007178:	d004      	beq.n	8007184 <cleanup_stdio+0x30>
 800717a:	4620      	mov	r0, r4
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f7ff bf6a 	b.w	8007058 <_fflush_r>
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	200004c0 	.word	0x200004c0
 800718c:	20000528 	.word	0x20000528
 8007190:	20000590 	.word	0x20000590

08007194 <global_stdio_init.part.0>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <global_stdio_init.part.0+0x30>)
 8007198:	4c0b      	ldr	r4, [pc, #44]	@ (80071c8 <global_stdio_init.part.0+0x34>)
 800719a:	4a0c      	ldr	r2, [pc, #48]	@ (80071cc <global_stdio_init.part.0+0x38>)
 800719c:	4620      	mov	r0, r4
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	2104      	movs	r1, #4
 80071a2:	2200      	movs	r2, #0
 80071a4:	f7ff ff94 	bl	80070d0 <std>
 80071a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071ac:	2201      	movs	r2, #1
 80071ae:	2109      	movs	r1, #9
 80071b0:	f7ff ff8e 	bl	80070d0 <std>
 80071b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071b8:	2202      	movs	r2, #2
 80071ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071be:	2112      	movs	r1, #18
 80071c0:	f7ff bf86 	b.w	80070d0 <std>
 80071c4:	200005f8 	.word	0x200005f8
 80071c8:	200004c0 	.word	0x200004c0
 80071cc:	0800713d 	.word	0x0800713d

080071d0 <__sfp_lock_acquire>:
 80071d0:	4801      	ldr	r0, [pc, #4]	@ (80071d8 <__sfp_lock_acquire+0x8>)
 80071d2:	f000 ba38 	b.w	8007646 <__retarget_lock_acquire_recursive>
 80071d6:	bf00      	nop
 80071d8:	20000601 	.word	0x20000601

080071dc <__sfp_lock_release>:
 80071dc:	4801      	ldr	r0, [pc, #4]	@ (80071e4 <__sfp_lock_release+0x8>)
 80071de:	f000 ba33 	b.w	8007648 <__retarget_lock_release_recursive>
 80071e2:	bf00      	nop
 80071e4:	20000601 	.word	0x20000601

080071e8 <__sinit>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	f7ff fff0 	bl	80071d0 <__sfp_lock_acquire>
 80071f0:	6a23      	ldr	r3, [r4, #32]
 80071f2:	b11b      	cbz	r3, 80071fc <__sinit+0x14>
 80071f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f8:	f7ff bff0 	b.w	80071dc <__sfp_lock_release>
 80071fc:	4b04      	ldr	r3, [pc, #16]	@ (8007210 <__sinit+0x28>)
 80071fe:	6223      	str	r3, [r4, #32]
 8007200:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <__sinit+0x2c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f5      	bne.n	80071f4 <__sinit+0xc>
 8007208:	f7ff ffc4 	bl	8007194 <global_stdio_init.part.0>
 800720c:	e7f2      	b.n	80071f4 <__sinit+0xc>
 800720e:	bf00      	nop
 8007210:	08007155 	.word	0x08007155
 8007214:	200005f8 	.word	0x200005f8

08007218 <_fwalk_sglue>:
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800721c:	4607      	mov	r7, r0
 800721e:	4688      	mov	r8, r1
 8007220:	4614      	mov	r4, r2
 8007222:	2600      	movs	r6, #0
 8007224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007228:	f1b9 0901 	subs.w	r9, r9, #1
 800722c:	d505      	bpl.n	800723a <_fwalk_sglue+0x22>
 800722e:	6824      	ldr	r4, [r4, #0]
 8007230:	2c00      	cmp	r4, #0
 8007232:	d1f7      	bne.n	8007224 <_fwalk_sglue+0xc>
 8007234:	4630      	mov	r0, r6
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d907      	bls.n	8007250 <_fwalk_sglue+0x38>
 8007240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007244:	3301      	adds	r3, #1
 8007246:	d003      	beq.n	8007250 <_fwalk_sglue+0x38>
 8007248:	4629      	mov	r1, r5
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	4306      	orrs	r6, r0
 8007250:	3568      	adds	r5, #104	@ 0x68
 8007252:	e7e9      	b.n	8007228 <_fwalk_sglue+0x10>

08007254 <iprintf>:
 8007254:	b40f      	push	{r0, r1, r2, r3}
 8007256:	b507      	push	{r0, r1, r2, lr}
 8007258:	4906      	ldr	r1, [pc, #24]	@ (8007274 <iprintf+0x20>)
 800725a:	ab04      	add	r3, sp, #16
 800725c:	6808      	ldr	r0, [r1, #0]
 800725e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007262:	6881      	ldr	r1, [r0, #8]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	f001 fe4d 	bl	8008f04 <_vfiprintf_r>
 800726a:	b003      	add	sp, #12
 800726c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007270:	b004      	add	sp, #16
 8007272:	4770      	bx	lr
 8007274:	20000044 	.word	0x20000044

08007278 <_puts_r>:
 8007278:	6a03      	ldr	r3, [r0, #32]
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	4605      	mov	r5, r0
 800727e:	460e      	mov	r6, r1
 8007280:	6884      	ldr	r4, [r0, #8]
 8007282:	b90b      	cbnz	r3, 8007288 <_puts_r+0x10>
 8007284:	f7ff ffb0 	bl	80071e8 <__sinit>
 8007288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d405      	bmi.n	800729a <_puts_r+0x22>
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	0598      	lsls	r0, r3, #22
 8007292:	d402      	bmi.n	800729a <_puts_r+0x22>
 8007294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007296:	f000 f9d6 	bl	8007646 <__retarget_lock_acquire_recursive>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d502      	bpl.n	80072a6 <_puts_r+0x2e>
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d135      	bne.n	8007312 <_puts_r+0x9a>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f8f9 	bl	80074a0 <__swsetup_r>
 80072ae:	b380      	cbz	r0, 8007312 <_puts_r+0x9a>
 80072b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80072b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d405      	bmi.n	80072c6 <_puts_r+0x4e>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	059b      	lsls	r3, r3, #22
 80072be:	d402      	bmi.n	80072c6 <_puts_r+0x4e>
 80072c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072c2:	f000 f9c1 	bl	8007648 <__retarget_lock_release_recursive>
 80072c6:	4628      	mov	r0, r5
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da04      	bge.n	80072d8 <_puts_r+0x60>
 80072ce:	69a2      	ldr	r2, [r4, #24]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dc17      	bgt.n	8007304 <_puts_r+0x8c>
 80072d4:	290a      	cmp	r1, #10
 80072d6:	d015      	beq.n	8007304 <_puts_r+0x8c>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	6022      	str	r2, [r4, #0]
 80072de:	7019      	strb	r1, [r3, #0]
 80072e0:	68a3      	ldr	r3, [r4, #8]
 80072e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072e6:	3b01      	subs	r3, #1
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d1ed      	bne.n	80072ca <_puts_r+0x52>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da11      	bge.n	8007316 <_puts_r+0x9e>
 80072f2:	4622      	mov	r2, r4
 80072f4:	210a      	movs	r1, #10
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 f893 	bl	8007422 <__swbuf_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d0d7      	beq.n	80072b0 <_puts_r+0x38>
 8007300:	250a      	movs	r5, #10
 8007302:	e7d7      	b.n	80072b4 <_puts_r+0x3c>
 8007304:	4622      	mov	r2, r4
 8007306:	4628      	mov	r0, r5
 8007308:	f000 f88b 	bl	8007422 <__swbuf_r>
 800730c:	3001      	adds	r0, #1
 800730e:	d1e7      	bne.n	80072e0 <_puts_r+0x68>
 8007310:	e7ce      	b.n	80072b0 <_puts_r+0x38>
 8007312:	3e01      	subs	r6, #1
 8007314:	e7e4      	b.n	80072e0 <_puts_r+0x68>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	220a      	movs	r2, #10
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e7ee      	b.n	8007300 <_puts_r+0x88>
	...

08007324 <puts>:
 8007324:	4b02      	ldr	r3, [pc, #8]	@ (8007330 <puts+0xc>)
 8007326:	4601      	mov	r1, r0
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	f7ff bfa5 	b.w	8007278 <_puts_r>
 800732e:	bf00      	nop
 8007330:	20000044 	.word	0x20000044

08007334 <sniprintf>:
 8007334:	b40c      	push	{r2, r3}
 8007336:	b530      	push	{r4, r5, lr}
 8007338:	4b17      	ldr	r3, [pc, #92]	@ (8007398 <sniprintf+0x64>)
 800733a:	1e0c      	subs	r4, r1, #0
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	b09d      	sub	sp, #116	@ 0x74
 8007340:	da08      	bge.n	8007354 <sniprintf+0x20>
 8007342:	238b      	movs	r3, #139	@ 0x8b
 8007344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	b01d      	add	sp, #116	@ 0x74
 800734c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007350:	b002      	add	sp, #8
 8007352:	4770      	bx	lr
 8007354:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007358:	f8ad 3014 	strh.w	r3, [sp, #20]
 800735c:	bf0c      	ite	eq
 800735e:	4623      	moveq	r3, r4
 8007360:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800736c:	9002      	str	r0, [sp, #8]
 800736e:	9006      	str	r0, [sp, #24]
 8007370:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007374:	4628      	mov	r0, r5
 8007376:	ab21      	add	r3, sp, #132	@ 0x84
 8007378:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800737a:	a902      	add	r1, sp, #8
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	f001 fc9d 	bl	8008cbc <_svfiprintf_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	bfbc      	itt	lt
 8007386:	238b      	movlt	r3, #139	@ 0x8b
 8007388:	602b      	strlt	r3, [r5, #0]
 800738a:	2c00      	cmp	r4, #0
 800738c:	d0dd      	beq.n	800734a <sniprintf+0x16>
 800738e:	2200      	movs	r2, #0
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e7d9      	b.n	800734a <sniprintf+0x16>
 8007396:	bf00      	nop
 8007398:	20000044 	.word	0x20000044

0800739c <__sread>:
 800739c:	b510      	push	{r4, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	f000 f900 	bl	80075a8 <_read_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	bfab      	itete	ge
 80073ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073ae:	89a3      	ldrhlt	r3, [r4, #12]
 80073b0:	181b      	addge	r3, r3, r0
 80073b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073b6:	bfac      	ite	ge
 80073b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ba:	81a3      	strhlt	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__swrite>:
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	461f      	mov	r7, r3
 80073c4:	898b      	ldrh	r3, [r1, #12]
 80073c6:	4605      	mov	r5, r0
 80073c8:	05db      	lsls	r3, r3, #23
 80073ca:	460c      	mov	r4, r1
 80073cc:	4616      	mov	r6, r2
 80073ce:	d505      	bpl.n	80073dc <__swrite+0x1e>
 80073d0:	2302      	movs	r3, #2
 80073d2:	2200      	movs	r2, #0
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	f000 f8d4 	bl	8007584 <_lseek_r>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	4632      	mov	r2, r6
 80073e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	4628      	mov	r0, r5
 80073e8:	463b      	mov	r3, r7
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	f000 b8eb 	b.w	80075cc <_write_r>

080073f6 <__sseek>:
 80073f6:	b510      	push	{r4, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 f8c1 	bl	8007584 <_lseek_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	bf15      	itete	ne
 8007408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800740a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800740e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007412:	81a3      	strheq	r3, [r4, #12]
 8007414:	bf18      	it	ne
 8007416:	81a3      	strhne	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__sclose>:
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 b8a1 	b.w	8007564 <_close_r>

08007422 <__swbuf_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	460e      	mov	r6, r1
 8007426:	4614      	mov	r4, r2
 8007428:	4605      	mov	r5, r0
 800742a:	b118      	cbz	r0, 8007434 <__swbuf_r+0x12>
 800742c:	6a03      	ldr	r3, [r0, #32]
 800742e:	b90b      	cbnz	r3, 8007434 <__swbuf_r+0x12>
 8007430:	f7ff feda 	bl	80071e8 <__sinit>
 8007434:	69a3      	ldr	r3, [r4, #24]
 8007436:	60a3      	str	r3, [r4, #8]
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	071a      	lsls	r2, r3, #28
 800743c:	d501      	bpl.n	8007442 <__swbuf_r+0x20>
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	b943      	cbnz	r3, 8007454 <__swbuf_r+0x32>
 8007442:	4621      	mov	r1, r4
 8007444:	4628      	mov	r0, r5
 8007446:	f000 f82b 	bl	80074a0 <__swsetup_r>
 800744a:	b118      	cbz	r0, 8007454 <__swbuf_r+0x32>
 800744c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007450:	4638      	mov	r0, r7
 8007452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	6922      	ldr	r2, [r4, #16]
 8007458:	b2f6      	uxtb	r6, r6
 800745a:	1a98      	subs	r0, r3, r2
 800745c:	6963      	ldr	r3, [r4, #20]
 800745e:	4637      	mov	r7, r6
 8007460:	4283      	cmp	r3, r0
 8007462:	dc05      	bgt.n	8007470 <__swbuf_r+0x4e>
 8007464:	4621      	mov	r1, r4
 8007466:	4628      	mov	r0, r5
 8007468:	f7ff fdf6 	bl	8007058 <_fflush_r>
 800746c:	2800      	cmp	r0, #0
 800746e:	d1ed      	bne.n	800744c <__swbuf_r+0x2a>
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	3b01      	subs	r3, #1
 8007474:	60a3      	str	r3, [r4, #8]
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	6022      	str	r2, [r4, #0]
 800747c:	701e      	strb	r6, [r3, #0]
 800747e:	6962      	ldr	r2, [r4, #20]
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	429a      	cmp	r2, r3
 8007484:	d004      	beq.n	8007490 <__swbuf_r+0x6e>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d5e1      	bpl.n	8007450 <__swbuf_r+0x2e>
 800748c:	2e0a      	cmp	r6, #10
 800748e:	d1df      	bne.n	8007450 <__swbuf_r+0x2e>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f7ff fde0 	bl	8007058 <_fflush_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0d9      	beq.n	8007450 <__swbuf_r+0x2e>
 800749c:	e7d6      	b.n	800744c <__swbuf_r+0x2a>
	...

080074a0 <__swsetup_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <__swsetup_r+0xa8>)
 80074a4:	4605      	mov	r5, r0
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	460c      	mov	r4, r1
 80074aa:	b118      	cbz	r0, 80074b4 <__swsetup_r+0x14>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <__swsetup_r+0x14>
 80074b0:	f7ff fe9a 	bl	80071e8 <__sinit>
 80074b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b8:	0719      	lsls	r1, r3, #28
 80074ba:	d422      	bmi.n	8007502 <__swsetup_r+0x62>
 80074bc:	06da      	lsls	r2, r3, #27
 80074be:	d407      	bmi.n	80074d0 <__swsetup_r+0x30>
 80074c0:	2209      	movs	r2, #9
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e033      	b.n	8007538 <__swsetup_r+0x98>
 80074d0:	0758      	lsls	r0, r3, #29
 80074d2:	d512      	bpl.n	80074fa <__swsetup_r+0x5a>
 80074d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074d6:	b141      	cbz	r1, 80074ea <__swsetup_r+0x4a>
 80074d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <__swsetup_r+0x46>
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 ff11 	bl	8008308 <_free_r>
 80074e6:	2300      	movs	r3, #0
 80074e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f043 0308 	orr.w	r3, r3, #8
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	b94b      	cbnz	r3, 800751a <__swsetup_r+0x7a>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d003      	beq.n	800751a <__swsetup_r+0x7a>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f001 fe32 	bl	800917e <__smakebuf_r>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	f013 0201 	ands.w	r2, r3, #1
 8007522:	d00a      	beq.n	800753a <__swsetup_r+0x9a>
 8007524:	2200      	movs	r2, #0
 8007526:	60a2      	str	r2, [r4, #8]
 8007528:	6962      	ldr	r2, [r4, #20]
 800752a:	4252      	negs	r2, r2
 800752c:	61a2      	str	r2, [r4, #24]
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	b942      	cbnz	r2, 8007544 <__swsetup_r+0xa4>
 8007532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007536:	d1c5      	bne.n	80074c4 <__swsetup_r+0x24>
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	0799      	lsls	r1, r3, #30
 800753c:	bf58      	it	pl
 800753e:	6962      	ldrpl	r2, [r4, #20]
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	e7f4      	b.n	800752e <__swsetup_r+0x8e>
 8007544:	2000      	movs	r0, #0
 8007546:	e7f7      	b.n	8007538 <__swsetup_r+0x98>
 8007548:	20000044 	.word	0x20000044

0800754c <memset>:
 800754c:	4603      	mov	r3, r0
 800754e:	4402      	add	r2, r0
 8007550:	4293      	cmp	r3, r2
 8007552:	d100      	bne.n	8007556 <memset+0xa>
 8007554:	4770      	bx	lr
 8007556:	f803 1b01 	strb.w	r1, [r3], #1
 800755a:	e7f9      	b.n	8007550 <memset+0x4>

0800755c <_localeconv_r>:
 800755c:	4800      	ldr	r0, [pc, #0]	@ (8007560 <_localeconv_r+0x4>)
 800755e:	4770      	bx	lr
 8007560:	20000184 	.word	0x20000184

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2300      	movs	r3, #0
 8007568:	4d05      	ldr	r5, [pc, #20]	@ (8007580 <_close_r+0x1c>)
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fe fed0 	bl	8006314 <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	200005fc 	.word	0x200005fc

08007584 <_lseek_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	4611      	mov	r1, r2
 800758c:	2200      	movs	r2, #0
 800758e:	4d05      	ldr	r5, [pc, #20]	@ (80075a4 <_lseek_r+0x20>)
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7fe fe7f 	bl	8006296 <_lseek>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_lseek_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_lseek_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	200005fc 	.word	0x200005fc

080075a8 <_read_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	2200      	movs	r2, #0
 80075b2:	4d05      	ldr	r5, [pc, #20]	@ (80075c8 <_read_r+0x20>)
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7fe fe17 	bl	80061ea <_read>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_read_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_read_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	200005fc 	.word	0x200005fc

080075cc <_write_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	2200      	movs	r2, #0
 80075d6:	4d05      	ldr	r5, [pc, #20]	@ (80075ec <_write_r+0x20>)
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7fe fe6d 	bl	80062ba <_write>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_write_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_write_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	200005fc 	.word	0x200005fc

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	@ (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000044 	.word	0x20000044

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	2600      	movs	r6, #0
 8007600:	4d0c      	ldr	r5, [pc, #48]	@ (8007634 <__libc_init_array+0x38>)
 8007602:	4c0d      	ldr	r4, [pc, #52]	@ (8007638 <__libc_init_array+0x3c>)
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	f002 f962 	bl	80098d4 <_init>
 8007610:	2600      	movs	r6, #0
 8007612:	4d0a      	ldr	r5, [pc, #40]	@ (800763c <__libc_init_array+0x40>)
 8007614:	4c0a      	ldr	r4, [pc, #40]	@ (8007640 <__libc_init_array+0x44>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800a178 	.word	0x0800a178
 8007638:	0800a178 	.word	0x0800a178
 800763c:	0800a178 	.word	0x0800a178
 8007640:	0800a17c 	.word	0x0800a17c

08007644 <__retarget_lock_init_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_acquire_recursive>:
 8007646:	4770      	bx	lr

08007648 <__retarget_lock_release_recursive>:
 8007648:	4770      	bx	lr

0800764a <memchr>:
 800764a:	4603      	mov	r3, r0
 800764c:	b510      	push	{r4, lr}
 800764e:	b2c9      	uxtb	r1, r1
 8007650:	4402      	add	r2, r0
 8007652:	4293      	cmp	r3, r2
 8007654:	4618      	mov	r0, r3
 8007656:	d101      	bne.n	800765c <memchr+0x12>
 8007658:	2000      	movs	r0, #0
 800765a:	e003      	b.n	8007664 <memchr+0x1a>
 800765c:	7804      	ldrb	r4, [r0, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	428c      	cmp	r4, r1
 8007662:	d1f6      	bne.n	8007652 <memchr+0x8>
 8007664:	bd10      	pop	{r4, pc}

08007666 <quorem>:
 8007666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6903      	ldr	r3, [r0, #16]
 800766c:	690c      	ldr	r4, [r1, #16]
 800766e:	4607      	mov	r7, r0
 8007670:	42a3      	cmp	r3, r4
 8007672:	db7e      	blt.n	8007772 <quorem+0x10c>
 8007674:	3c01      	subs	r4, #1
 8007676:	00a3      	lsls	r3, r4, #2
 8007678:	f100 0514 	add.w	r5, r0, #20
 800767c:	f101 0814 	add.w	r8, r1, #20
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800768c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007690:	3301      	adds	r3, #1
 8007692:	429a      	cmp	r2, r3
 8007694:	fbb2 f6f3 	udiv	r6, r2, r3
 8007698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800769c:	d32e      	bcc.n	80076fc <quorem+0x96>
 800769e:	f04f 0a00 	mov.w	sl, #0
 80076a2:	46c4      	mov	ip, r8
 80076a4:	46ae      	mov	lr, r5
 80076a6:	46d3      	mov	fp, sl
 80076a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076ac:	b298      	uxth	r0, r3
 80076ae:	fb06 a000 	mla	r0, r6, r0, sl
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	0c02      	lsrs	r2, r0, #16
 80076b6:	fb06 2303 	mla	r3, r6, r3, r2
 80076ba:	f8de 2000 	ldr.w	r2, [lr]
 80076be:	b280      	uxth	r0, r0
 80076c0:	b292      	uxth	r2, r2
 80076c2:	1a12      	subs	r2, r2, r0
 80076c4:	445a      	add	r2, fp
 80076c6:	f8de 0000 	ldr.w	r0, [lr]
 80076ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076d8:	b292      	uxth	r2, r2
 80076da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076de:	45e1      	cmp	r9, ip
 80076e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076e4:	f84e 2b04 	str.w	r2, [lr], #4
 80076e8:	d2de      	bcs.n	80076a8 <quorem+0x42>
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	58eb      	ldr	r3, [r5, r3]
 80076ee:	b92b      	cbnz	r3, 80076fc <quorem+0x96>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	429d      	cmp	r5, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	d32f      	bcc.n	800775a <quorem+0xf4>
 80076fa:	613c      	str	r4, [r7, #16]
 80076fc:	4638      	mov	r0, r7
 80076fe:	f001 f979 	bl	80089f4 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	db25      	blt.n	8007752 <quorem+0xec>
 8007706:	4629      	mov	r1, r5
 8007708:	2000      	movs	r0, #0
 800770a:	f858 2b04 	ldr.w	r2, [r8], #4
 800770e:	f8d1 c000 	ldr.w	ip, [r1]
 8007712:	fa1f fe82 	uxth.w	lr, r2
 8007716:	fa1f f38c 	uxth.w	r3, ip
 800771a:	eba3 030e 	sub.w	r3, r3, lr
 800771e:	4403      	add	r3, r0
 8007720:	0c12      	lsrs	r2, r2, #16
 8007722:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007726:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800772a:	b29b      	uxth	r3, r3
 800772c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007730:	45c1      	cmp	r9, r8
 8007732:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007736:	f841 3b04 	str.w	r3, [r1], #4
 800773a:	d2e6      	bcs.n	800770a <quorem+0xa4>
 800773c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007744:	b922      	cbnz	r2, 8007750 <quorem+0xea>
 8007746:	3b04      	subs	r3, #4
 8007748:	429d      	cmp	r5, r3
 800774a:	461a      	mov	r2, r3
 800774c:	d30b      	bcc.n	8007766 <quorem+0x100>
 800774e:	613c      	str	r4, [r7, #16]
 8007750:	3601      	adds	r6, #1
 8007752:	4630      	mov	r0, r6
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	3b04      	subs	r3, #4
 800775e:	2a00      	cmp	r2, #0
 8007760:	d1cb      	bne.n	80076fa <quorem+0x94>
 8007762:	3c01      	subs	r4, #1
 8007764:	e7c6      	b.n	80076f4 <quorem+0x8e>
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	3b04      	subs	r3, #4
 800776a:	2a00      	cmp	r2, #0
 800776c:	d1ef      	bne.n	800774e <quorem+0xe8>
 800776e:	3c01      	subs	r4, #1
 8007770:	e7ea      	b.n	8007748 <quorem+0xe2>
 8007772:	2000      	movs	r0, #0
 8007774:	e7ee      	b.n	8007754 <quorem+0xee>
	...

08007778 <_dtoa_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	4614      	mov	r4, r2
 800777e:	461d      	mov	r5, r3
 8007780:	69c7      	ldr	r7, [r0, #28]
 8007782:	b097      	sub	sp, #92	@ 0x5c
 8007784:	4683      	mov	fp, r0
 8007786:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800778a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800778c:	b97f      	cbnz	r7, 80077ae <_dtoa_r+0x36>
 800778e:	2010      	movs	r0, #16
 8007790:	f000 fe02 	bl	8008398 <malloc>
 8007794:	4602      	mov	r2, r0
 8007796:	f8cb 001c 	str.w	r0, [fp, #28]
 800779a:	b920      	cbnz	r0, 80077a6 <_dtoa_r+0x2e>
 800779c:	21ef      	movs	r1, #239	@ 0xef
 800779e:	4ba8      	ldr	r3, [pc, #672]	@ (8007a40 <_dtoa_r+0x2c8>)
 80077a0:	48a8      	ldr	r0, [pc, #672]	@ (8007a44 <_dtoa_r+0x2cc>)
 80077a2:	f001 fd83 	bl	80092ac <__assert_func>
 80077a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077aa:	6007      	str	r7, [r0, #0]
 80077ac:	60c7      	str	r7, [r0, #12]
 80077ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	b159      	cbz	r1, 80077ce <_dtoa_r+0x56>
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	2301      	movs	r3, #1
 80077ba:	4093      	lsls	r3, r2
 80077bc:	604a      	str	r2, [r1, #4]
 80077be:	608b      	str	r3, [r1, #8]
 80077c0:	4658      	mov	r0, fp
 80077c2:	f000 fedf 	bl	8008584 <_Bfree>
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	1e2b      	subs	r3, r5, #0
 80077d0:	bfaf      	iteee	ge
 80077d2:	2300      	movge	r3, #0
 80077d4:	2201      	movlt	r2, #1
 80077d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077da:	9303      	strlt	r3, [sp, #12]
 80077dc:	bfa8      	it	ge
 80077de:	6033      	strge	r3, [r6, #0]
 80077e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077e4:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <_dtoa_r+0x2d0>)
 80077e6:	bfb8      	it	lt
 80077e8:	6032      	strlt	r2, [r6, #0]
 80077ea:	ea33 0308 	bics.w	r3, r3, r8
 80077ee:	d112      	bne.n	8007816 <_dtoa_r+0x9e>
 80077f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077fc:	4323      	orrs	r3, r4
 80077fe:	f000 8550 	beq.w	80082a2 <_dtoa_r+0xb2a>
 8007802:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007804:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007a4c <_dtoa_r+0x2d4>
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8552 	beq.w	80082b2 <_dtoa_r+0xb3a>
 800780e:	f10a 0303 	add.w	r3, sl, #3
 8007812:	f000 bd4c 	b.w	80082ae <_dtoa_r+0xb36>
 8007816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800781a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800781e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	f7f9 f8bf 	bl	80009a8 <__aeabi_dcmpeq>
 800782a:	4607      	mov	r7, r0
 800782c:	b158      	cbz	r0, 8007846 <_dtoa_r+0xce>
 800782e:	2301      	movs	r3, #1
 8007830:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007836:	b113      	cbz	r3, 800783e <_dtoa_r+0xc6>
 8007838:	4b85      	ldr	r3, [pc, #532]	@ (8007a50 <_dtoa_r+0x2d8>)
 800783a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007a54 <_dtoa_r+0x2dc>
 8007842:	f000 bd36 	b.w	80082b2 <_dtoa_r+0xb3a>
 8007846:	ab14      	add	r3, sp, #80	@ 0x50
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	ab15      	add	r3, sp, #84	@ 0x54
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4658      	mov	r0, fp
 8007850:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007854:	f001 f97e 	bl	8008b54 <__d2b>
 8007858:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800785c:	4681      	mov	r9, r0
 800785e:	2e00      	cmp	r6, #0
 8007860:	d077      	beq.n	8007952 <_dtoa_r+0x1da>
 8007862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007868:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800786c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007870:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007874:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007878:	9712      	str	r7, [sp, #72]	@ 0x48
 800787a:	4619      	mov	r1, r3
 800787c:	2200      	movs	r2, #0
 800787e:	4b76      	ldr	r3, [pc, #472]	@ (8007a58 <_dtoa_r+0x2e0>)
 8007880:	f7f8 fc72 	bl	8000168 <__aeabi_dsub>
 8007884:	a368      	add	r3, pc, #416	@ (adr r3, 8007a28 <_dtoa_r+0x2b0>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fe25 	bl	80004d8 <__aeabi_dmul>
 800788e:	a368      	add	r3, pc, #416	@ (adr r3, 8007a30 <_dtoa_r+0x2b8>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f8 fc6a 	bl	800016c <__adddf3>
 8007898:	4604      	mov	r4, r0
 800789a:	4630      	mov	r0, r6
 800789c:	460d      	mov	r5, r1
 800789e:	f7f8 fdb1 	bl	8000404 <__aeabi_i2d>
 80078a2:	a365      	add	r3, pc, #404	@ (adr r3, 8007a38 <_dtoa_r+0x2c0>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fe16 	bl	80004d8 <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fc5a 	bl	800016c <__adddf3>
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	f7f9 f8bc 	bl	8000a38 <__aeabi_d2iz>
 80078c0:	2200      	movs	r2, #0
 80078c2:	4607      	mov	r7, r0
 80078c4:	2300      	movs	r3, #0
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 f877 	bl	80009bc <__aeabi_dcmplt>
 80078ce:	b140      	cbz	r0, 80078e2 <_dtoa_r+0x16a>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7f8 fd97 	bl	8000404 <__aeabi_i2d>
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	f7f9 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80078de:	b900      	cbnz	r0, 80078e2 <_dtoa_r+0x16a>
 80078e0:	3f01      	subs	r7, #1
 80078e2:	2f16      	cmp	r7, #22
 80078e4:	d853      	bhi.n	800798e <_dtoa_r+0x216>
 80078e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ea:	4b5c      	ldr	r3, [pc, #368]	@ (8007a5c <_dtoa_r+0x2e4>)
 80078ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f9 f862 	bl	80009bc <__aeabi_dcmplt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d04a      	beq.n	8007992 <_dtoa_r+0x21a>
 80078fc:	2300      	movs	r3, #0
 80078fe:	3f01      	subs	r7, #1
 8007900:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007902:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007904:	1b9b      	subs	r3, r3, r6
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	bf46      	itte	mi
 800790a:	f1c3 0801 	rsbmi	r8, r3, #1
 800790e:	2300      	movmi	r3, #0
 8007910:	f04f 0800 	movpl.w	r8, #0
 8007914:	9209      	str	r2, [sp, #36]	@ 0x24
 8007916:	bf48      	it	mi
 8007918:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800791a:	2f00      	cmp	r7, #0
 800791c:	db3b      	blt.n	8007996 <_dtoa_r+0x21e>
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	970e      	str	r7, [sp, #56]	@ 0x38
 8007922:	443b      	add	r3, r7
 8007924:	9309      	str	r3, [sp, #36]	@ 0x24
 8007926:	2300      	movs	r3, #0
 8007928:	930a      	str	r3, [sp, #40]	@ 0x28
 800792a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800792c:	2b09      	cmp	r3, #9
 800792e:	d866      	bhi.n	80079fe <_dtoa_r+0x286>
 8007930:	2b05      	cmp	r3, #5
 8007932:	bfc4      	itt	gt
 8007934:	3b04      	subgt	r3, #4
 8007936:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007938:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800793a:	bfc8      	it	gt
 800793c:	2400      	movgt	r4, #0
 800793e:	f1a3 0302 	sub.w	r3, r3, #2
 8007942:	bfd8      	it	le
 8007944:	2401      	movle	r4, #1
 8007946:	2b03      	cmp	r3, #3
 8007948:	d864      	bhi.n	8007a14 <_dtoa_r+0x29c>
 800794a:	e8df f003 	tbb	[pc, r3]
 800794e:	382b      	.short	0x382b
 8007950:	5636      	.short	0x5636
 8007952:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007956:	441e      	add	r6, r3
 8007958:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800795c:	2b20      	cmp	r3, #32
 800795e:	bfc1      	itttt	gt
 8007960:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007964:	fa08 f803 	lslgt.w	r8, r8, r3
 8007968:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800796c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007970:	bfd6      	itet	le
 8007972:	f1c3 0320 	rsble	r3, r3, #32
 8007976:	ea48 0003 	orrgt.w	r0, r8, r3
 800797a:	fa04 f003 	lslle.w	r0, r4, r3
 800797e:	f7f8 fd31 	bl	80003e4 <__aeabi_ui2d>
 8007982:	2201      	movs	r2, #1
 8007984:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007988:	3e01      	subs	r6, #1
 800798a:	9212      	str	r2, [sp, #72]	@ 0x48
 800798c:	e775      	b.n	800787a <_dtoa_r+0x102>
 800798e:	2301      	movs	r3, #1
 8007990:	e7b6      	b.n	8007900 <_dtoa_r+0x188>
 8007992:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007994:	e7b5      	b.n	8007902 <_dtoa_r+0x18a>
 8007996:	427b      	negs	r3, r7
 8007998:	930a      	str	r3, [sp, #40]	@ 0x28
 800799a:	2300      	movs	r3, #0
 800799c:	eba8 0807 	sub.w	r8, r8, r7
 80079a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80079a2:	e7c2      	b.n	800792a <_dtoa_r+0x1b2>
 80079a4:	2300      	movs	r3, #0
 80079a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dc35      	bgt.n	8007a1a <_dtoa_r+0x2a2>
 80079ae:	2301      	movs	r3, #1
 80079b0:	461a      	mov	r2, r3
 80079b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80079b8:	e00b      	b.n	80079d2 <_dtoa_r+0x25a>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e7f3      	b.n	80079a6 <_dtoa_r+0x22e>
 80079be:	2300      	movs	r3, #0
 80079c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079c4:	18fb      	adds	r3, r7, r3
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	3301      	adds	r3, #1
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	bfb8      	it	lt
 80079d0:	2301      	movlt	r3, #1
 80079d2:	2100      	movs	r1, #0
 80079d4:	2204      	movs	r2, #4
 80079d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079da:	f102 0514 	add.w	r5, r2, #20
 80079de:	429d      	cmp	r5, r3
 80079e0:	d91f      	bls.n	8007a22 <_dtoa_r+0x2aa>
 80079e2:	6041      	str	r1, [r0, #4]
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 fd8d 	bl	8008504 <_Balloc>
 80079ea:	4682      	mov	sl, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d139      	bne.n	8007a64 <_dtoa_r+0x2ec>
 80079f0:	4602      	mov	r2, r0
 80079f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80079f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a60 <_dtoa_r+0x2e8>)
 80079f8:	e6d2      	b.n	80077a0 <_dtoa_r+0x28>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7e0      	b.n	80079c0 <_dtoa_r+0x248>
 80079fe:	2401      	movs	r4, #1
 8007a00:	2300      	movs	r3, #0
 8007a02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a04:	9320      	str	r3, [sp, #128]	@ 0x80
 8007a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a10:	2312      	movs	r3, #18
 8007a12:	e7d0      	b.n	80079b6 <_dtoa_r+0x23e>
 8007a14:	2301      	movs	r3, #1
 8007a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a18:	e7f5      	b.n	8007a06 <_dtoa_r+0x28e>
 8007a1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a20:	e7d7      	b.n	80079d2 <_dtoa_r+0x25a>
 8007a22:	3101      	adds	r1, #1
 8007a24:	0052      	lsls	r2, r2, #1
 8007a26:	e7d8      	b.n	80079da <_dtoa_r+0x262>
 8007a28:	636f4361 	.word	0x636f4361
 8007a2c:	3fd287a7 	.word	0x3fd287a7
 8007a30:	8b60c8b3 	.word	0x8b60c8b3
 8007a34:	3fc68a28 	.word	0x3fc68a28
 8007a38:	509f79fb 	.word	0x509f79fb
 8007a3c:	3fd34413 	.word	0x3fd34413
 8007a40:	08009e0b 	.word	0x08009e0b
 8007a44:	08009e22 	.word	0x08009e22
 8007a48:	7ff00000 	.word	0x7ff00000
 8007a4c:	08009e07 	.word	0x08009e07
 8007a50:	08009ddb 	.word	0x08009ddb
 8007a54:	08009dda 	.word	0x08009dda
 8007a58:	3ff80000 	.word	0x3ff80000
 8007a5c:	08009f18 	.word	0x08009f18
 8007a60:	08009e7a 	.word	0x08009e7a
 8007a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	9b07      	ldr	r3, [sp, #28]
 8007a6c:	2b0e      	cmp	r3, #14
 8007a6e:	f200 80a4 	bhi.w	8007bba <_dtoa_r+0x442>
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	f000 80a1 	beq.w	8007bba <_dtoa_r+0x442>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	dd33      	ble.n	8007ae4 <_dtoa_r+0x36c>
 8007a7c:	4b86      	ldr	r3, [pc, #536]	@ (8007c98 <_dtoa_r+0x520>)
 8007a7e:	f007 020f 	and.w	r2, r7, #15
 8007a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a86:	05f8      	lsls	r0, r7, #23
 8007a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a94:	d516      	bpl.n	8007ac4 <_dtoa_r+0x34c>
 8007a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a9a:	4b80      	ldr	r3, [pc, #512]	@ (8007c9c <_dtoa_r+0x524>)
 8007a9c:	2603      	movs	r6, #3
 8007a9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aa2:	f7f8 fe43 	bl	800072c <__aeabi_ddiv>
 8007aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aaa:	f004 040f 	and.w	r4, r4, #15
 8007aae:	4d7b      	ldr	r5, [pc, #492]	@ (8007c9c <_dtoa_r+0x524>)
 8007ab0:	b954      	cbnz	r4, 8007ac8 <_dtoa_r+0x350>
 8007ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aba:	f7f8 fe37 	bl	800072c <__aeabi_ddiv>
 8007abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac2:	e028      	b.n	8007b16 <_dtoa_r+0x39e>
 8007ac4:	2602      	movs	r6, #2
 8007ac6:	e7f2      	b.n	8007aae <_dtoa_r+0x336>
 8007ac8:	07e1      	lsls	r1, r4, #31
 8007aca:	d508      	bpl.n	8007ade <_dtoa_r+0x366>
 8007acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ad4:	f7f8 fd00 	bl	80004d8 <__aeabi_dmul>
 8007ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007adc:	3601      	adds	r6, #1
 8007ade:	1064      	asrs	r4, r4, #1
 8007ae0:	3508      	adds	r5, #8
 8007ae2:	e7e5      	b.n	8007ab0 <_dtoa_r+0x338>
 8007ae4:	f000 80d2 	beq.w	8007c8c <_dtoa_r+0x514>
 8007ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aec:	427c      	negs	r4, r7
 8007aee:	4b6a      	ldr	r3, [pc, #424]	@ (8007c98 <_dtoa_r+0x520>)
 8007af0:	f004 020f 	and.w	r2, r4, #15
 8007af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f7f8 fcec 	bl	80004d8 <__aeabi_dmul>
 8007b00:	2602      	movs	r6, #2
 8007b02:	2300      	movs	r3, #0
 8007b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b08:	4d64      	ldr	r5, [pc, #400]	@ (8007c9c <_dtoa_r+0x524>)
 8007b0a:	1124      	asrs	r4, r4, #4
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	f040 80b2 	bne.w	8007c76 <_dtoa_r+0x4fe>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1d3      	bne.n	8007abe <_dtoa_r+0x346>
 8007b16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80b7 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b22:	2200      	movs	r2, #0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	4b5d      	ldr	r3, [pc, #372]	@ (8007ca0 <_dtoa_r+0x528>)
 8007b2a:	f7f8 ff47 	bl	80009bc <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f000 80ae 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80aa 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b3c:	9b08      	ldr	r3, [sp, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd37      	ble.n	8007bb2 <_dtoa_r+0x43a>
 8007b42:	1e7b      	subs	r3, r7, #1
 8007b44:	4620      	mov	r0, r4
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4b55      	ldr	r3, [pc, #340]	@ (8007ca4 <_dtoa_r+0x52c>)
 8007b4e:	f7f8 fcc3 	bl	80004d8 <__aeabi_dmul>
 8007b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b56:	9c08      	ldr	r4, [sp, #32]
 8007b58:	3601      	adds	r6, #1
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7f8 fc52 	bl	8000404 <__aeabi_i2d>
 8007b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b64:	f7f8 fcb8 	bl	80004d8 <__aeabi_dmul>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca8 <_dtoa_r+0x530>)
 8007b6c:	f7f8 fafe 	bl	800016c <__adddf3>
 8007b70:	4605      	mov	r5, r0
 8007b72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b76:	2c00      	cmp	r4, #0
 8007b78:	f040 809a 	bne.w	8007cb0 <_dtoa_r+0x538>
 8007b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	4b4a      	ldr	r3, [pc, #296]	@ (8007cac <_dtoa_r+0x534>)
 8007b84:	f7f8 faf0 	bl	8000168 <__aeabi_dsub>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b90:	462a      	mov	r2, r5
 8007b92:	4633      	mov	r3, r6
 8007b94:	f7f8 ff30 	bl	80009f8 <__aeabi_dcmpgt>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f040 828e 	bne.w	80080ba <_dtoa_r+0x942>
 8007b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ba8:	f7f8 ff08 	bl	80009bc <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 8127 	bne.w	8007e00 <_dtoa_r+0x688>
 8007bb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f2c0 8163 	blt.w	8007e88 <_dtoa_r+0x710>
 8007bc2:	2f0e      	cmp	r7, #14
 8007bc4:	f300 8160 	bgt.w	8007e88 <_dtoa_r+0x710>
 8007bc8:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <_dtoa_r+0x520>)
 8007bca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da03      	bge.n	8007be4 <_dtoa_r+0x46c>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f340 8100 	ble.w	8007de4 <_dtoa_r+0x66c>
 8007be4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007be8:	4656      	mov	r6, sl
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fd9b 	bl	800072c <__aeabi_ddiv>
 8007bf6:	f7f8 ff1f 	bl	8000a38 <__aeabi_d2iz>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	f7f8 fc02 	bl	8000404 <__aeabi_i2d>
 8007c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c04:	f7f8 fc68 	bl	80004d8 <__aeabi_dmul>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7f8 faaa 	bl	8000168 <__aeabi_dsub>
 8007c14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c18:	9d07      	ldr	r5, [sp, #28]
 8007c1a:	f806 4b01 	strb.w	r4, [r6], #1
 8007c1e:	eba6 040a 	sub.w	r4, r6, sl
 8007c22:	42a5      	cmp	r5, r4
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	f040 8116 	bne.w	8007e58 <_dtoa_r+0x6e0>
 8007c2c:	f7f8 fa9e 	bl	800016c <__adddf3>
 8007c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c34:	4604      	mov	r4, r0
 8007c36:	460d      	mov	r5, r1
 8007c38:	f7f8 fede 	bl	80009f8 <__aeabi_dcmpgt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 80f8 	bne.w	8007e32 <_dtoa_r+0x6ba>
 8007c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8007c4e:	b118      	cbz	r0, 8007c58 <_dtoa_r+0x4e0>
 8007c50:	f018 0f01 	tst.w	r8, #1
 8007c54:	f040 80ed 	bne.w	8007e32 <_dtoa_r+0x6ba>
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4658      	mov	r0, fp
 8007c5c:	f000 fc92 	bl	8008584 <_Bfree>
 8007c60:	2300      	movs	r3, #0
 8007c62:	7033      	strb	r3, [r6, #0]
 8007c64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c66:	3701      	adds	r7, #1
 8007c68:	601f      	str	r7, [r3, #0]
 8007c6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8320 	beq.w	80082b2 <_dtoa_r+0xb3a>
 8007c72:	601e      	str	r6, [r3, #0]
 8007c74:	e31d      	b.n	80082b2 <_dtoa_r+0xb3a>
 8007c76:	07e2      	lsls	r2, r4, #31
 8007c78:	d505      	bpl.n	8007c86 <_dtoa_r+0x50e>
 8007c7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c7e:	f7f8 fc2b 	bl	80004d8 <__aeabi_dmul>
 8007c82:	2301      	movs	r3, #1
 8007c84:	3601      	adds	r6, #1
 8007c86:	1064      	asrs	r4, r4, #1
 8007c88:	3508      	adds	r5, #8
 8007c8a:	e73f      	b.n	8007b0c <_dtoa_r+0x394>
 8007c8c:	2602      	movs	r6, #2
 8007c8e:	e742      	b.n	8007b16 <_dtoa_r+0x39e>
 8007c90:	9c07      	ldr	r4, [sp, #28]
 8007c92:	9704      	str	r7, [sp, #16]
 8007c94:	e761      	b.n	8007b5a <_dtoa_r+0x3e2>
 8007c96:	bf00      	nop
 8007c98:	08009f18 	.word	0x08009f18
 8007c9c:	08009ef0 	.word	0x08009ef0
 8007ca0:	3ff00000 	.word	0x3ff00000
 8007ca4:	40240000 	.word	0x40240000
 8007ca8:	401c0000 	.word	0x401c0000
 8007cac:	40140000 	.word	0x40140000
 8007cb0:	4b70      	ldr	r3, [pc, #448]	@ (8007e74 <_dtoa_r+0x6fc>)
 8007cb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cbc:	4454      	add	r4, sl
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d045      	beq.n	8007d4e <_dtoa_r+0x5d6>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	496c      	ldr	r1, [pc, #432]	@ (8007e78 <_dtoa_r+0x700>)
 8007cc6:	f7f8 fd31 	bl	800072c <__aeabi_ddiv>
 8007cca:	4633      	mov	r3, r6
 8007ccc:	462a      	mov	r2, r5
 8007cce:	f7f8 fa4b 	bl	8000168 <__aeabi_dsub>
 8007cd2:	4656      	mov	r6, sl
 8007cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cdc:	f7f8 feac 	bl	8000a38 <__aeabi_d2iz>
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	f7f8 fb8f 	bl	8000404 <__aeabi_i2d>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cee:	f7f8 fa3b 	bl	8000168 <__aeabi_dsub>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	3530      	adds	r5, #48	@ 0x30
 8007cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d00:	f806 5b01 	strb.w	r5, [r6], #1
 8007d04:	f7f8 fe5a 	bl	80009bc <__aeabi_dcmplt>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d163      	bne.n	8007dd4 <_dtoa_r+0x65c>
 8007d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d10:	2000      	movs	r0, #0
 8007d12:	495a      	ldr	r1, [pc, #360]	@ (8007e7c <_dtoa_r+0x704>)
 8007d14:	f7f8 fa28 	bl	8000168 <__aeabi_dsub>
 8007d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d1c:	f7f8 fe4e 	bl	80009bc <__aeabi_dcmplt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f040 8087 	bne.w	8007e34 <_dtoa_r+0x6bc>
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	f43f af43 	beq.w	8007bb2 <_dtoa_r+0x43a>
 8007d2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d30:	2200      	movs	r2, #0
 8007d32:	4b53      	ldr	r3, [pc, #332]	@ (8007e80 <_dtoa_r+0x708>)
 8007d34:	f7f8 fbd0 	bl	80004d8 <__aeabi_dmul>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d42:	4b4f      	ldr	r3, [pc, #316]	@ (8007e80 <_dtoa_r+0x708>)
 8007d44:	f7f8 fbc8 	bl	80004d8 <__aeabi_dmul>
 8007d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d4c:	e7c4      	b.n	8007cd8 <_dtoa_r+0x560>
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	f7f8 fbc1 	bl	80004d8 <__aeabi_dmul>
 8007d56:	4656      	mov	r6, sl
 8007d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d62:	f7f8 fe69 	bl	8000a38 <__aeabi_d2iz>
 8007d66:	4605      	mov	r5, r0
 8007d68:	f7f8 fb4c 	bl	8000404 <__aeabi_i2d>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d74:	f7f8 f9f8 	bl	8000168 <__aeabi_dsub>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	3530      	adds	r5, #48	@ 0x30
 8007d7e:	f806 5b01 	strb.w	r5, [r6], #1
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	d124      	bne.n	8007dd8 <_dtoa_r+0x660>
 8007d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d92:	4b39      	ldr	r3, [pc, #228]	@ (8007e78 <_dtoa_r+0x700>)
 8007d94:	f7f8 f9ea 	bl	800016c <__adddf3>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da0:	f7f8 fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d145      	bne.n	8007e34 <_dtoa_r+0x6bc>
 8007da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dac:	2000      	movs	r0, #0
 8007dae:	4932      	ldr	r1, [pc, #200]	@ (8007e78 <_dtoa_r+0x700>)
 8007db0:	f7f8 f9da 	bl	8000168 <__aeabi_dsub>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dbc:	f7f8 fdfe 	bl	80009bc <__aeabi_dcmplt>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f43f aef6 	beq.w	8007bb2 <_dtoa_r+0x43a>
 8007dc6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dc8:	1e73      	subs	r3, r6, #1
 8007dca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dd0:	2b30      	cmp	r3, #48	@ 0x30
 8007dd2:	d0f8      	beq.n	8007dc6 <_dtoa_r+0x64e>
 8007dd4:	9f04      	ldr	r7, [sp, #16]
 8007dd6:	e73f      	b.n	8007c58 <_dtoa_r+0x4e0>
 8007dd8:	4b29      	ldr	r3, [pc, #164]	@ (8007e80 <_dtoa_r+0x708>)
 8007dda:	f7f8 fb7d 	bl	80004d8 <__aeabi_dmul>
 8007dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de2:	e7bc      	b.n	8007d5e <_dtoa_r+0x5e6>
 8007de4:	d10c      	bne.n	8007e00 <_dtoa_r+0x688>
 8007de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dea:	2200      	movs	r2, #0
 8007dec:	4b25      	ldr	r3, [pc, #148]	@ (8007e84 <_dtoa_r+0x70c>)
 8007dee:	f7f8 fb73 	bl	80004d8 <__aeabi_dmul>
 8007df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df6:	f7f8 fdf5 	bl	80009e4 <__aeabi_dcmpge>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f000 815b 	beq.w	80080b6 <_dtoa_r+0x93e>
 8007e00:	2400      	movs	r4, #0
 8007e02:	4625      	mov	r5, r4
 8007e04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e06:	4656      	mov	r6, sl
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	2700      	movs	r7, #0
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4658      	mov	r0, fp
 8007e12:	f000 fbb7 	bl	8008584 <_Bfree>
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	d0dc      	beq.n	8007dd4 <_dtoa_r+0x65c>
 8007e1a:	b12f      	cbz	r7, 8007e28 <_dtoa_r+0x6b0>
 8007e1c:	42af      	cmp	r7, r5
 8007e1e:	d003      	beq.n	8007e28 <_dtoa_r+0x6b0>
 8007e20:	4639      	mov	r1, r7
 8007e22:	4658      	mov	r0, fp
 8007e24:	f000 fbae 	bl	8008584 <_Bfree>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fbaa 	bl	8008584 <_Bfree>
 8007e30:	e7d0      	b.n	8007dd4 <_dtoa_r+0x65c>
 8007e32:	9704      	str	r7, [sp, #16]
 8007e34:	4633      	mov	r3, r6
 8007e36:	461e      	mov	r6, r3
 8007e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3c:	2a39      	cmp	r2, #57	@ 0x39
 8007e3e:	d107      	bne.n	8007e50 <_dtoa_r+0x6d8>
 8007e40:	459a      	cmp	sl, r3
 8007e42:	d1f8      	bne.n	8007e36 <_dtoa_r+0x6be>
 8007e44:	9a04      	ldr	r2, [sp, #16]
 8007e46:	3201      	adds	r2, #1
 8007e48:	9204      	str	r2, [sp, #16]
 8007e4a:	2230      	movs	r2, #48	@ 0x30
 8007e4c:	f88a 2000 	strb.w	r2, [sl]
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	3201      	adds	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	e7bd      	b.n	8007dd4 <_dtoa_r+0x65c>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <_dtoa_r+0x708>)
 8007e5c:	f7f8 fb3c 	bl	80004d8 <__aeabi_dmul>
 8007e60:	2200      	movs	r2, #0
 8007e62:	2300      	movs	r3, #0
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	f7f8 fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f43f aebc 	beq.w	8007bea <_dtoa_r+0x472>
 8007e72:	e6f1      	b.n	8007c58 <_dtoa_r+0x4e0>
 8007e74:	08009f18 	.word	0x08009f18
 8007e78:	3fe00000 	.word	0x3fe00000
 8007e7c:	3ff00000 	.word	0x3ff00000
 8007e80:	40240000 	.word	0x40240000
 8007e84:	40140000 	.word	0x40140000
 8007e88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80db 	beq.w	8008046 <_dtoa_r+0x8ce>
 8007e90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	f300 80bf 	bgt.w	8008016 <_dtoa_r+0x89e>
 8007e98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	f000 80b7 	beq.w	800800e <_dtoa_r+0x896>
 8007ea0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ea4:	4646      	mov	r6, r8
 8007ea6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eaa:	2101      	movs	r1, #1
 8007eac:	441a      	add	r2, r3
 8007eae:	4658      	mov	r0, fp
 8007eb0:	4498      	add	r8, r3
 8007eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eb4:	f000 fc1a 	bl	80086ec <__i2b>
 8007eb8:	4605      	mov	r5, r0
 8007eba:	b15e      	cbz	r6, 8007ed4 <_dtoa_r+0x75c>
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd08      	ble.n	8007ed4 <_dtoa_r+0x75c>
 8007ec2:	42b3      	cmp	r3, r6
 8007ec4:	bfa8      	it	ge
 8007ec6:	4633      	movge	r3, r6
 8007ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eca:	eba8 0803 	sub.w	r8, r8, r3
 8007ece:	1af6      	subs	r6, r6, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ed6:	b1f3      	cbz	r3, 8007f16 <_dtoa_r+0x79e>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80b7 	beq.w	800804e <_dtoa_r+0x8d6>
 8007ee0:	b18c      	cbz	r4, 8007f06 <_dtoa_r+0x78e>
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fcbe 	bl	8008868 <__pow5mult>
 8007eec:	464a      	mov	r2, r9
 8007eee:	4601      	mov	r1, r0
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	f000 fc10 	bl	8008718 <__multiply>
 8007ef8:	4649      	mov	r1, r9
 8007efa:	9004      	str	r0, [sp, #16]
 8007efc:	4658      	mov	r0, fp
 8007efe:	f000 fb41 	bl	8008584 <_Bfree>
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	4699      	mov	r9, r3
 8007f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f08:	1b1a      	subs	r2, r3, r4
 8007f0a:	d004      	beq.n	8007f16 <_dtoa_r+0x79e>
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 fcaa 	bl	8008868 <__pow5mult>
 8007f14:	4681      	mov	r9, r0
 8007f16:	2101      	movs	r1, #1
 8007f18:	4658      	mov	r0, fp
 8007f1a:	f000 fbe7 	bl	80086ec <__i2b>
 8007f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f20:	4604      	mov	r4, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 81c9 	beq.w	80082ba <_dtoa_r+0xb42>
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 fc9b 	bl	8008868 <__pow5mult>
 8007f32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f34:	4604      	mov	r4, r0
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	f300 808f 	bgt.w	800805a <_dtoa_r+0x8e2>
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f040 8087 	bne.w	8008052 <_dtoa_r+0x8da>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 8083 	bne.w	8008056 <_dtoa_r+0x8de>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f56:	0d1b      	lsrs	r3, r3, #20
 8007f58:	051b      	lsls	r3, r3, #20
 8007f5a:	b12b      	cbz	r3, 8007f68 <_dtoa_r+0x7f0>
 8007f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5e:	f108 0801 	add.w	r8, r8, #1
 8007f62:	3301      	adds	r3, #1
 8007f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f66:	2301      	movs	r3, #1
 8007f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 81aa 	beq.w	80082c6 <_dtoa_r+0xb4e>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f78:	6918      	ldr	r0, [r3, #16]
 8007f7a:	f000 fb6b 	bl	8008654 <__hi0bits>
 8007f7e:	f1c0 0020 	rsb	r0, r0, #32
 8007f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f84:	4418      	add	r0, r3
 8007f86:	f010 001f 	ands.w	r0, r0, #31
 8007f8a:	d071      	beq.n	8008070 <_dtoa_r+0x8f8>
 8007f8c:	f1c0 0320 	rsb	r3, r0, #32
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	dd65      	ble.n	8008060 <_dtoa_r+0x8e8>
 8007f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f96:	f1c0 001c 	rsb	r0, r0, #28
 8007f9a:	4403      	add	r3, r0
 8007f9c:	4480      	add	r8, r0
 8007f9e:	4406      	add	r6, r0
 8007fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa2:	f1b8 0f00 	cmp.w	r8, #0
 8007fa6:	dd05      	ble.n	8007fb4 <_dtoa_r+0x83c>
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4642      	mov	r2, r8
 8007fac:	4658      	mov	r0, fp
 8007fae:	f000 fcb5 	bl	800891c <__lshift>
 8007fb2:	4681      	mov	r9, r0
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd05      	ble.n	8007fc6 <_dtoa_r+0x84e>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4658      	mov	r0, fp
 8007fc0:	f000 fcac 	bl	800891c <__lshift>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d053      	beq.n	8008074 <_dtoa_r+0x8fc>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4648      	mov	r0, r9
 8007fd0:	f000 fd10 	bl	80089f4 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	da4d      	bge.n	8008074 <_dtoa_r+0x8fc>
 8007fd8:	1e7b      	subs	r3, r7, #1
 8007fda:	4649      	mov	r1, r9
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	220a      	movs	r2, #10
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f000 faf0 	bl	80085c8 <__multadd>
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fea:	4681      	mov	r9, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 816c 	beq.w	80082ca <_dtoa_r+0xb52>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4658      	mov	r0, fp
 8007ffa:	f000 fae5 	bl	80085c8 <__multadd>
 8007ffe:	9b08      	ldr	r3, [sp, #32]
 8008000:	4605      	mov	r5, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	dc61      	bgt.n	80080ca <_dtoa_r+0x952>
 8008006:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008008:	2b02      	cmp	r3, #2
 800800a:	dc3b      	bgt.n	8008084 <_dtoa_r+0x90c>
 800800c:	e05d      	b.n	80080ca <_dtoa_r+0x952>
 800800e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008010:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008014:	e746      	b.n	8007ea4 <_dtoa_r+0x72c>
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	1e5c      	subs	r4, r3, #1
 800801a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801c:	42a3      	cmp	r3, r4
 800801e:	bfbf      	itttt	lt
 8008020:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008022:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008024:	1ae3      	sublt	r3, r4, r3
 8008026:	18d2      	addlt	r2, r2, r3
 8008028:	bfa8      	it	ge
 800802a:	1b1c      	subge	r4, r3, r4
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	bfbe      	ittt	lt
 8008030:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008032:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008034:	2400      	movlt	r4, #0
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfb5      	itete	lt
 800803a:	eba8 0603 	sublt.w	r6, r8, r3
 800803e:	4646      	movge	r6, r8
 8008040:	2300      	movlt	r3, #0
 8008042:	9b07      	ldrge	r3, [sp, #28]
 8008044:	e730      	b.n	8007ea8 <_dtoa_r+0x730>
 8008046:	4646      	mov	r6, r8
 8008048:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800804a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800804c:	e735      	b.n	8007eba <_dtoa_r+0x742>
 800804e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008050:	e75c      	b.n	8007f0c <_dtoa_r+0x794>
 8008052:	2300      	movs	r3, #0
 8008054:	e788      	b.n	8007f68 <_dtoa_r+0x7f0>
 8008056:	9b02      	ldr	r3, [sp, #8]
 8008058:	e786      	b.n	8007f68 <_dtoa_r+0x7f0>
 800805a:	2300      	movs	r3, #0
 800805c:	930a      	str	r3, [sp, #40]	@ 0x28
 800805e:	e788      	b.n	8007f72 <_dtoa_r+0x7fa>
 8008060:	d09f      	beq.n	8007fa2 <_dtoa_r+0x82a>
 8008062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008064:	331c      	adds	r3, #28
 8008066:	441a      	add	r2, r3
 8008068:	4498      	add	r8, r3
 800806a:	441e      	add	r6, r3
 800806c:	9209      	str	r2, [sp, #36]	@ 0x24
 800806e:	e798      	b.n	8007fa2 <_dtoa_r+0x82a>
 8008070:	4603      	mov	r3, r0
 8008072:	e7f6      	b.n	8008062 <_dtoa_r+0x8ea>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	9704      	str	r7, [sp, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc20      	bgt.n	80080be <_dtoa_r+0x946>
 800807c:	9308      	str	r3, [sp, #32]
 800807e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008080:	2b02      	cmp	r3, #2
 8008082:	dd1e      	ble.n	80080c2 <_dtoa_r+0x94a>
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f47f aebc 	bne.w	8007e04 <_dtoa_r+0x68c>
 800808c:	4621      	mov	r1, r4
 800808e:	2205      	movs	r2, #5
 8008090:	4658      	mov	r0, fp
 8008092:	f000 fa99 	bl	80085c8 <__multadd>
 8008096:	4601      	mov	r1, r0
 8008098:	4604      	mov	r4, r0
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fcaa 	bl	80089f4 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f77f aeaf 	ble.w	8007e04 <_dtoa_r+0x68c>
 80080a6:	2331      	movs	r3, #49	@ 0x31
 80080a8:	4656      	mov	r6, sl
 80080aa:	f806 3b01 	strb.w	r3, [r6], #1
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	e6aa      	b.n	8007e0c <_dtoa_r+0x694>
 80080b6:	9c07      	ldr	r4, [sp, #28]
 80080b8:	9704      	str	r7, [sp, #16]
 80080ba:	4625      	mov	r5, r4
 80080bc:	e7f3      	b.n	80080a6 <_dtoa_r+0x92e>
 80080be:	9b07      	ldr	r3, [sp, #28]
 80080c0:	9308      	str	r3, [sp, #32]
 80080c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8104 	beq.w	80082d2 <_dtoa_r+0xb5a>
 80080ca:	2e00      	cmp	r6, #0
 80080cc:	dd05      	ble.n	80080da <_dtoa_r+0x962>
 80080ce:	4629      	mov	r1, r5
 80080d0:	4632      	mov	r2, r6
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fc22 	bl	800891c <__lshift>
 80080d8:	4605      	mov	r5, r0
 80080da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d05a      	beq.n	8008196 <_dtoa_r+0xa1e>
 80080e0:	4658      	mov	r0, fp
 80080e2:	6869      	ldr	r1, [r5, #4]
 80080e4:	f000 fa0e 	bl	8008504 <_Balloc>
 80080e8:	4606      	mov	r6, r0
 80080ea:	b928      	cbnz	r0, 80080f8 <_dtoa_r+0x980>
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080f2:	4b83      	ldr	r3, [pc, #524]	@ (8008300 <_dtoa_r+0xb88>)
 80080f4:	f7ff bb54 	b.w	80077a0 <_dtoa_r+0x28>
 80080f8:	692a      	ldr	r2, [r5, #16]
 80080fa:	f105 010c 	add.w	r1, r5, #12
 80080fe:	3202      	adds	r2, #2
 8008100:	0092      	lsls	r2, r2, #2
 8008102:	300c      	adds	r0, #12
 8008104:	f001 f8c4 	bl	8009290 <memcpy>
 8008108:	2201      	movs	r2, #1
 800810a:	4631      	mov	r1, r6
 800810c:	4658      	mov	r0, fp
 800810e:	f000 fc05 	bl	800891c <__lshift>
 8008112:	462f      	mov	r7, r5
 8008114:	4605      	mov	r5, r0
 8008116:	f10a 0301 	add.w	r3, sl, #1
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	4453      	add	r3, sl
 8008120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008122:	9b02      	ldr	r3, [sp, #8]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	930a      	str	r3, [sp, #40]	@ 0x28
 800812a:	9b07      	ldr	r3, [sp, #28]
 800812c:	4621      	mov	r1, r4
 800812e:	3b01      	subs	r3, #1
 8008130:	4648      	mov	r0, r9
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	f7ff fa97 	bl	8007666 <quorem>
 8008138:	4639      	mov	r1, r7
 800813a:	9008      	str	r0, [sp, #32]
 800813c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008140:	4648      	mov	r0, r9
 8008142:	f000 fc57 	bl	80089f4 <__mcmp>
 8008146:	462a      	mov	r2, r5
 8008148:	9009      	str	r0, [sp, #36]	@ 0x24
 800814a:	4621      	mov	r1, r4
 800814c:	4658      	mov	r0, fp
 800814e:	f000 fc6d 	bl	8008a2c <__mdiff>
 8008152:	68c2      	ldr	r2, [r0, #12]
 8008154:	4606      	mov	r6, r0
 8008156:	bb02      	cbnz	r2, 800819a <_dtoa_r+0xa22>
 8008158:	4601      	mov	r1, r0
 800815a:	4648      	mov	r0, r9
 800815c:	f000 fc4a 	bl	80089f4 <__mcmp>
 8008160:	4602      	mov	r2, r0
 8008162:	4631      	mov	r1, r6
 8008164:	4658      	mov	r0, fp
 8008166:	920c      	str	r2, [sp, #48]	@ 0x30
 8008168:	f000 fa0c 	bl	8008584 <_Bfree>
 800816c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800816e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008170:	9e07      	ldr	r6, [sp, #28]
 8008172:	ea43 0102 	orr.w	r1, r3, r2
 8008176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008178:	4319      	orrs	r1, r3
 800817a:	d110      	bne.n	800819e <_dtoa_r+0xa26>
 800817c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008180:	d029      	beq.n	80081d6 <_dtoa_r+0xa5e>
 8008182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd02      	ble.n	800818e <_dtoa_r+0xa16>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	f883 8000 	strb.w	r8, [r3]
 8008194:	e63b      	b.n	8007e0e <_dtoa_r+0x696>
 8008196:	4628      	mov	r0, r5
 8008198:	e7bb      	b.n	8008112 <_dtoa_r+0x99a>
 800819a:	2201      	movs	r2, #1
 800819c:	e7e1      	b.n	8008162 <_dtoa_r+0x9ea>
 800819e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	db04      	blt.n	80081ae <_dtoa_r+0xa36>
 80081a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80081a6:	430b      	orrs	r3, r1
 80081a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081aa:	430b      	orrs	r3, r1
 80081ac:	d120      	bne.n	80081f0 <_dtoa_r+0xa78>
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	dded      	ble.n	800818e <_dtoa_r+0xa16>
 80081b2:	4649      	mov	r1, r9
 80081b4:	2201      	movs	r2, #1
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 fbb0 	bl	800891c <__lshift>
 80081bc:	4621      	mov	r1, r4
 80081be:	4681      	mov	r9, r0
 80081c0:	f000 fc18 	bl	80089f4 <__mcmp>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	dc03      	bgt.n	80081d0 <_dtoa_r+0xa58>
 80081c8:	d1e1      	bne.n	800818e <_dtoa_r+0xa16>
 80081ca:	f018 0f01 	tst.w	r8, #1
 80081ce:	d0de      	beq.n	800818e <_dtoa_r+0xa16>
 80081d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081d4:	d1d8      	bne.n	8008188 <_dtoa_r+0xa10>
 80081d6:	2339      	movs	r3, #57	@ 0x39
 80081d8:	9a02      	ldr	r2, [sp, #8]
 80081da:	7013      	strb	r3, [r2, #0]
 80081dc:	4633      	mov	r3, r6
 80081de:	461e      	mov	r6, r3
 80081e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	2a39      	cmp	r2, #57	@ 0x39
 80081e8:	d052      	beq.n	8008290 <_dtoa_r+0xb18>
 80081ea:	3201      	adds	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e60e      	b.n	8007e0e <_dtoa_r+0x696>
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	dd07      	ble.n	8008204 <_dtoa_r+0xa8c>
 80081f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081f8:	d0ed      	beq.n	80081d6 <_dtoa_r+0xa5e>
 80081fa:	9a02      	ldr	r2, [sp, #8]
 80081fc:	f108 0301 	add.w	r3, r8, #1
 8008200:	7013      	strb	r3, [r2, #0]
 8008202:	e604      	b.n	8007e0e <_dtoa_r+0x696>
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	9a07      	ldr	r2, [sp, #28]
 8008208:	f803 8c01 	strb.w	r8, [r3, #-1]
 800820c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800820e:	4293      	cmp	r3, r2
 8008210:	d028      	beq.n	8008264 <_dtoa_r+0xaec>
 8008212:	4649      	mov	r1, r9
 8008214:	2300      	movs	r3, #0
 8008216:	220a      	movs	r2, #10
 8008218:	4658      	mov	r0, fp
 800821a:	f000 f9d5 	bl	80085c8 <__multadd>
 800821e:	42af      	cmp	r7, r5
 8008220:	4681      	mov	r9, r0
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	f04f 020a 	mov.w	r2, #10
 800822a:	4639      	mov	r1, r7
 800822c:	4658      	mov	r0, fp
 800822e:	d107      	bne.n	8008240 <_dtoa_r+0xac8>
 8008230:	f000 f9ca 	bl	80085c8 <__multadd>
 8008234:	4607      	mov	r7, r0
 8008236:	4605      	mov	r5, r0
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	e774      	b.n	800812a <_dtoa_r+0x9b2>
 8008240:	f000 f9c2 	bl	80085c8 <__multadd>
 8008244:	4629      	mov	r1, r5
 8008246:	4607      	mov	r7, r0
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	4658      	mov	r0, fp
 800824e:	f000 f9bb 	bl	80085c8 <__multadd>
 8008252:	4605      	mov	r5, r0
 8008254:	e7f0      	b.n	8008238 <_dtoa_r+0xac0>
 8008256:	9b08      	ldr	r3, [sp, #32]
 8008258:	2700      	movs	r7, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfcc      	ite	gt
 800825e:	461e      	movgt	r6, r3
 8008260:	2601      	movle	r6, #1
 8008262:	4456      	add	r6, sl
 8008264:	4649      	mov	r1, r9
 8008266:	2201      	movs	r2, #1
 8008268:	4658      	mov	r0, fp
 800826a:	f000 fb57 	bl	800891c <__lshift>
 800826e:	4621      	mov	r1, r4
 8008270:	4681      	mov	r9, r0
 8008272:	f000 fbbf 	bl	80089f4 <__mcmp>
 8008276:	2800      	cmp	r0, #0
 8008278:	dcb0      	bgt.n	80081dc <_dtoa_r+0xa64>
 800827a:	d102      	bne.n	8008282 <_dtoa_r+0xb0a>
 800827c:	f018 0f01 	tst.w	r8, #1
 8008280:	d1ac      	bne.n	80081dc <_dtoa_r+0xa64>
 8008282:	4633      	mov	r3, r6
 8008284:	461e      	mov	r6, r3
 8008286:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828a:	2a30      	cmp	r2, #48	@ 0x30
 800828c:	d0fa      	beq.n	8008284 <_dtoa_r+0xb0c>
 800828e:	e5be      	b.n	8007e0e <_dtoa_r+0x696>
 8008290:	459a      	cmp	sl, r3
 8008292:	d1a4      	bne.n	80081de <_dtoa_r+0xa66>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	3301      	adds	r3, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	2331      	movs	r3, #49	@ 0x31
 800829c:	f88a 3000 	strb.w	r3, [sl]
 80082a0:	e5b5      	b.n	8007e0e <_dtoa_r+0x696>
 80082a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008304 <_dtoa_r+0xb8c>
 80082a8:	b11b      	cbz	r3, 80082b2 <_dtoa_r+0xb3a>
 80082aa:	f10a 0308 	add.w	r3, sl, #8
 80082ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4650      	mov	r0, sl
 80082b4:	b017      	add	sp, #92	@ 0x5c
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082bc:	2b01      	cmp	r3, #1
 80082be:	f77f ae3d 	ble.w	8007f3c <_dtoa_r+0x7c4>
 80082c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c6:	2001      	movs	r0, #1
 80082c8:	e65b      	b.n	8007f82 <_dtoa_r+0x80a>
 80082ca:	9b08      	ldr	r3, [sp, #32]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f77f aed6 	ble.w	800807e <_dtoa_r+0x906>
 80082d2:	4656      	mov	r6, sl
 80082d4:	4621      	mov	r1, r4
 80082d6:	4648      	mov	r0, r9
 80082d8:	f7ff f9c5 	bl	8007666 <quorem>
 80082dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	f806 8b01 	strb.w	r8, [r6], #1
 80082e6:	eba6 020a 	sub.w	r2, r6, sl
 80082ea:	4293      	cmp	r3, r2
 80082ec:	ddb3      	ble.n	8008256 <_dtoa_r+0xade>
 80082ee:	4649      	mov	r1, r9
 80082f0:	2300      	movs	r3, #0
 80082f2:	220a      	movs	r2, #10
 80082f4:	4658      	mov	r0, fp
 80082f6:	f000 f967 	bl	80085c8 <__multadd>
 80082fa:	4681      	mov	r9, r0
 80082fc:	e7ea      	b.n	80082d4 <_dtoa_r+0xb5c>
 80082fe:	bf00      	nop
 8008300:	08009e7a 	.word	0x08009e7a
 8008304:	08009dfe 	.word	0x08009dfe

08008308 <_free_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4605      	mov	r5, r0
 800830c:	2900      	cmp	r1, #0
 800830e:	d040      	beq.n	8008392 <_free_r+0x8a>
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f0c      	subs	r4, r1, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	18e4      	addlt	r4, r4, r3
 800831c:	f000 f8e6 	bl	80084ec <__malloc_lock>
 8008320:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <_free_r+0x8c>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	b933      	cbnz	r3, 8008334 <_free_r+0x2c>
 8008326:	6063      	str	r3, [r4, #4]
 8008328:	6014      	str	r4, [r2, #0]
 800832a:	4628      	mov	r0, r5
 800832c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008330:	f000 b8e2 	b.w	80084f8 <__malloc_unlock>
 8008334:	42a3      	cmp	r3, r4
 8008336:	d908      	bls.n	800834a <_free_r+0x42>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	1821      	adds	r1, r4, r0
 800833c:	428b      	cmp	r3, r1
 800833e:	bf01      	itttt	eq
 8008340:	6819      	ldreq	r1, [r3, #0]
 8008342:	685b      	ldreq	r3, [r3, #4]
 8008344:	1809      	addeq	r1, r1, r0
 8008346:	6021      	streq	r1, [r4, #0]
 8008348:	e7ed      	b.n	8008326 <_free_r+0x1e>
 800834a:	461a      	mov	r2, r3
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	b10b      	cbz	r3, 8008354 <_free_r+0x4c>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d9fa      	bls.n	800834a <_free_r+0x42>
 8008354:	6811      	ldr	r1, [r2, #0]
 8008356:	1850      	adds	r0, r2, r1
 8008358:	42a0      	cmp	r0, r4
 800835a:	d10b      	bne.n	8008374 <_free_r+0x6c>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	4401      	add	r1, r0
 8008360:	1850      	adds	r0, r2, r1
 8008362:	4283      	cmp	r3, r0
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	d1e0      	bne.n	800832a <_free_r+0x22>
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4408      	add	r0, r1
 800836e:	6010      	str	r0, [r2, #0]
 8008370:	6053      	str	r3, [r2, #4]
 8008372:	e7da      	b.n	800832a <_free_r+0x22>
 8008374:	d902      	bls.n	800837c <_free_r+0x74>
 8008376:	230c      	movs	r3, #12
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	e7d6      	b.n	800832a <_free_r+0x22>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	1821      	adds	r1, r4, r0
 8008380:	428b      	cmp	r3, r1
 8008382:	bf01      	itttt	eq
 8008384:	6819      	ldreq	r1, [r3, #0]
 8008386:	685b      	ldreq	r3, [r3, #4]
 8008388:	1809      	addeq	r1, r1, r0
 800838a:	6021      	streq	r1, [r4, #0]
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	6054      	str	r4, [r2, #4]
 8008390:	e7cb      	b.n	800832a <_free_r+0x22>
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000608 	.word	0x20000608

08008398 <malloc>:
 8008398:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <malloc+0xc>)
 800839a:	4601      	mov	r1, r0
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f000 b825 	b.w	80083ec <_malloc_r>
 80083a2:	bf00      	nop
 80083a4:	20000044 	.word	0x20000044

080083a8 <sbrk_aligned>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4e0f      	ldr	r6, [pc, #60]	@ (80083e8 <sbrk_aligned+0x40>)
 80083ac:	460c      	mov	r4, r1
 80083ae:	6831      	ldr	r1, [r6, #0]
 80083b0:	4605      	mov	r5, r0
 80083b2:	b911      	cbnz	r1, 80083ba <sbrk_aligned+0x12>
 80083b4:	f000 ff5c 	bl	8009270 <_sbrk_r>
 80083b8:	6030      	str	r0, [r6, #0]
 80083ba:	4621      	mov	r1, r4
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 ff57 	bl	8009270 <_sbrk_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d103      	bne.n	80083ce <sbrk_aligned+0x26>
 80083c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80083ca:	4620      	mov	r0, r4
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	1cc4      	adds	r4, r0, #3
 80083d0:	f024 0403 	bic.w	r4, r4, #3
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d0f8      	beq.n	80083ca <sbrk_aligned+0x22>
 80083d8:	1a21      	subs	r1, r4, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 ff48 	bl	8009270 <_sbrk_r>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d1f2      	bne.n	80083ca <sbrk_aligned+0x22>
 80083e4:	e7ef      	b.n	80083c6 <sbrk_aligned+0x1e>
 80083e6:	bf00      	nop
 80083e8:	20000604 	.word	0x20000604

080083ec <_malloc_r>:
 80083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	1ccd      	adds	r5, r1, #3
 80083f2:	f025 0503 	bic.w	r5, r5, #3
 80083f6:	3508      	adds	r5, #8
 80083f8:	2d0c      	cmp	r5, #12
 80083fa:	bf38      	it	cc
 80083fc:	250c      	movcc	r5, #12
 80083fe:	2d00      	cmp	r5, #0
 8008400:	4606      	mov	r6, r0
 8008402:	db01      	blt.n	8008408 <_malloc_r+0x1c>
 8008404:	42a9      	cmp	r1, r5
 8008406:	d904      	bls.n	8008412 <_malloc_r+0x26>
 8008408:	230c      	movs	r3, #12
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	2000      	movs	r0, #0
 800840e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e8 <_malloc_r+0xfc>
 8008416:	f000 f869 	bl	80084ec <__malloc_lock>
 800841a:	f8d8 3000 	ldr.w	r3, [r8]
 800841e:	461c      	mov	r4, r3
 8008420:	bb44      	cbnz	r4, 8008474 <_malloc_r+0x88>
 8008422:	4629      	mov	r1, r5
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ffbf 	bl	80083a8 <sbrk_aligned>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	4604      	mov	r4, r0
 800842e:	d158      	bne.n	80084e2 <_malloc_r+0xf6>
 8008430:	f8d8 4000 	ldr.w	r4, [r8]
 8008434:	4627      	mov	r7, r4
 8008436:	2f00      	cmp	r7, #0
 8008438:	d143      	bne.n	80084c2 <_malloc_r+0xd6>
 800843a:	2c00      	cmp	r4, #0
 800843c:	d04b      	beq.n	80084d6 <_malloc_r+0xea>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	4639      	mov	r1, r7
 8008442:	4630      	mov	r0, r6
 8008444:	eb04 0903 	add.w	r9, r4, r3
 8008448:	f000 ff12 	bl	8009270 <_sbrk_r>
 800844c:	4581      	cmp	r9, r0
 800844e:	d142      	bne.n	80084d6 <_malloc_r+0xea>
 8008450:	6821      	ldr	r1, [r4, #0]
 8008452:	4630      	mov	r0, r6
 8008454:	1a6d      	subs	r5, r5, r1
 8008456:	4629      	mov	r1, r5
 8008458:	f7ff ffa6 	bl	80083a8 <sbrk_aligned>
 800845c:	3001      	adds	r0, #1
 800845e:	d03a      	beq.n	80084d6 <_malloc_r+0xea>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	442b      	add	r3, r5
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	f8d8 3000 	ldr.w	r3, [r8]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	bb62      	cbnz	r2, 80084c8 <_malloc_r+0xdc>
 800846e:	f8c8 7000 	str.w	r7, [r8]
 8008472:	e00f      	b.n	8008494 <_malloc_r+0xa8>
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	1b52      	subs	r2, r2, r5
 8008478:	d420      	bmi.n	80084bc <_malloc_r+0xd0>
 800847a:	2a0b      	cmp	r2, #11
 800847c:	d917      	bls.n	80084ae <_malloc_r+0xc2>
 800847e:	1961      	adds	r1, r4, r5
 8008480:	42a3      	cmp	r3, r4
 8008482:	6025      	str	r5, [r4, #0]
 8008484:	bf18      	it	ne
 8008486:	6059      	strne	r1, [r3, #4]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	bf08      	it	eq
 800848c:	f8c8 1000 	streq.w	r1, [r8]
 8008490:	5162      	str	r2, [r4, r5]
 8008492:	604b      	str	r3, [r1, #4]
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f82f 	bl	80084f8 <__malloc_unlock>
 800849a:	f104 000b 	add.w	r0, r4, #11
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	f020 0007 	bic.w	r0, r0, #7
 80084a4:	1ac2      	subs	r2, r0, r3
 80084a6:	bf1c      	itt	ne
 80084a8:	1a1b      	subne	r3, r3, r0
 80084aa:	50a3      	strne	r3, [r4, r2]
 80084ac:	e7af      	b.n	800840e <_malloc_r+0x22>
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	bf0c      	ite	eq
 80084b4:	f8c8 2000 	streq.w	r2, [r8]
 80084b8:	605a      	strne	r2, [r3, #4]
 80084ba:	e7eb      	b.n	8008494 <_malloc_r+0xa8>
 80084bc:	4623      	mov	r3, r4
 80084be:	6864      	ldr	r4, [r4, #4]
 80084c0:	e7ae      	b.n	8008420 <_malloc_r+0x34>
 80084c2:	463c      	mov	r4, r7
 80084c4:	687f      	ldr	r7, [r7, #4]
 80084c6:	e7b6      	b.n	8008436 <_malloc_r+0x4a>
 80084c8:	461a      	mov	r2, r3
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d1fb      	bne.n	80084c8 <_malloc_r+0xdc>
 80084d0:	2300      	movs	r3, #0
 80084d2:	6053      	str	r3, [r2, #4]
 80084d4:	e7de      	b.n	8008494 <_malloc_r+0xa8>
 80084d6:	230c      	movs	r3, #12
 80084d8:	4630      	mov	r0, r6
 80084da:	6033      	str	r3, [r6, #0]
 80084dc:	f000 f80c 	bl	80084f8 <__malloc_unlock>
 80084e0:	e794      	b.n	800840c <_malloc_r+0x20>
 80084e2:	6005      	str	r5, [r0, #0]
 80084e4:	e7d6      	b.n	8008494 <_malloc_r+0xa8>
 80084e6:	bf00      	nop
 80084e8:	20000608 	.word	0x20000608

080084ec <__malloc_lock>:
 80084ec:	4801      	ldr	r0, [pc, #4]	@ (80084f4 <__malloc_lock+0x8>)
 80084ee:	f7ff b8aa 	b.w	8007646 <__retarget_lock_acquire_recursive>
 80084f2:	bf00      	nop
 80084f4:	20000600 	.word	0x20000600

080084f8 <__malloc_unlock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	@ (8008500 <__malloc_unlock+0x8>)
 80084fa:	f7ff b8a5 	b.w	8007648 <__retarget_lock_release_recursive>
 80084fe:	bf00      	nop
 8008500:	20000600 	.word	0x20000600

08008504 <_Balloc>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	69c6      	ldr	r6, [r0, #28]
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	b976      	cbnz	r6, 800852c <_Balloc+0x28>
 800850e:	2010      	movs	r0, #16
 8008510:	f7ff ff42 	bl	8008398 <malloc>
 8008514:	4602      	mov	r2, r0
 8008516:	61e0      	str	r0, [r4, #28]
 8008518:	b920      	cbnz	r0, 8008524 <_Balloc+0x20>
 800851a:	216b      	movs	r1, #107	@ 0x6b
 800851c:	4b17      	ldr	r3, [pc, #92]	@ (800857c <_Balloc+0x78>)
 800851e:	4818      	ldr	r0, [pc, #96]	@ (8008580 <_Balloc+0x7c>)
 8008520:	f000 fec4 	bl	80092ac <__assert_func>
 8008524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008528:	6006      	str	r6, [r0, #0]
 800852a:	60c6      	str	r6, [r0, #12]
 800852c:	69e6      	ldr	r6, [r4, #28]
 800852e:	68f3      	ldr	r3, [r6, #12]
 8008530:	b183      	cbz	r3, 8008554 <_Balloc+0x50>
 8008532:	69e3      	ldr	r3, [r4, #28]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800853a:	b9b8      	cbnz	r0, 800856c <_Balloc+0x68>
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f605 	lsl.w	r6, r1, r5
 8008542:	1d72      	adds	r2, r6, #5
 8008544:	4620      	mov	r0, r4
 8008546:	0092      	lsls	r2, r2, #2
 8008548:	f000 fece 	bl	80092e8 <_calloc_r>
 800854c:	b160      	cbz	r0, 8008568 <_Balloc+0x64>
 800854e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008552:	e00e      	b.n	8008572 <_Balloc+0x6e>
 8008554:	2221      	movs	r2, #33	@ 0x21
 8008556:	2104      	movs	r1, #4
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fec5 	bl	80092e8 <_calloc_r>
 800855e:	69e3      	ldr	r3, [r4, #28]
 8008560:	60f0      	str	r0, [r6, #12]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e4      	bne.n	8008532 <_Balloc+0x2e>
 8008568:	2000      	movs	r0, #0
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	6802      	ldr	r2, [r0, #0]
 800856e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008572:	2300      	movs	r3, #0
 8008574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008578:	e7f7      	b.n	800856a <_Balloc+0x66>
 800857a:	bf00      	nop
 800857c:	08009e0b 	.word	0x08009e0b
 8008580:	08009e8b 	.word	0x08009e8b

08008584 <_Bfree>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	69c6      	ldr	r6, [r0, #28]
 8008588:	4605      	mov	r5, r0
 800858a:	460c      	mov	r4, r1
 800858c:	b976      	cbnz	r6, 80085ac <_Bfree+0x28>
 800858e:	2010      	movs	r0, #16
 8008590:	f7ff ff02 	bl	8008398 <malloc>
 8008594:	4602      	mov	r2, r0
 8008596:	61e8      	str	r0, [r5, #28]
 8008598:	b920      	cbnz	r0, 80085a4 <_Bfree+0x20>
 800859a:	218f      	movs	r1, #143	@ 0x8f
 800859c:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <_Bfree+0x3c>)
 800859e:	4809      	ldr	r0, [pc, #36]	@ (80085c4 <_Bfree+0x40>)
 80085a0:	f000 fe84 	bl	80092ac <__assert_func>
 80085a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a8:	6006      	str	r6, [r0, #0]
 80085aa:	60c6      	str	r6, [r0, #12]
 80085ac:	b13c      	cbz	r4, 80085be <_Bfree+0x3a>
 80085ae:	69eb      	ldr	r3, [r5, #28]
 80085b0:	6862      	ldr	r2, [r4, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085b8:	6021      	str	r1, [r4, #0]
 80085ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	08009e0b 	.word	0x08009e0b
 80085c4:	08009e8b 	.word	0x08009e8b

080085c8 <__multadd>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	4607      	mov	r7, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	461e      	mov	r6, r3
 80085d2:	2000      	movs	r0, #0
 80085d4:	690d      	ldr	r5, [r1, #16]
 80085d6:	f101 0c14 	add.w	ip, r1, #20
 80085da:	f8dc 3000 	ldr.w	r3, [ip]
 80085de:	3001      	adds	r0, #1
 80085e0:	b299      	uxth	r1, r3
 80085e2:	fb02 6101 	mla	r1, r2, r1, r6
 80085e6:	0c1e      	lsrs	r6, r3, #16
 80085e8:	0c0b      	lsrs	r3, r1, #16
 80085ea:	fb02 3306 	mla	r3, r2, r6, r3
 80085ee:	b289      	uxth	r1, r1
 80085f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085f4:	4285      	cmp	r5, r0
 80085f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085fa:	f84c 1b04 	str.w	r1, [ip], #4
 80085fe:	dcec      	bgt.n	80085da <__multadd+0x12>
 8008600:	b30e      	cbz	r6, 8008646 <__multadd+0x7e>
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	42ab      	cmp	r3, r5
 8008606:	dc19      	bgt.n	800863c <__multadd+0x74>
 8008608:	6861      	ldr	r1, [r4, #4]
 800860a:	4638      	mov	r0, r7
 800860c:	3101      	adds	r1, #1
 800860e:	f7ff ff79 	bl	8008504 <_Balloc>
 8008612:	4680      	mov	r8, r0
 8008614:	b928      	cbnz	r0, 8008622 <__multadd+0x5a>
 8008616:	4602      	mov	r2, r0
 8008618:	21ba      	movs	r1, #186	@ 0xba
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <__multadd+0x84>)
 800861c:	480c      	ldr	r0, [pc, #48]	@ (8008650 <__multadd+0x88>)
 800861e:	f000 fe45 	bl	80092ac <__assert_func>
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	f104 010c 	add.w	r1, r4, #12
 8008628:	3202      	adds	r2, #2
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	300c      	adds	r0, #12
 800862e:	f000 fe2f 	bl	8009290 <memcpy>
 8008632:	4621      	mov	r1, r4
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff ffa5 	bl	8008584 <_Bfree>
 800863a:	4644      	mov	r4, r8
 800863c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008640:	3501      	adds	r5, #1
 8008642:	615e      	str	r6, [r3, #20]
 8008644:	6125      	str	r5, [r4, #16]
 8008646:	4620      	mov	r0, r4
 8008648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800864c:	08009e7a 	.word	0x08009e7a
 8008650:	08009e8b 	.word	0x08009e8b

08008654 <__hi0bits>:
 8008654:	4603      	mov	r3, r0
 8008656:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800865a:	bf3a      	itte	cc
 800865c:	0403      	lslcc	r3, r0, #16
 800865e:	2010      	movcc	r0, #16
 8008660:	2000      	movcs	r0, #0
 8008662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008666:	bf3c      	itt	cc
 8008668:	021b      	lslcc	r3, r3, #8
 800866a:	3008      	addcc	r0, #8
 800866c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008670:	bf3c      	itt	cc
 8008672:	011b      	lslcc	r3, r3, #4
 8008674:	3004      	addcc	r0, #4
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867a:	bf3c      	itt	cc
 800867c:	009b      	lslcc	r3, r3, #2
 800867e:	3002      	addcc	r0, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	db05      	blt.n	8008690 <__hi0bits+0x3c>
 8008684:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008688:	f100 0001 	add.w	r0, r0, #1
 800868c:	bf08      	it	eq
 800868e:	2020      	moveq	r0, #32
 8008690:	4770      	bx	lr

08008692 <__lo0bits>:
 8008692:	6803      	ldr	r3, [r0, #0]
 8008694:	4602      	mov	r2, r0
 8008696:	f013 0007 	ands.w	r0, r3, #7
 800869a:	d00b      	beq.n	80086b4 <__lo0bits+0x22>
 800869c:	07d9      	lsls	r1, r3, #31
 800869e:	d421      	bmi.n	80086e4 <__lo0bits+0x52>
 80086a0:	0798      	lsls	r0, r3, #30
 80086a2:	bf49      	itett	mi
 80086a4:	085b      	lsrmi	r3, r3, #1
 80086a6:	089b      	lsrpl	r3, r3, #2
 80086a8:	2001      	movmi	r0, #1
 80086aa:	6013      	strmi	r3, [r2, #0]
 80086ac:	bf5c      	itt	pl
 80086ae:	2002      	movpl	r0, #2
 80086b0:	6013      	strpl	r3, [r2, #0]
 80086b2:	4770      	bx	lr
 80086b4:	b299      	uxth	r1, r3
 80086b6:	b909      	cbnz	r1, 80086bc <__lo0bits+0x2a>
 80086b8:	2010      	movs	r0, #16
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	b2d9      	uxtb	r1, r3
 80086be:	b909      	cbnz	r1, 80086c4 <__lo0bits+0x32>
 80086c0:	3008      	adds	r0, #8
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	0719      	lsls	r1, r3, #28
 80086c6:	bf04      	itt	eq
 80086c8:	091b      	lsreq	r3, r3, #4
 80086ca:	3004      	addeq	r0, #4
 80086cc:	0799      	lsls	r1, r3, #30
 80086ce:	bf04      	itt	eq
 80086d0:	089b      	lsreq	r3, r3, #2
 80086d2:	3002      	addeq	r0, #2
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	d403      	bmi.n	80086e0 <__lo0bits+0x4e>
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	f100 0001 	add.w	r0, r0, #1
 80086de:	d003      	beq.n	80086e8 <__lo0bits+0x56>
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	4770      	bx	lr
 80086e4:	2000      	movs	r0, #0
 80086e6:	4770      	bx	lr
 80086e8:	2020      	movs	r0, #32
 80086ea:	4770      	bx	lr

080086ec <__i2b>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	2101      	movs	r1, #1
 80086f2:	f7ff ff07 	bl	8008504 <_Balloc>
 80086f6:	4602      	mov	r2, r0
 80086f8:	b928      	cbnz	r0, 8008706 <__i2b+0x1a>
 80086fa:	f240 1145 	movw	r1, #325	@ 0x145
 80086fe:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <__i2b+0x24>)
 8008700:	4804      	ldr	r0, [pc, #16]	@ (8008714 <__i2b+0x28>)
 8008702:	f000 fdd3 	bl	80092ac <__assert_func>
 8008706:	2301      	movs	r3, #1
 8008708:	6144      	str	r4, [r0, #20]
 800870a:	6103      	str	r3, [r0, #16]
 800870c:	bd10      	pop	{r4, pc}
 800870e:	bf00      	nop
 8008710:	08009e7a 	.word	0x08009e7a
 8008714:	08009e8b 	.word	0x08009e8b

08008718 <__multiply>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	4614      	mov	r4, r2
 800871e:	690a      	ldr	r2, [r1, #16]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	460f      	mov	r7, r1
 8008724:	429a      	cmp	r2, r3
 8008726:	bfa2      	ittt	ge
 8008728:	4623      	movge	r3, r4
 800872a:	460c      	movge	r4, r1
 800872c:	461f      	movge	r7, r3
 800872e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008732:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	6861      	ldr	r1, [r4, #4]
 800873a:	eb0a 0609 	add.w	r6, sl, r9
 800873e:	42b3      	cmp	r3, r6
 8008740:	b085      	sub	sp, #20
 8008742:	bfb8      	it	lt
 8008744:	3101      	addlt	r1, #1
 8008746:	f7ff fedd 	bl	8008504 <_Balloc>
 800874a:	b930      	cbnz	r0, 800875a <__multiply+0x42>
 800874c:	4602      	mov	r2, r0
 800874e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008752:	4b43      	ldr	r3, [pc, #268]	@ (8008860 <__multiply+0x148>)
 8008754:	4843      	ldr	r0, [pc, #268]	@ (8008864 <__multiply+0x14c>)
 8008756:	f000 fda9 	bl	80092ac <__assert_func>
 800875a:	f100 0514 	add.w	r5, r0, #20
 800875e:	462b      	mov	r3, r5
 8008760:	2200      	movs	r2, #0
 8008762:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008766:	4543      	cmp	r3, r8
 8008768:	d321      	bcc.n	80087ae <__multiply+0x96>
 800876a:	f107 0114 	add.w	r1, r7, #20
 800876e:	f104 0214 	add.w	r2, r4, #20
 8008772:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008776:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800877a:	9302      	str	r3, [sp, #8]
 800877c:	1b13      	subs	r3, r2, r4
 800877e:	3b15      	subs	r3, #21
 8008780:	f023 0303 	bic.w	r3, r3, #3
 8008784:	3304      	adds	r3, #4
 8008786:	f104 0715 	add.w	r7, r4, #21
 800878a:	42ba      	cmp	r2, r7
 800878c:	bf38      	it	cc
 800878e:	2304      	movcc	r3, #4
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	9103      	str	r1, [sp, #12]
 8008796:	428b      	cmp	r3, r1
 8008798:	d80c      	bhi.n	80087b4 <__multiply+0x9c>
 800879a:	2e00      	cmp	r6, #0
 800879c:	dd03      	ble.n	80087a6 <__multiply+0x8e>
 800879e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d05a      	beq.n	800885c <__multiply+0x144>
 80087a6:	6106      	str	r6, [r0, #16]
 80087a8:	b005      	add	sp, #20
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	f843 2b04 	str.w	r2, [r3], #4
 80087b2:	e7d8      	b.n	8008766 <__multiply+0x4e>
 80087b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	d023      	beq.n	8008806 <__multiply+0xee>
 80087be:	46a9      	mov	r9, r5
 80087c0:	f04f 0c00 	mov.w	ip, #0
 80087c4:	f104 0e14 	add.w	lr, r4, #20
 80087c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087cc:	f8d9 3000 	ldr.w	r3, [r9]
 80087d0:	fa1f fb87 	uxth.w	fp, r7
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80087da:	4463      	add	r3, ip
 80087dc:	f8d9 c000 	ldr.w	ip, [r9]
 80087e0:	0c3f      	lsrs	r7, r7, #16
 80087e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80087e6:	fb0a c707 	mla	r7, sl, r7, ip
 80087ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087f4:	4572      	cmp	r2, lr
 80087f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087fa:	f849 3b04 	str.w	r3, [r9], #4
 80087fe:	d8e3      	bhi.n	80087c8 <__multiply+0xb0>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	f845 c003 	str.w	ip, [r5, r3]
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	3104      	adds	r1, #4
 800880a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800880e:	f1b9 0f00 	cmp.w	r9, #0
 8008812:	d021      	beq.n	8008858 <__multiply+0x140>
 8008814:	46ae      	mov	lr, r5
 8008816:	f04f 0a00 	mov.w	sl, #0
 800881a:	682b      	ldr	r3, [r5, #0]
 800881c:	f104 0c14 	add.w	ip, r4, #20
 8008820:	f8bc b000 	ldrh.w	fp, [ip]
 8008824:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008828:	b29b      	uxth	r3, r3
 800882a:	fb09 770b 	mla	r7, r9, fp, r7
 800882e:	4457      	add	r7, sl
 8008830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008834:	f84e 3b04 	str.w	r3, [lr], #4
 8008838:	f85c 3b04 	ldr.w	r3, [ip], #4
 800883c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008840:	f8be 3000 	ldrh.w	r3, [lr]
 8008844:	4562      	cmp	r2, ip
 8008846:	fb09 330a 	mla	r3, r9, sl, r3
 800884a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800884e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008852:	d8e5      	bhi.n	8008820 <__multiply+0x108>
 8008854:	9f01      	ldr	r7, [sp, #4]
 8008856:	51eb      	str	r3, [r5, r7]
 8008858:	3504      	adds	r5, #4
 800885a:	e79a      	b.n	8008792 <__multiply+0x7a>
 800885c:	3e01      	subs	r6, #1
 800885e:	e79c      	b.n	800879a <__multiply+0x82>
 8008860:	08009e7a 	.word	0x08009e7a
 8008864:	08009e8b 	.word	0x08009e8b

08008868 <__pow5mult>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	4615      	mov	r5, r2
 800886e:	f012 0203 	ands.w	r2, r2, #3
 8008872:	4607      	mov	r7, r0
 8008874:	460e      	mov	r6, r1
 8008876:	d007      	beq.n	8008888 <__pow5mult+0x20>
 8008878:	4c25      	ldr	r4, [pc, #148]	@ (8008910 <__pow5mult+0xa8>)
 800887a:	3a01      	subs	r2, #1
 800887c:	2300      	movs	r3, #0
 800887e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008882:	f7ff fea1 	bl	80085c8 <__multadd>
 8008886:	4606      	mov	r6, r0
 8008888:	10ad      	asrs	r5, r5, #2
 800888a:	d03d      	beq.n	8008908 <__pow5mult+0xa0>
 800888c:	69fc      	ldr	r4, [r7, #28]
 800888e:	b97c      	cbnz	r4, 80088b0 <__pow5mult+0x48>
 8008890:	2010      	movs	r0, #16
 8008892:	f7ff fd81 	bl	8008398 <malloc>
 8008896:	4602      	mov	r2, r0
 8008898:	61f8      	str	r0, [r7, #28]
 800889a:	b928      	cbnz	r0, 80088a8 <__pow5mult+0x40>
 800889c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008914 <__pow5mult+0xac>)
 80088a2:	481d      	ldr	r0, [pc, #116]	@ (8008918 <__pow5mult+0xb0>)
 80088a4:	f000 fd02 	bl	80092ac <__assert_func>
 80088a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088ac:	6004      	str	r4, [r0, #0]
 80088ae:	60c4      	str	r4, [r0, #12]
 80088b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088b8:	b94c      	cbnz	r4, 80088ce <__pow5mult+0x66>
 80088ba:	f240 2171 	movw	r1, #625	@ 0x271
 80088be:	4638      	mov	r0, r7
 80088c0:	f7ff ff14 	bl	80086ec <__i2b>
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	07eb      	lsls	r3, r5, #31
 80088d4:	d50a      	bpl.n	80088ec <__pow5mult+0x84>
 80088d6:	4631      	mov	r1, r6
 80088d8:	4622      	mov	r2, r4
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff ff1c 	bl	8008718 <__multiply>
 80088e0:	4680      	mov	r8, r0
 80088e2:	4631      	mov	r1, r6
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fe4d 	bl	8008584 <_Bfree>
 80088ea:	4646      	mov	r6, r8
 80088ec:	106d      	asrs	r5, r5, #1
 80088ee:	d00b      	beq.n	8008908 <__pow5mult+0xa0>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	b938      	cbnz	r0, 8008904 <__pow5mult+0x9c>
 80088f4:	4622      	mov	r2, r4
 80088f6:	4621      	mov	r1, r4
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7ff ff0d 	bl	8008718 <__multiply>
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	f8c0 9000 	str.w	r9, [r0]
 8008904:	4604      	mov	r4, r0
 8008906:	e7e4      	b.n	80088d2 <__pow5mult+0x6a>
 8008908:	4630      	mov	r0, r6
 800890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890e:	bf00      	nop
 8008910:	08009ee4 	.word	0x08009ee4
 8008914:	08009e0b 	.word	0x08009e0b
 8008918:	08009e8b 	.word	0x08009e8b

0800891c <__lshift>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	4607      	mov	r7, r0
 8008924:	4691      	mov	r9, r2
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	6849      	ldr	r1, [r1, #4]
 800892a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008934:	f108 0601 	add.w	r6, r8, #1
 8008938:	42b3      	cmp	r3, r6
 800893a:	db0b      	blt.n	8008954 <__lshift+0x38>
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff fde1 	bl	8008504 <_Balloc>
 8008942:	4605      	mov	r5, r0
 8008944:	b948      	cbnz	r0, 800895a <__lshift+0x3e>
 8008946:	4602      	mov	r2, r0
 8008948:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800894c:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <__lshift+0xd0>)
 800894e:	4828      	ldr	r0, [pc, #160]	@ (80089f0 <__lshift+0xd4>)
 8008950:	f000 fcac 	bl	80092ac <__assert_func>
 8008954:	3101      	adds	r1, #1
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	e7ee      	b.n	8008938 <__lshift+0x1c>
 800895a:	2300      	movs	r3, #0
 800895c:	f100 0114 	add.w	r1, r0, #20
 8008960:	f100 0210 	add.w	r2, r0, #16
 8008964:	4618      	mov	r0, r3
 8008966:	4553      	cmp	r3, sl
 8008968:	db33      	blt.n	80089d2 <__lshift+0xb6>
 800896a:	6920      	ldr	r0, [r4, #16]
 800896c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008970:	f104 0314 	add.w	r3, r4, #20
 8008974:	f019 091f 	ands.w	r9, r9, #31
 8008978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800897c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008980:	d02b      	beq.n	80089da <__lshift+0xbe>
 8008982:	468a      	mov	sl, r1
 8008984:	2200      	movs	r2, #0
 8008986:	f1c9 0e20 	rsb	lr, r9, #32
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	fa00 f009 	lsl.w	r0, r0, r9
 8008990:	4310      	orrs	r0, r2
 8008992:	f84a 0b04 	str.w	r0, [sl], #4
 8008996:	f853 2b04 	ldr.w	r2, [r3], #4
 800899a:	459c      	cmp	ip, r3
 800899c:	fa22 f20e 	lsr.w	r2, r2, lr
 80089a0:	d8f3      	bhi.n	800898a <__lshift+0x6e>
 80089a2:	ebac 0304 	sub.w	r3, ip, r4
 80089a6:	3b15      	subs	r3, #21
 80089a8:	f023 0303 	bic.w	r3, r3, #3
 80089ac:	3304      	adds	r3, #4
 80089ae:	f104 0015 	add.w	r0, r4, #21
 80089b2:	4584      	cmp	ip, r0
 80089b4:	bf38      	it	cc
 80089b6:	2304      	movcc	r3, #4
 80089b8:	50ca      	str	r2, [r1, r3]
 80089ba:	b10a      	cbz	r2, 80089c0 <__lshift+0xa4>
 80089bc:	f108 0602 	add.w	r6, r8, #2
 80089c0:	3e01      	subs	r6, #1
 80089c2:	4638      	mov	r0, r7
 80089c4:	4621      	mov	r1, r4
 80089c6:	612e      	str	r6, [r5, #16]
 80089c8:	f7ff fddc 	bl	8008584 <_Bfree>
 80089cc:	4628      	mov	r0, r5
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089d6:	3301      	adds	r3, #1
 80089d8:	e7c5      	b.n	8008966 <__lshift+0x4a>
 80089da:	3904      	subs	r1, #4
 80089dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e0:	459c      	cmp	ip, r3
 80089e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80089e6:	d8f9      	bhi.n	80089dc <__lshift+0xc0>
 80089e8:	e7ea      	b.n	80089c0 <__lshift+0xa4>
 80089ea:	bf00      	nop
 80089ec:	08009e7a 	.word	0x08009e7a
 80089f0:	08009e8b 	.word	0x08009e8b

080089f4 <__mcmp>:
 80089f4:	4603      	mov	r3, r0
 80089f6:	690a      	ldr	r2, [r1, #16]
 80089f8:	6900      	ldr	r0, [r0, #16]
 80089fa:	b530      	push	{r4, r5, lr}
 80089fc:	1a80      	subs	r0, r0, r2
 80089fe:	d10e      	bne.n	8008a1e <__mcmp+0x2a>
 8008a00:	3314      	adds	r3, #20
 8008a02:	3114      	adds	r1, #20
 8008a04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a14:	4295      	cmp	r5, r2
 8008a16:	d003      	beq.n	8008a20 <__mcmp+0x2c>
 8008a18:	d205      	bcs.n	8008a26 <__mcmp+0x32>
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d3f3      	bcc.n	8008a0c <__mcmp+0x18>
 8008a24:	e7fb      	b.n	8008a1e <__mcmp+0x2a>
 8008a26:	2001      	movs	r0, #1
 8008a28:	e7f9      	b.n	8008a1e <__mcmp+0x2a>
	...

08008a2c <__mdiff>:
 8008a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	4689      	mov	r9, r1
 8008a32:	4606      	mov	r6, r0
 8008a34:	4611      	mov	r1, r2
 8008a36:	4648      	mov	r0, r9
 8008a38:	4614      	mov	r4, r2
 8008a3a:	f7ff ffdb 	bl	80089f4 <__mcmp>
 8008a3e:	1e05      	subs	r5, r0, #0
 8008a40:	d112      	bne.n	8008a68 <__mdiff+0x3c>
 8008a42:	4629      	mov	r1, r5
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff fd5d 	bl	8008504 <_Balloc>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <__mdiff+0x2e>
 8008a4e:	f240 2137 	movw	r1, #567	@ 0x237
 8008a52:	4b3e      	ldr	r3, [pc, #248]	@ (8008b4c <__mdiff+0x120>)
 8008a54:	483e      	ldr	r0, [pc, #248]	@ (8008b50 <__mdiff+0x124>)
 8008a56:	f000 fc29 	bl	80092ac <__assert_func>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a60:	4610      	mov	r0, r2
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a68:	bfbc      	itt	lt
 8008a6a:	464b      	movlt	r3, r9
 8008a6c:	46a1      	movlt	r9, r4
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a74:	bfba      	itte	lt
 8008a76:	461c      	movlt	r4, r3
 8008a78:	2501      	movlt	r5, #1
 8008a7a:	2500      	movge	r5, #0
 8008a7c:	f7ff fd42 	bl	8008504 <_Balloc>
 8008a80:	4602      	mov	r2, r0
 8008a82:	b918      	cbnz	r0, 8008a8c <__mdiff+0x60>
 8008a84:	f240 2145 	movw	r1, #581	@ 0x245
 8008a88:	4b30      	ldr	r3, [pc, #192]	@ (8008b4c <__mdiff+0x120>)
 8008a8a:	e7e3      	b.n	8008a54 <__mdiff+0x28>
 8008a8c:	f100 0b14 	add.w	fp, r0, #20
 8008a90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a94:	f109 0310 	add.w	r3, r9, #16
 8008a98:	60c5      	str	r5, [r0, #12]
 8008a9a:	f04f 0c00 	mov.w	ip, #0
 8008a9e:	f109 0514 	add.w	r5, r9, #20
 8008aa2:	46d9      	mov	r9, fp
 8008aa4:	6926      	ldr	r6, [r4, #16]
 8008aa6:	f104 0e14 	add.w	lr, r4, #20
 8008aaa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008aae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008aba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008abe:	b281      	uxth	r1, r0
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	fa1f f38a 	uxth.w	r3, sl
 8008ac6:	1a5b      	subs	r3, r3, r1
 8008ac8:	0c00      	lsrs	r0, r0, #16
 8008aca:	4463      	add	r3, ip
 8008acc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ad0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ada:	4576      	cmp	r6, lr
 8008adc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ae0:	f849 3b04 	str.w	r3, [r9], #4
 8008ae4:	d8e6      	bhi.n	8008ab4 <__mdiff+0x88>
 8008ae6:	1b33      	subs	r3, r6, r4
 8008ae8:	3b15      	subs	r3, #21
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	3415      	adds	r4, #21
 8008af0:	3304      	adds	r3, #4
 8008af2:	42a6      	cmp	r6, r4
 8008af4:	bf38      	it	cc
 8008af6:	2304      	movcc	r3, #4
 8008af8:	441d      	add	r5, r3
 8008afa:	445b      	add	r3, fp
 8008afc:	461e      	mov	r6, r3
 8008afe:	462c      	mov	r4, r5
 8008b00:	4544      	cmp	r4, r8
 8008b02:	d30e      	bcc.n	8008b22 <__mdiff+0xf6>
 8008b04:	f108 0103 	add.w	r1, r8, #3
 8008b08:	1b49      	subs	r1, r1, r5
 8008b0a:	f021 0103 	bic.w	r1, r1, #3
 8008b0e:	3d03      	subs	r5, #3
 8008b10:	45a8      	cmp	r8, r5
 8008b12:	bf38      	it	cc
 8008b14:	2100      	movcc	r1, #0
 8008b16:	440b      	add	r3, r1
 8008b18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b1c:	b199      	cbz	r1, 8008b46 <__mdiff+0x11a>
 8008b1e:	6117      	str	r7, [r2, #16]
 8008b20:	e79e      	b.n	8008a60 <__mdiff+0x34>
 8008b22:	46e6      	mov	lr, ip
 8008b24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b28:	fa1f fc81 	uxth.w	ip, r1
 8008b2c:	44f4      	add	ip, lr
 8008b2e:	0c08      	lsrs	r0, r1, #16
 8008b30:	4471      	add	r1, lr
 8008b32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b36:	b289      	uxth	r1, r1
 8008b38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b40:	f846 1b04 	str.w	r1, [r6], #4
 8008b44:	e7dc      	b.n	8008b00 <__mdiff+0xd4>
 8008b46:	3f01      	subs	r7, #1
 8008b48:	e7e6      	b.n	8008b18 <__mdiff+0xec>
 8008b4a:	bf00      	nop
 8008b4c:	08009e7a 	.word	0x08009e7a
 8008b50:	08009e8b 	.word	0x08009e8b

08008b54 <__d2b>:
 8008b54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b58:	2101      	movs	r1, #1
 8008b5a:	4690      	mov	r8, r2
 8008b5c:	4699      	mov	r9, r3
 8008b5e:	9e08      	ldr	r6, [sp, #32]
 8008b60:	f7ff fcd0 	bl	8008504 <_Balloc>
 8008b64:	4604      	mov	r4, r0
 8008b66:	b930      	cbnz	r0, 8008b76 <__d2b+0x22>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b6e:	4b23      	ldr	r3, [pc, #140]	@ (8008bfc <__d2b+0xa8>)
 8008b70:	4823      	ldr	r0, [pc, #140]	@ (8008c00 <__d2b+0xac>)
 8008b72:	f000 fb9b 	bl	80092ac <__assert_func>
 8008b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b7e:	b10d      	cbz	r5, 8008b84 <__d2b+0x30>
 8008b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	f1b8 0300 	subs.w	r3, r8, #0
 8008b8a:	d024      	beq.n	8008bd6 <__d2b+0x82>
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f7ff fd7f 	bl	8008692 <__lo0bits>
 8008b94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b98:	b1d8      	cbz	r0, 8008bd2 <__d2b+0x7e>
 8008b9a:	f1c0 0320 	rsb	r3, r0, #32
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	40c2      	lsrs	r2, r0
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	9201      	str	r2, [sp, #4]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf0c      	ite	eq
 8008bb0:	2201      	moveq	r2, #1
 8008bb2:	2202      	movne	r2, #2
 8008bb4:	61a3      	str	r3, [r4, #24]
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	b1ad      	cbz	r5, 8008be6 <__d2b+0x92>
 8008bba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bbe:	4405      	add	r5, r0
 8008bc0:	6035      	str	r5, [r6, #0]
 8008bc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	b002      	add	sp, #8
 8008bce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008bd2:	6161      	str	r1, [r4, #20]
 8008bd4:	e7e9      	b.n	8008baa <__d2b+0x56>
 8008bd6:	a801      	add	r0, sp, #4
 8008bd8:	f7ff fd5b 	bl	8008692 <__lo0bits>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	6163      	str	r3, [r4, #20]
 8008be2:	3020      	adds	r0, #32
 8008be4:	e7e7      	b.n	8008bb6 <__d2b+0x62>
 8008be6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bee:	6030      	str	r0, [r6, #0]
 8008bf0:	6918      	ldr	r0, [r3, #16]
 8008bf2:	f7ff fd2f 	bl	8008654 <__hi0bits>
 8008bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bfa:	e7e4      	b.n	8008bc6 <__d2b+0x72>
 8008bfc:	08009e7a 	.word	0x08009e7a
 8008c00:	08009e8b 	.word	0x08009e8b

08008c04 <__ssputs_r>:
 8008c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c08:	461f      	mov	r7, r3
 8008c0a:	688e      	ldr	r6, [r1, #8]
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	42be      	cmp	r6, r7
 8008c10:	460c      	mov	r4, r1
 8008c12:	4690      	mov	r8, r2
 8008c14:	680b      	ldr	r3, [r1, #0]
 8008c16:	d82d      	bhi.n	8008c74 <__ssputs_r+0x70>
 8008c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c20:	d026      	beq.n	8008c70 <__ssputs_r+0x6c>
 8008c22:	6965      	ldr	r5, [r4, #20]
 8008c24:	6909      	ldr	r1, [r1, #16]
 8008c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c2a:	eba3 0901 	sub.w	r9, r3, r1
 8008c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c32:	1c7b      	adds	r3, r7, #1
 8008c34:	444b      	add	r3, r9
 8008c36:	106d      	asrs	r5, r5, #1
 8008c38:	429d      	cmp	r5, r3
 8008c3a:	bf38      	it	cc
 8008c3c:	461d      	movcc	r5, r3
 8008c3e:	0553      	lsls	r3, r2, #21
 8008c40:	d527      	bpl.n	8008c92 <__ssputs_r+0x8e>
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7ff fbd2 	bl	80083ec <_malloc_r>
 8008c48:	4606      	mov	r6, r0
 8008c4a:	b360      	cbz	r0, 8008ca6 <__ssputs_r+0xa2>
 8008c4c:	464a      	mov	r2, r9
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	f000 fb1e 	bl	8009290 <memcpy>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	6126      	str	r6, [r4, #16]
 8008c62:	444e      	add	r6, r9
 8008c64:	6026      	str	r6, [r4, #0]
 8008c66:	463e      	mov	r6, r7
 8008c68:	6165      	str	r5, [r4, #20]
 8008c6a:	eba5 0509 	sub.w	r5, r5, r9
 8008c6e:	60a5      	str	r5, [r4, #8]
 8008c70:	42be      	cmp	r6, r7
 8008c72:	d900      	bls.n	8008c76 <__ssputs_r+0x72>
 8008c74:	463e      	mov	r6, r7
 8008c76:	4632      	mov	r2, r6
 8008c78:	4641      	mov	r1, r8
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	f000 fabb 	bl	80091f6 <memmove>
 8008c80:	2000      	movs	r0, #0
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	4433      	add	r3, r6
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	462a      	mov	r2, r5
 8008c94:	f000 fb4e 	bl	8009334 <_realloc_r>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d1e0      	bne.n	8008c60 <__ssputs_r+0x5c>
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	6921      	ldr	r1, [r4, #16]
 8008ca2:	f7ff fb31 	bl	8008308 <_free_r>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	f8ca 3000 	str.w	r3, [sl]
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	e7e9      	b.n	8008c8e <__ssputs_r+0x8a>
	...

08008cbc <_svfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	898b      	ldrh	r3, [r1, #12]
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	061b      	lsls	r3, r3, #24
 8008cc8:	460d      	mov	r5, r1
 8008cca:	4614      	mov	r4, r2
 8008ccc:	b09d      	sub	sp, #116	@ 0x74
 8008cce:	d510      	bpl.n	8008cf2 <_svfiprintf_r+0x36>
 8008cd0:	690b      	ldr	r3, [r1, #16]
 8008cd2:	b973      	cbnz	r3, 8008cf2 <_svfiprintf_r+0x36>
 8008cd4:	2140      	movs	r1, #64	@ 0x40
 8008cd6:	f7ff fb89 	bl	80083ec <_malloc_r>
 8008cda:	6028      	str	r0, [r5, #0]
 8008cdc:	6128      	str	r0, [r5, #16]
 8008cde:	b930      	cbnz	r0, 8008cee <_svfiprintf_r+0x32>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ce8:	b01d      	add	sp, #116	@ 0x74
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	2340      	movs	r3, #64	@ 0x40
 8008cf0:	616b      	str	r3, [r5, #20]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	2320      	movs	r3, #32
 8008cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cfc:	2330      	movs	r3, #48	@ 0x30
 8008cfe:	f04f 0901 	mov.w	r9, #1
 8008d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008ea0 <_svfiprintf_r+0x1e4>
 8008d0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d0e:	4623      	mov	r3, r4
 8008d10:	469a      	mov	sl, r3
 8008d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d16:	b10a      	cbz	r2, 8008d1c <_svfiprintf_r+0x60>
 8008d18:	2a25      	cmp	r2, #37	@ 0x25
 8008d1a:	d1f9      	bne.n	8008d10 <_svfiprintf_r+0x54>
 8008d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d20:	d00b      	beq.n	8008d3a <_svfiprintf_r+0x7e>
 8008d22:	465b      	mov	r3, fp
 8008d24:	4622      	mov	r2, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ff6b 	bl	8008c04 <__ssputs_r>
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f000 80a7 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d36:	445a      	add	r2, fp
 8008d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 809f 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d44:	2300      	movs	r3, #0
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4e:	f10a 0a01 	add.w	sl, sl, #1
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d5c:	4654      	mov	r4, sl
 8008d5e:	2205      	movs	r2, #5
 8008d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d64:	484e      	ldr	r0, [pc, #312]	@ (8008ea0 <_svfiprintf_r+0x1e4>)
 8008d66:	f7fe fc70 	bl	800764a <memchr>
 8008d6a:	9a04      	ldr	r2, [sp, #16]
 8008d6c:	b9d8      	cbnz	r0, 8008da6 <_svfiprintf_r+0xea>
 8008d6e:	06d0      	lsls	r0, r2, #27
 8008d70:	bf44      	itt	mi
 8008d72:	2320      	movmi	r3, #32
 8008d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d78:	0711      	lsls	r1, r2, #28
 8008d7a:	bf44      	itt	mi
 8008d7c:	232b      	movmi	r3, #43	@ 0x2b
 8008d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d82:	f89a 3000 	ldrb.w	r3, [sl]
 8008d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d88:	d015      	beq.n	8008db6 <_svfiprintf_r+0xfa>
 8008d8a:	4654      	mov	r4, sl
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	f04f 0c0a 	mov.w	ip, #10
 8008d92:	9a07      	ldr	r2, [sp, #28]
 8008d94:	4621      	mov	r1, r4
 8008d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d9a:	3b30      	subs	r3, #48	@ 0x30
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	d94b      	bls.n	8008e38 <_svfiprintf_r+0x17c>
 8008da0:	b1b0      	cbz	r0, 8008dd0 <_svfiprintf_r+0x114>
 8008da2:	9207      	str	r2, [sp, #28]
 8008da4:	e014      	b.n	8008dd0 <_svfiprintf_r+0x114>
 8008da6:	eba0 0308 	sub.w	r3, r0, r8
 8008daa:	fa09 f303 	lsl.w	r3, r9, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	46a2      	mov	sl, r4
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	e7d2      	b.n	8008d5c <_svfiprintf_r+0xa0>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	1d19      	adds	r1, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	9103      	str	r1, [sp, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfbb      	ittet	lt
 8008dc2:	425b      	neglt	r3, r3
 8008dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc8:	9307      	strge	r3, [sp, #28]
 8008dca:	9307      	strlt	r3, [sp, #28]
 8008dcc:	bfb8      	it	lt
 8008dce:	9204      	strlt	r2, [sp, #16]
 8008dd0:	7823      	ldrb	r3, [r4, #0]
 8008dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dd4:	d10a      	bne.n	8008dec <_svfiprintf_r+0x130>
 8008dd6:	7863      	ldrb	r3, [r4, #1]
 8008dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dda:	d132      	bne.n	8008e42 <_svfiprintf_r+0x186>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	3402      	adds	r4, #2
 8008de0:	1d1a      	adds	r2, r3, #4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	9203      	str	r2, [sp, #12]
 8008de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ea4 <_svfiprintf_r+0x1e8>
 8008df0:	2203      	movs	r2, #3
 8008df2:	4650      	mov	r0, sl
 8008df4:	7821      	ldrb	r1, [r4, #0]
 8008df6:	f7fe fc28 	bl	800764a <memchr>
 8008dfa:	b138      	cbz	r0, 8008e0c <_svfiprintf_r+0x150>
 8008dfc:	2240      	movs	r2, #64	@ 0x40
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	eba0 000a 	sub.w	r0, r0, sl
 8008e04:	4082      	lsls	r2, r0
 8008e06:	4313      	orrs	r3, r2
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e10:	2206      	movs	r2, #6
 8008e12:	4825      	ldr	r0, [pc, #148]	@ (8008ea8 <_svfiprintf_r+0x1ec>)
 8008e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e18:	f7fe fc17 	bl	800764a <memchr>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d036      	beq.n	8008e8e <_svfiprintf_r+0x1d2>
 8008e20:	4b22      	ldr	r3, [pc, #136]	@ (8008eac <_svfiprintf_r+0x1f0>)
 8008e22:	bb1b      	cbnz	r3, 8008e6c <_svfiprintf_r+0x1b0>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e32:	4433      	add	r3, r6
 8008e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e36:	e76a      	b.n	8008d0e <_svfiprintf_r+0x52>
 8008e38:	460c      	mov	r4, r1
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e40:	e7a8      	b.n	8008d94 <_svfiprintf_r+0xd8>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f04f 0c0a 	mov.w	ip, #10
 8008e48:	4619      	mov	r1, r3
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e54:	3a30      	subs	r2, #48	@ 0x30
 8008e56:	2a09      	cmp	r2, #9
 8008e58:	d903      	bls.n	8008e62 <_svfiprintf_r+0x1a6>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0c6      	beq.n	8008dec <_svfiprintf_r+0x130>
 8008e5e:	9105      	str	r1, [sp, #20]
 8008e60:	e7c4      	b.n	8008dec <_svfiprintf_r+0x130>
 8008e62:	4604      	mov	r4, r0
 8008e64:	2301      	movs	r3, #1
 8008e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e6a:	e7f0      	b.n	8008e4e <_svfiprintf_r+0x192>
 8008e6c:	ab03      	add	r3, sp, #12
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4638      	mov	r0, r7
 8008e74:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e76:	a904      	add	r1, sp, #16
 8008e78:	f7fd fcb0 	bl	80067dc <_printf_float>
 8008e7c:	1c42      	adds	r2, r0, #1
 8008e7e:	4606      	mov	r6, r0
 8008e80:	d1d6      	bne.n	8008e30 <_svfiprintf_r+0x174>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	065b      	lsls	r3, r3, #25
 8008e86:	f53f af2d 	bmi.w	8008ce4 <_svfiprintf_r+0x28>
 8008e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e8c:	e72c      	b.n	8008ce8 <_svfiprintf_r+0x2c>
 8008e8e:	ab03      	add	r3, sp, #12
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	462a      	mov	r2, r5
 8008e94:	4638      	mov	r0, r7
 8008e96:	4b06      	ldr	r3, [pc, #24]	@ (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	f7fd ff3d 	bl	8006d18 <_printf_i>
 8008e9e:	e7ed      	b.n	8008e7c <_svfiprintf_r+0x1c0>
 8008ea0:	08009fe0 	.word	0x08009fe0
 8008ea4:	08009fe6 	.word	0x08009fe6
 8008ea8:	08009fea 	.word	0x08009fea
 8008eac:	080067dd 	.word	0x080067dd
 8008eb0:	08008c05 	.word	0x08008c05

08008eb4 <__sfputc_r>:
 8008eb4:	6893      	ldr	r3, [r2, #8]
 8008eb6:	b410      	push	{r4}
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	6093      	str	r3, [r2, #8]
 8008ebe:	da07      	bge.n	8008ed0 <__sfputc_r+0x1c>
 8008ec0:	6994      	ldr	r4, [r2, #24]
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	db01      	blt.n	8008eca <__sfputc_r+0x16>
 8008ec6:	290a      	cmp	r1, #10
 8008ec8:	d102      	bne.n	8008ed0 <__sfputc_r+0x1c>
 8008eca:	bc10      	pop	{r4}
 8008ecc:	f7fe baa9 	b.w	8007422 <__swbuf_r>
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	1c58      	adds	r0, r3, #1
 8008ed4:	6010      	str	r0, [r2, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	4608      	mov	r0, r1
 8008eda:	bc10      	pop	{r4}
 8008edc:	4770      	bx	lr

08008ede <__sfputs_r>:
 8008ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	460f      	mov	r7, r1
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	18d5      	adds	r5, r2, r3
 8008ee8:	42ac      	cmp	r4, r5
 8008eea:	d101      	bne.n	8008ef0 <__sfputs_r+0x12>
 8008eec:	2000      	movs	r0, #0
 8008eee:	e007      	b.n	8008f00 <__sfputs_r+0x22>
 8008ef0:	463a      	mov	r2, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	f7ff ffdc 	bl	8008eb4 <__sfputc_r>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d1f3      	bne.n	8008ee8 <__sfputs_r+0xa>
 8008f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f04 <_vfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	460d      	mov	r5, r1
 8008f0a:	4614      	mov	r4, r2
 8008f0c:	4698      	mov	r8, r3
 8008f0e:	4606      	mov	r6, r0
 8008f10:	b09d      	sub	sp, #116	@ 0x74
 8008f12:	b118      	cbz	r0, 8008f1c <_vfiprintf_r+0x18>
 8008f14:	6a03      	ldr	r3, [r0, #32]
 8008f16:	b90b      	cbnz	r3, 8008f1c <_vfiprintf_r+0x18>
 8008f18:	f7fe f966 	bl	80071e8 <__sinit>
 8008f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f1e:	07d9      	lsls	r1, r3, #31
 8008f20:	d405      	bmi.n	8008f2e <_vfiprintf_r+0x2a>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	059a      	lsls	r2, r3, #22
 8008f26:	d402      	bmi.n	8008f2e <_vfiprintf_r+0x2a>
 8008f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f2a:	f7fe fb8c 	bl	8007646 <__retarget_lock_acquire_recursive>
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	071b      	lsls	r3, r3, #28
 8008f32:	d501      	bpl.n	8008f38 <_vfiprintf_r+0x34>
 8008f34:	692b      	ldr	r3, [r5, #16]
 8008f36:	b99b      	cbnz	r3, 8008f60 <_vfiprintf_r+0x5c>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7fe fab0 	bl	80074a0 <__swsetup_r>
 8008f40:	b170      	cbz	r0, 8008f60 <_vfiprintf_r+0x5c>
 8008f42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f44:	07dc      	lsls	r4, r3, #31
 8008f46:	d504      	bpl.n	8008f52 <_vfiprintf_r+0x4e>
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f4c:	b01d      	add	sp, #116	@ 0x74
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	0598      	lsls	r0, r3, #22
 8008f56:	d4f7      	bmi.n	8008f48 <_vfiprintf_r+0x44>
 8008f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5a:	f7fe fb75 	bl	8007648 <__retarget_lock_release_recursive>
 8008f5e:	e7f3      	b.n	8008f48 <_vfiprintf_r+0x44>
 8008f60:	2300      	movs	r3, #0
 8008f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f64:	2320      	movs	r3, #32
 8008f66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f6a:	2330      	movs	r3, #48	@ 0x30
 8008f6c:	f04f 0901 	mov.w	r9, #1
 8008f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009120 <_vfiprintf_r+0x21c>
 8008f78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	469a      	mov	sl, r3
 8008f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f84:	b10a      	cbz	r2, 8008f8a <_vfiprintf_r+0x86>
 8008f86:	2a25      	cmp	r2, #37	@ 0x25
 8008f88:	d1f9      	bne.n	8008f7e <_vfiprintf_r+0x7a>
 8008f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8e:	d00b      	beq.n	8008fa8 <_vfiprintf_r+0xa4>
 8008f90:	465b      	mov	r3, fp
 8008f92:	4622      	mov	r2, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7ff ffa1 	bl	8008ede <__sfputs_r>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f000 80a7 	beq.w	80090f0 <_vfiprintf_r+0x1ec>
 8008fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fa4:	445a      	add	r2, fp
 8008fa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 809f 	beq.w	80090f0 <_vfiprintf_r+0x1ec>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fbc:	f10a 0a01 	add.w	sl, sl, #1
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	9307      	str	r3, [sp, #28]
 8008fc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fca:	4654      	mov	r4, sl
 8008fcc:	2205      	movs	r2, #5
 8008fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd2:	4853      	ldr	r0, [pc, #332]	@ (8009120 <_vfiprintf_r+0x21c>)
 8008fd4:	f7fe fb39 	bl	800764a <memchr>
 8008fd8:	9a04      	ldr	r2, [sp, #16]
 8008fda:	b9d8      	cbnz	r0, 8009014 <_vfiprintf_r+0x110>
 8008fdc:	06d1      	lsls	r1, r2, #27
 8008fde:	bf44      	itt	mi
 8008fe0:	2320      	movmi	r3, #32
 8008fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe6:	0713      	lsls	r3, r2, #28
 8008fe8:	bf44      	itt	mi
 8008fea:	232b      	movmi	r3, #43	@ 0x2b
 8008fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ff6:	d015      	beq.n	8009024 <_vfiprintf_r+0x120>
 8008ff8:	4654      	mov	r4, sl
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f04f 0c0a 	mov.w	ip, #10
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	4621      	mov	r1, r4
 8009004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009008:	3b30      	subs	r3, #48	@ 0x30
 800900a:	2b09      	cmp	r3, #9
 800900c:	d94b      	bls.n	80090a6 <_vfiprintf_r+0x1a2>
 800900e:	b1b0      	cbz	r0, 800903e <_vfiprintf_r+0x13a>
 8009010:	9207      	str	r2, [sp, #28]
 8009012:	e014      	b.n	800903e <_vfiprintf_r+0x13a>
 8009014:	eba0 0308 	sub.w	r3, r0, r8
 8009018:	fa09 f303 	lsl.w	r3, r9, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	46a2      	mov	sl, r4
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	e7d2      	b.n	8008fca <_vfiprintf_r+0xc6>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	1d19      	adds	r1, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	9103      	str	r1, [sp, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfbb      	ittet	lt
 8009030:	425b      	neglt	r3, r3
 8009032:	f042 0202 	orrlt.w	r2, r2, #2
 8009036:	9307      	strge	r3, [sp, #28]
 8009038:	9307      	strlt	r3, [sp, #28]
 800903a:	bfb8      	it	lt
 800903c:	9204      	strlt	r2, [sp, #16]
 800903e:	7823      	ldrb	r3, [r4, #0]
 8009040:	2b2e      	cmp	r3, #46	@ 0x2e
 8009042:	d10a      	bne.n	800905a <_vfiprintf_r+0x156>
 8009044:	7863      	ldrb	r3, [r4, #1]
 8009046:	2b2a      	cmp	r3, #42	@ 0x2a
 8009048:	d132      	bne.n	80090b0 <_vfiprintf_r+0x1ac>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3402      	adds	r4, #2
 800904e:	1d1a      	adds	r2, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9203      	str	r2, [sp, #12]
 8009054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009124 <_vfiprintf_r+0x220>
 800905e:	2203      	movs	r2, #3
 8009060:	4650      	mov	r0, sl
 8009062:	7821      	ldrb	r1, [r4, #0]
 8009064:	f7fe faf1 	bl	800764a <memchr>
 8009068:	b138      	cbz	r0, 800907a <_vfiprintf_r+0x176>
 800906a:	2240      	movs	r2, #64	@ 0x40
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	eba0 000a 	sub.w	r0, r0, sl
 8009072:	4082      	lsls	r2, r0
 8009074:	4313      	orrs	r3, r2
 8009076:	3401      	adds	r4, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	2206      	movs	r2, #6
 8009080:	4829      	ldr	r0, [pc, #164]	@ (8009128 <_vfiprintf_r+0x224>)
 8009082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009086:	f7fe fae0 	bl	800764a <memchr>
 800908a:	2800      	cmp	r0, #0
 800908c:	d03f      	beq.n	800910e <_vfiprintf_r+0x20a>
 800908e:	4b27      	ldr	r3, [pc, #156]	@ (800912c <_vfiprintf_r+0x228>)
 8009090:	bb1b      	cbnz	r3, 80090da <_vfiprintf_r+0x1d6>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	3307      	adds	r3, #7
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	3308      	adds	r3, #8
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	443b      	add	r3, r7
 80090a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a4:	e76a      	b.n	8008f7c <_vfiprintf_r+0x78>
 80090a6:	460c      	mov	r4, r1
 80090a8:	2001      	movs	r0, #1
 80090aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ae:	e7a8      	b.n	8009002 <_vfiprintf_r+0xfe>
 80090b0:	2300      	movs	r3, #0
 80090b2:	f04f 0c0a 	mov.w	ip, #10
 80090b6:	4619      	mov	r1, r3
 80090b8:	3401      	adds	r4, #1
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	4620      	mov	r0, r4
 80090be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c2:	3a30      	subs	r2, #48	@ 0x30
 80090c4:	2a09      	cmp	r2, #9
 80090c6:	d903      	bls.n	80090d0 <_vfiprintf_r+0x1cc>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0c6      	beq.n	800905a <_vfiprintf_r+0x156>
 80090cc:	9105      	str	r1, [sp, #20]
 80090ce:	e7c4      	b.n	800905a <_vfiprintf_r+0x156>
 80090d0:	4604      	mov	r4, r0
 80090d2:	2301      	movs	r3, #1
 80090d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d8:	e7f0      	b.n	80090bc <_vfiprintf_r+0x1b8>
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	4b13      	ldr	r3, [pc, #76]	@ (8009130 <_vfiprintf_r+0x22c>)
 80090e4:	a904      	add	r1, sp, #16
 80090e6:	f7fd fb79 	bl	80067dc <_printf_float>
 80090ea:	4607      	mov	r7, r0
 80090ec:	1c78      	adds	r0, r7, #1
 80090ee:	d1d6      	bne.n	800909e <_vfiprintf_r+0x19a>
 80090f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	d405      	bmi.n	8009102 <_vfiprintf_r+0x1fe>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d402      	bmi.n	8009102 <_vfiprintf_r+0x1fe>
 80090fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090fe:	f7fe faa3 	bl	8007648 <__retarget_lock_release_recursive>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	065b      	lsls	r3, r3, #25
 8009106:	f53f af1f 	bmi.w	8008f48 <_vfiprintf_r+0x44>
 800910a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800910c:	e71e      	b.n	8008f4c <_vfiprintf_r+0x48>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4630      	mov	r0, r6
 8009116:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <_vfiprintf_r+0x22c>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	f7fd fdfd 	bl	8006d18 <_printf_i>
 800911e:	e7e4      	b.n	80090ea <_vfiprintf_r+0x1e6>
 8009120:	08009fe0 	.word	0x08009fe0
 8009124:	08009fe6 	.word	0x08009fe6
 8009128:	08009fea 	.word	0x08009fea
 800912c:	080067dd 	.word	0x080067dd
 8009130:	08008edf 	.word	0x08008edf

08009134 <__swhatbuf_r>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	460c      	mov	r4, r1
 8009138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913c:	4615      	mov	r5, r2
 800913e:	2900      	cmp	r1, #0
 8009140:	461e      	mov	r6, r3
 8009142:	b096      	sub	sp, #88	@ 0x58
 8009144:	da0c      	bge.n	8009160 <__swhatbuf_r+0x2c>
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	2100      	movs	r1, #0
 800914a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800914e:	bf14      	ite	ne
 8009150:	2340      	movne	r3, #64	@ 0x40
 8009152:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009156:	2000      	movs	r0, #0
 8009158:	6031      	str	r1, [r6, #0]
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	b016      	add	sp, #88	@ 0x58
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	466a      	mov	r2, sp
 8009162:	f000 f863 	bl	800922c <_fstat_r>
 8009166:	2800      	cmp	r0, #0
 8009168:	dbed      	blt.n	8009146 <__swhatbuf_r+0x12>
 800916a:	9901      	ldr	r1, [sp, #4]
 800916c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009170:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009174:	4259      	negs	r1, r3
 8009176:	4159      	adcs	r1, r3
 8009178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800917c:	e7eb      	b.n	8009156 <__swhatbuf_r+0x22>

0800917e <__smakebuf_r>:
 800917e:	898b      	ldrh	r3, [r1, #12]
 8009180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009182:	079d      	lsls	r5, r3, #30
 8009184:	4606      	mov	r6, r0
 8009186:	460c      	mov	r4, r1
 8009188:	d507      	bpl.n	800919a <__smakebuf_r+0x1c>
 800918a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	6123      	str	r3, [r4, #16]
 8009192:	2301      	movs	r3, #1
 8009194:	6163      	str	r3, [r4, #20]
 8009196:	b003      	add	sp, #12
 8009198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800919a:	466a      	mov	r2, sp
 800919c:	ab01      	add	r3, sp, #4
 800919e:	f7ff ffc9 	bl	8009134 <__swhatbuf_r>
 80091a2:	9f00      	ldr	r7, [sp, #0]
 80091a4:	4605      	mov	r5, r0
 80091a6:	4639      	mov	r1, r7
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff f91f 	bl	80083ec <_malloc_r>
 80091ae:	b948      	cbnz	r0, 80091c4 <__smakebuf_r+0x46>
 80091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d4ee      	bmi.n	8009196 <__smakebuf_r+0x18>
 80091b8:	f023 0303 	bic.w	r3, r3, #3
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	e7e2      	b.n	800918a <__smakebuf_r+0xc>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	6020      	str	r0, [r4, #0]
 80091d4:	b15b      	cbz	r3, 80091ee <__smakebuf_r+0x70>
 80091d6:	4630      	mov	r0, r6
 80091d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091dc:	f000 f838 	bl	8009250 <_isatty_r>
 80091e0:	b128      	cbz	r0, 80091ee <__smakebuf_r+0x70>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	431d      	orrs	r5, r3
 80091f2:	81a5      	strh	r5, [r4, #12]
 80091f4:	e7cf      	b.n	8009196 <__smakebuf_r+0x18>

080091f6 <memmove>:
 80091f6:	4288      	cmp	r0, r1
 80091f8:	b510      	push	{r4, lr}
 80091fa:	eb01 0402 	add.w	r4, r1, r2
 80091fe:	d902      	bls.n	8009206 <memmove+0x10>
 8009200:	4284      	cmp	r4, r0
 8009202:	4623      	mov	r3, r4
 8009204:	d807      	bhi.n	8009216 <memmove+0x20>
 8009206:	1e43      	subs	r3, r0, #1
 8009208:	42a1      	cmp	r1, r4
 800920a:	d008      	beq.n	800921e <memmove+0x28>
 800920c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009210:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009214:	e7f8      	b.n	8009208 <memmove+0x12>
 8009216:	4601      	mov	r1, r0
 8009218:	4402      	add	r2, r0
 800921a:	428a      	cmp	r2, r1
 800921c:	d100      	bne.n	8009220 <memmove+0x2a>
 800921e:	bd10      	pop	{r4, pc}
 8009220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009224:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009228:	e7f7      	b.n	800921a <memmove+0x24>
	...

0800922c <_fstat_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	2300      	movs	r3, #0
 8009230:	4d06      	ldr	r5, [pc, #24]	@ (800924c <_fstat_r+0x20>)
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	4611      	mov	r1, r2
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	f7fd f8b0 	bl	800639e <_fstat>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d102      	bne.n	8009248 <_fstat_r+0x1c>
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	b103      	cbz	r3, 8009248 <_fstat_r+0x1c>
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	200005fc 	.word	0x200005fc

08009250 <_isatty_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	2300      	movs	r3, #0
 8009254:	4d05      	ldr	r5, [pc, #20]	@ (800926c <_isatty_r+0x1c>)
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7fd fa02 	bl	8006664 <_isatty>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_isatty_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_isatty_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	200005fc 	.word	0x200005fc

08009270 <_sbrk_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	2300      	movs	r3, #0
 8009274:	4d05      	ldr	r5, [pc, #20]	@ (800928c <_sbrk_r+0x1c>)
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7f8 fb10 	bl	80018a0 <_sbrk>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_sbrk_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_sbrk_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200005fc 	.word	0x200005fc

08009290 <memcpy>:
 8009290:	440a      	add	r2, r1
 8009292:	4291      	cmp	r1, r2
 8009294:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009298:	d100      	bne.n	800929c <memcpy+0xc>
 800929a:	4770      	bx	lr
 800929c:	b510      	push	{r4, lr}
 800929e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a2:	4291      	cmp	r1, r2
 80092a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092a8:	d1f9      	bne.n	800929e <memcpy+0xe>
 80092aa:	bd10      	pop	{r4, pc}

080092ac <__assert_func>:
 80092ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ae:	4614      	mov	r4, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b09      	ldr	r3, [pc, #36]	@ (80092d8 <__assert_func+0x2c>)
 80092b4:	4605      	mov	r5, r0
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68d8      	ldr	r0, [r3, #12]
 80092ba:	b954      	cbnz	r4, 80092d2 <__assert_func+0x26>
 80092bc:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <__assert_func+0x30>)
 80092be:	461c      	mov	r4, r3
 80092c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c4:	9100      	str	r1, [sp, #0]
 80092c6:	462b      	mov	r3, r5
 80092c8:	4905      	ldr	r1, [pc, #20]	@ (80092e0 <__assert_func+0x34>)
 80092ca:	f000 f86f 	bl	80093ac <fiprintf>
 80092ce:	f000 f87f 	bl	80093d0 <abort>
 80092d2:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <__assert_func+0x38>)
 80092d4:	e7f4      	b.n	80092c0 <__assert_func+0x14>
 80092d6:	bf00      	nop
 80092d8:	20000044 	.word	0x20000044
 80092dc:	0800a036 	.word	0x0800a036
 80092e0:	0800a008 	.word	0x0800a008
 80092e4:	08009ffb 	.word	0x08009ffb

080092e8 <_calloc_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	fba1 5402 	umull	r5, r4, r1, r2
 80092ee:	b93c      	cbnz	r4, 8009300 <_calloc_r+0x18>
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7ff f87b 	bl	80083ec <_malloc_r>
 80092f6:	4606      	mov	r6, r0
 80092f8:	b928      	cbnz	r0, 8009306 <_calloc_r+0x1e>
 80092fa:	2600      	movs	r6, #0
 80092fc:	4630      	mov	r0, r6
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	220c      	movs	r2, #12
 8009302:	6002      	str	r2, [r0, #0]
 8009304:	e7f9      	b.n	80092fa <_calloc_r+0x12>
 8009306:	462a      	mov	r2, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7fe f91f 	bl	800754c <memset>
 800930e:	e7f5      	b.n	80092fc <_calloc_r+0x14>

08009310 <__ascii_mbtowc>:
 8009310:	b082      	sub	sp, #8
 8009312:	b901      	cbnz	r1, 8009316 <__ascii_mbtowc+0x6>
 8009314:	a901      	add	r1, sp, #4
 8009316:	b142      	cbz	r2, 800932a <__ascii_mbtowc+0x1a>
 8009318:	b14b      	cbz	r3, 800932e <__ascii_mbtowc+0x1e>
 800931a:	7813      	ldrb	r3, [r2, #0]
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	1e10      	subs	r0, r2, #0
 8009322:	bf18      	it	ne
 8009324:	2001      	movne	r0, #1
 8009326:	b002      	add	sp, #8
 8009328:	4770      	bx	lr
 800932a:	4610      	mov	r0, r2
 800932c:	e7fb      	b.n	8009326 <__ascii_mbtowc+0x16>
 800932e:	f06f 0001 	mvn.w	r0, #1
 8009332:	e7f8      	b.n	8009326 <__ascii_mbtowc+0x16>

08009334 <_realloc_r>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	4680      	mov	r8, r0
 800933a:	4615      	mov	r5, r2
 800933c:	460c      	mov	r4, r1
 800933e:	b921      	cbnz	r1, 800934a <_realloc_r+0x16>
 8009340:	4611      	mov	r1, r2
 8009342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009346:	f7ff b851 	b.w	80083ec <_malloc_r>
 800934a:	b92a      	cbnz	r2, 8009358 <_realloc_r+0x24>
 800934c:	f7fe ffdc 	bl	8008308 <_free_r>
 8009350:	2400      	movs	r4, #0
 8009352:	4620      	mov	r0, r4
 8009354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009358:	f000 f841 	bl	80093de <_malloc_usable_size_r>
 800935c:	4285      	cmp	r5, r0
 800935e:	4606      	mov	r6, r0
 8009360:	d802      	bhi.n	8009368 <_realloc_r+0x34>
 8009362:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009366:	d8f4      	bhi.n	8009352 <_realloc_r+0x1e>
 8009368:	4629      	mov	r1, r5
 800936a:	4640      	mov	r0, r8
 800936c:	f7ff f83e 	bl	80083ec <_malloc_r>
 8009370:	4607      	mov	r7, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d0ec      	beq.n	8009350 <_realloc_r+0x1c>
 8009376:	42b5      	cmp	r5, r6
 8009378:	462a      	mov	r2, r5
 800937a:	4621      	mov	r1, r4
 800937c:	bf28      	it	cs
 800937e:	4632      	movcs	r2, r6
 8009380:	f7ff ff86 	bl	8009290 <memcpy>
 8009384:	4621      	mov	r1, r4
 8009386:	4640      	mov	r0, r8
 8009388:	f7fe ffbe 	bl	8008308 <_free_r>
 800938c:	463c      	mov	r4, r7
 800938e:	e7e0      	b.n	8009352 <_realloc_r+0x1e>

08009390 <__ascii_wctomb>:
 8009390:	4603      	mov	r3, r0
 8009392:	4608      	mov	r0, r1
 8009394:	b141      	cbz	r1, 80093a8 <__ascii_wctomb+0x18>
 8009396:	2aff      	cmp	r2, #255	@ 0xff
 8009398:	d904      	bls.n	80093a4 <__ascii_wctomb+0x14>
 800939a:	228a      	movs	r2, #138	@ 0x8a
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	4770      	bx	lr
 80093a4:	2001      	movs	r0, #1
 80093a6:	700a      	strb	r2, [r1, #0]
 80093a8:	4770      	bx	lr
	...

080093ac <fiprintf>:
 80093ac:	b40e      	push	{r1, r2, r3}
 80093ae:	b503      	push	{r0, r1, lr}
 80093b0:	4601      	mov	r1, r0
 80093b2:	ab03      	add	r3, sp, #12
 80093b4:	4805      	ldr	r0, [pc, #20]	@ (80093cc <fiprintf+0x20>)
 80093b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	f7ff fda1 	bl	8008f04 <_vfiprintf_r>
 80093c2:	b002      	add	sp, #8
 80093c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c8:	b003      	add	sp, #12
 80093ca:	4770      	bx	lr
 80093cc:	20000044 	.word	0x20000044

080093d0 <abort>:
 80093d0:	2006      	movs	r0, #6
 80093d2:	b508      	push	{r3, lr}
 80093d4:	f000 f834 	bl	8009440 <raise>
 80093d8:	2001      	movs	r0, #1
 80093da:	f000 fa79 	bl	80098d0 <_exit>

080093de <_malloc_usable_size_r>:
 80093de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e2:	1f18      	subs	r0, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfbc      	itt	lt
 80093e8:	580b      	ldrlt	r3, [r1, r0]
 80093ea:	18c0      	addlt	r0, r0, r3
 80093ec:	4770      	bx	lr

080093ee <_raise_r>:
 80093ee:	291f      	cmp	r1, #31
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4605      	mov	r5, r0
 80093f4:	460c      	mov	r4, r1
 80093f6:	d904      	bls.n	8009402 <_raise_r+0x14>
 80093f8:	2316      	movs	r3, #22
 80093fa:	6003      	str	r3, [r0, #0]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009404:	b112      	cbz	r2, 800940c <_raise_r+0x1e>
 8009406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800940a:	b94b      	cbnz	r3, 8009420 <_raise_r+0x32>
 800940c:	4628      	mov	r0, r5
 800940e:	f000 f831 	bl	8009474 <_getpid_r>
 8009412:	4622      	mov	r2, r4
 8009414:	4601      	mov	r1, r0
 8009416:	4628      	mov	r0, r5
 8009418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941c:	f000 b818 	b.w	8009450 <_kill_r>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d00a      	beq.n	800943a <_raise_r+0x4c>
 8009424:	1c59      	adds	r1, r3, #1
 8009426:	d103      	bne.n	8009430 <_raise_r+0x42>
 8009428:	2316      	movs	r3, #22
 800942a:	6003      	str	r3, [r0, #0]
 800942c:	2001      	movs	r0, #1
 800942e:	e7e7      	b.n	8009400 <_raise_r+0x12>
 8009430:	2100      	movs	r1, #0
 8009432:	4620      	mov	r0, r4
 8009434:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009438:	4798      	blx	r3
 800943a:	2000      	movs	r0, #0
 800943c:	e7e0      	b.n	8009400 <_raise_r+0x12>
	...

08009440 <raise>:
 8009440:	4b02      	ldr	r3, [pc, #8]	@ (800944c <raise+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f7ff bfd2 	b.w	80093ee <_raise_r>
 800944a:	bf00      	nop
 800944c:	20000044 	.word	0x20000044

08009450 <_kill_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	2300      	movs	r3, #0
 8009454:	4d06      	ldr	r5, [pc, #24]	@ (8009470 <_kill_r+0x20>)
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	602b      	str	r3, [r5, #0]
 800945e:	f000 fa2f 	bl	80098c0 <_kill>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d102      	bne.n	800946c <_kill_r+0x1c>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	b103      	cbz	r3, 800946c <_kill_r+0x1c>
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	200005fc 	.word	0x200005fc

08009474 <_getpid_r>:
 8009474:	f7fc bf70 	b.w	8006358 <_getpid>

08009478 <atan2f>:
 8009478:	f000 b88a 	b.w	8009590 <__ieee754_atan2f>

0800947c <sqrtf>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4605      	mov	r5, r0
 8009480:	f000 f816 	bl	80094b0 <__ieee754_sqrtf>
 8009484:	4629      	mov	r1, r5
 8009486:	4604      	mov	r4, r0
 8009488:	4628      	mov	r0, r5
 800948a:	f7f7 fe21 	bl	80010d0 <__aeabi_fcmpun>
 800948e:	b968      	cbnz	r0, 80094ac <sqrtf+0x30>
 8009490:	2100      	movs	r1, #0
 8009492:	4628      	mov	r0, r5
 8009494:	f7f7 fdf4 	bl	8001080 <__aeabi_fcmplt>
 8009498:	b140      	cbz	r0, 80094ac <sqrtf+0x30>
 800949a:	f7fe f8a9 	bl	80075f0 <__errno>
 800949e:	2321      	movs	r3, #33	@ 0x21
 80094a0:	2100      	movs	r1, #0
 80094a2:	6003      	str	r3, [r0, #0]
 80094a4:	4608      	mov	r0, r1
 80094a6:	f7f7 fd01 	bl	8000eac <__aeabi_fdiv>
 80094aa:	4604      	mov	r4, r0
 80094ac:	4620      	mov	r0, r4
 80094ae:	bd38      	pop	{r3, r4, r5, pc}

080094b0 <__ieee754_sqrtf>:
 80094b0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80094b4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	4603      	mov	r3, r0
 80094be:	4604      	mov	r4, r0
 80094c0:	d30a      	bcc.n	80094d8 <__ieee754_sqrtf+0x28>
 80094c2:	4601      	mov	r1, r0
 80094c4:	f7f7 fc3e 	bl	8000d44 <__aeabi_fmul>
 80094c8:	4601      	mov	r1, r0
 80094ca:	4620      	mov	r0, r4
 80094cc:	f7f7 fb32 	bl	8000b34 <__addsf3>
 80094d0:	4604      	mov	r4, r0
 80094d2:	4620      	mov	r0, r4
 80094d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d0fa      	beq.n	80094d2 <__ieee754_sqrtf+0x22>
 80094dc:	2800      	cmp	r0, #0
 80094de:	da06      	bge.n	80094ee <__ieee754_sqrtf+0x3e>
 80094e0:	4601      	mov	r1, r0
 80094e2:	f7f7 fb25 	bl	8000b30 <__aeabi_fsub>
 80094e6:	4601      	mov	r1, r0
 80094e8:	f7f7 fce0 	bl	8000eac <__aeabi_fdiv>
 80094ec:	e7f0      	b.n	80094d0 <__ieee754_sqrtf+0x20>
 80094ee:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80094f2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80094f6:	d03e      	beq.n	8009576 <__ieee754_sqrtf+0xc6>
 80094f8:	2400      	movs	r4, #0
 80094fa:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80094fe:	07ca      	lsls	r2, r1, #31
 8009500:	f04f 0019 	mov.w	r0, #25
 8009504:	4626      	mov	r6, r4
 8009506:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800950a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800950e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009512:	bf58      	it	pl
 8009514:	005b      	lslpl	r3, r3, #1
 8009516:	106d      	asrs	r5, r5, #1
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	1872      	adds	r2, r6, r1
 800951c:	429a      	cmp	r2, r3
 800951e:	bfcf      	iteee	gt
 8009520:	461a      	movgt	r2, r3
 8009522:	1856      	addle	r6, r2, r1
 8009524:	1864      	addle	r4, r4, r1
 8009526:	1a9a      	suble	r2, r3, r2
 8009528:	3801      	subs	r0, #1
 800952a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800952e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009532:	d1f2      	bne.n	800951a <__ieee754_sqrtf+0x6a>
 8009534:	b1ba      	cbz	r2, 8009566 <__ieee754_sqrtf+0xb6>
 8009536:	4e14      	ldr	r6, [pc, #80]	@ (8009588 <__ieee754_sqrtf+0xd8>)
 8009538:	4f14      	ldr	r7, [pc, #80]	@ (800958c <__ieee754_sqrtf+0xdc>)
 800953a:	6830      	ldr	r0, [r6, #0]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	f7f7 faf7 	bl	8000b30 <__aeabi_fsub>
 8009542:	f8d6 8000 	ldr.w	r8, [r6]
 8009546:	4601      	mov	r1, r0
 8009548:	4640      	mov	r0, r8
 800954a:	f7f7 fda3 	bl	8001094 <__aeabi_fcmple>
 800954e:	b150      	cbz	r0, 8009566 <__ieee754_sqrtf+0xb6>
 8009550:	6830      	ldr	r0, [r6, #0]
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	f7f7 faee 	bl	8000b34 <__addsf3>
 8009558:	6836      	ldr	r6, [r6, #0]
 800955a:	4601      	mov	r1, r0
 800955c:	4630      	mov	r0, r6
 800955e:	f7f7 fd8f 	bl	8001080 <__aeabi_fcmplt>
 8009562:	b168      	cbz	r0, 8009580 <__ieee754_sqrtf+0xd0>
 8009564:	3402      	adds	r4, #2
 8009566:	1064      	asrs	r4, r4, #1
 8009568:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800956c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009570:	e7af      	b.n	80094d2 <__ieee754_sqrtf+0x22>
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	3201      	adds	r2, #1
 8009576:	0218      	lsls	r0, r3, #8
 8009578:	d5fb      	bpl.n	8009572 <__ieee754_sqrtf+0xc2>
 800957a:	3a01      	subs	r2, #1
 800957c:	1a89      	subs	r1, r1, r2
 800957e:	e7bb      	b.n	80094f8 <__ieee754_sqrtf+0x48>
 8009580:	3401      	adds	r4, #1
 8009582:	f024 0401 	bic.w	r4, r4, #1
 8009586:	e7ee      	b.n	8009566 <__ieee754_sqrtf+0xb6>
 8009588:	20000204 	.word	0x20000204
 800958c:	20000200 	.word	0x20000200

08009590 <__ieee754_atan2f>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009596:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800959a:	4603      	mov	r3, r0
 800959c:	d805      	bhi.n	80095aa <__ieee754_atan2f+0x1a>
 800959e:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80095a2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80095a6:	4607      	mov	r7, r0
 80095a8:	d904      	bls.n	80095b4 <__ieee754_atan2f+0x24>
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f7 fac2 	bl	8000b34 <__addsf3>
 80095b0:	4603      	mov	r3, r0
 80095b2:	e010      	b.n	80095d6 <__ieee754_atan2f+0x46>
 80095b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80095b8:	d103      	bne.n	80095c2 <__ieee754_atan2f+0x32>
 80095ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095be:	f000 b86f 	b.w	80096a0 <atanf>
 80095c2:	178c      	asrs	r4, r1, #30
 80095c4:	f004 0402 	and.w	r4, r4, #2
 80095c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80095cc:	b92a      	cbnz	r2, 80095da <__ieee754_atan2f+0x4a>
 80095ce:	2c02      	cmp	r4, #2
 80095d0:	d04b      	beq.n	800966a <__ieee754_atan2f+0xda>
 80095d2:	2c03      	cmp	r4, #3
 80095d4:	d04b      	beq.n	800966e <__ieee754_atan2f+0xde>
 80095d6:	4618      	mov	r0, r3
 80095d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095da:	b91e      	cbnz	r6, 80095e4 <__ieee754_atan2f+0x54>
 80095dc:	2f00      	cmp	r7, #0
 80095de:	da4c      	bge.n	800967a <__ieee754_atan2f+0xea>
 80095e0:	4b27      	ldr	r3, [pc, #156]	@ (8009680 <__ieee754_atan2f+0xf0>)
 80095e2:	e7f8      	b.n	80095d6 <__ieee754_atan2f+0x46>
 80095e4:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80095e8:	d10e      	bne.n	8009608 <__ieee754_atan2f+0x78>
 80095ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80095ee:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80095f2:	d105      	bne.n	8009600 <__ieee754_atan2f+0x70>
 80095f4:	2c02      	cmp	r4, #2
 80095f6:	d83c      	bhi.n	8009672 <__ieee754_atan2f+0xe2>
 80095f8:	4b22      	ldr	r3, [pc, #136]	@ (8009684 <__ieee754_atan2f+0xf4>)
 80095fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80095fe:	e7ea      	b.n	80095d6 <__ieee754_atan2f+0x46>
 8009600:	2c02      	cmp	r4, #2
 8009602:	d838      	bhi.n	8009676 <__ieee754_atan2f+0xe6>
 8009604:	4b20      	ldr	r3, [pc, #128]	@ (8009688 <__ieee754_atan2f+0xf8>)
 8009606:	e7f8      	b.n	80095fa <__ieee754_atan2f+0x6a>
 8009608:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800960c:	d0e6      	beq.n	80095dc <__ieee754_atan2f+0x4c>
 800960e:	1b92      	subs	r2, r2, r6
 8009610:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8009614:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009618:	da17      	bge.n	800964a <__ieee754_atan2f+0xba>
 800961a:	2900      	cmp	r1, #0
 800961c:	da01      	bge.n	8009622 <__ieee754_atan2f+0x92>
 800961e:	303c      	adds	r0, #60	@ 0x3c
 8009620:	db15      	blt.n	800964e <__ieee754_atan2f+0xbe>
 8009622:	4618      	mov	r0, r3
 8009624:	f7f7 fc42 	bl	8000eac <__aeabi_fdiv>
 8009628:	f000 f946 	bl	80098b8 <fabsf>
 800962c:	f000 f838 	bl	80096a0 <atanf>
 8009630:	4603      	mov	r3, r0
 8009632:	2c01      	cmp	r4, #1
 8009634:	d00d      	beq.n	8009652 <__ieee754_atan2f+0xc2>
 8009636:	2c02      	cmp	r4, #2
 8009638:	d00e      	beq.n	8009658 <__ieee754_atan2f+0xc8>
 800963a:	2c00      	cmp	r4, #0
 800963c:	d0cb      	beq.n	80095d6 <__ieee754_atan2f+0x46>
 800963e:	4913      	ldr	r1, [pc, #76]	@ (800968c <__ieee754_atan2f+0xfc>)
 8009640:	4618      	mov	r0, r3
 8009642:	f7f7 fa77 	bl	8000b34 <__addsf3>
 8009646:	4912      	ldr	r1, [pc, #72]	@ (8009690 <__ieee754_atan2f+0x100>)
 8009648:	e00c      	b.n	8009664 <__ieee754_atan2f+0xd4>
 800964a:	4b12      	ldr	r3, [pc, #72]	@ (8009694 <__ieee754_atan2f+0x104>)
 800964c:	e7f1      	b.n	8009632 <__ieee754_atan2f+0xa2>
 800964e:	2300      	movs	r3, #0
 8009650:	e7ef      	b.n	8009632 <__ieee754_atan2f+0xa2>
 8009652:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009656:	e7be      	b.n	80095d6 <__ieee754_atan2f+0x46>
 8009658:	490c      	ldr	r1, [pc, #48]	@ (800968c <__ieee754_atan2f+0xfc>)
 800965a:	4618      	mov	r0, r3
 800965c:	f7f7 fa6a 	bl	8000b34 <__addsf3>
 8009660:	4601      	mov	r1, r0
 8009662:	480b      	ldr	r0, [pc, #44]	@ (8009690 <__ieee754_atan2f+0x100>)
 8009664:	f7f7 fa64 	bl	8000b30 <__aeabi_fsub>
 8009668:	e7a2      	b.n	80095b0 <__ieee754_atan2f+0x20>
 800966a:	4b09      	ldr	r3, [pc, #36]	@ (8009690 <__ieee754_atan2f+0x100>)
 800966c:	e7b3      	b.n	80095d6 <__ieee754_atan2f+0x46>
 800966e:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <__ieee754_atan2f+0x108>)
 8009670:	e7b1      	b.n	80095d6 <__ieee754_atan2f+0x46>
 8009672:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <__ieee754_atan2f+0x10c>)
 8009674:	e7af      	b.n	80095d6 <__ieee754_atan2f+0x46>
 8009676:	2300      	movs	r3, #0
 8009678:	e7ad      	b.n	80095d6 <__ieee754_atan2f+0x46>
 800967a:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <__ieee754_atan2f+0x104>)
 800967c:	e7ab      	b.n	80095d6 <__ieee754_atan2f+0x46>
 800967e:	bf00      	nop
 8009680:	bfc90fdb 	.word	0xbfc90fdb
 8009684:	0800a144 	.word	0x0800a144
 8009688:	0800a138 	.word	0x0800a138
 800968c:	33bbbd2e 	.word	0x33bbbd2e
 8009690:	40490fdb 	.word	0x40490fdb
 8009694:	3fc90fdb 	.word	0x3fc90fdb
 8009698:	c0490fdb 	.word	0xc0490fdb
 800969c:	3f490fdb 	.word	0x3f490fdb

080096a0 <atanf>:
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80096a8:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 80096ac:	4604      	mov	r4, r0
 80096ae:	4680      	mov	r8, r0
 80096b0:	d30e      	bcc.n	80096d0 <atanf+0x30>
 80096b2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80096b6:	d904      	bls.n	80096c2 <atanf+0x22>
 80096b8:	4601      	mov	r1, r0
 80096ba:	f7f7 fa3b 	bl	8000b34 <__addsf3>
 80096be:	4604      	mov	r4, r0
 80096c0:	e003      	b.n	80096ca <atanf+0x2a>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f340 80ce 	ble.w	8009864 <atanf+0x1c4>
 80096c8:	4c67      	ldr	r4, [pc, #412]	@ (8009868 <atanf+0x1c8>)
 80096ca:	4620      	mov	r0, r4
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	4b66      	ldr	r3, [pc, #408]	@ (800986c <atanf+0x1cc>)
 80096d2:	429d      	cmp	r5, r3
 80096d4:	d80e      	bhi.n	80096f4 <atanf+0x54>
 80096d6:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 80096da:	d208      	bcs.n	80096ee <atanf+0x4e>
 80096dc:	4964      	ldr	r1, [pc, #400]	@ (8009870 <atanf+0x1d0>)
 80096de:	f7f7 fa29 	bl	8000b34 <__addsf3>
 80096e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80096e6:	f7f7 fce9 	bl	80010bc <__aeabi_fcmpgt>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d1ed      	bne.n	80096ca <atanf+0x2a>
 80096ee:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80096f2:	e01c      	b.n	800972e <atanf+0x8e>
 80096f4:	f000 f8e0 	bl	80098b8 <fabsf>
 80096f8:	4b5e      	ldr	r3, [pc, #376]	@ (8009874 <atanf+0x1d4>)
 80096fa:	4604      	mov	r4, r0
 80096fc:	429d      	cmp	r5, r3
 80096fe:	d87c      	bhi.n	80097fa <atanf+0x15a>
 8009700:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009704:	429d      	cmp	r5, r3
 8009706:	d867      	bhi.n	80097d8 <atanf+0x138>
 8009708:	4601      	mov	r1, r0
 800970a:	f7f7 fa13 	bl	8000b34 <__addsf3>
 800970e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009712:	f7f7 fa0d 	bl	8000b30 <__aeabi_fsub>
 8009716:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800971a:	4605      	mov	r5, r0
 800971c:	4620      	mov	r0, r4
 800971e:	f7f7 fa09 	bl	8000b34 <__addsf3>
 8009722:	4601      	mov	r1, r0
 8009724:	4628      	mov	r0, r5
 8009726:	f7f7 fbc1 	bl	8000eac <__aeabi_fdiv>
 800972a:	2600      	movs	r6, #0
 800972c:	4604      	mov	r4, r0
 800972e:	4621      	mov	r1, r4
 8009730:	4620      	mov	r0, r4
 8009732:	f7f7 fb07 	bl	8000d44 <__aeabi_fmul>
 8009736:	4601      	mov	r1, r0
 8009738:	4607      	mov	r7, r0
 800973a:	f7f7 fb03 	bl	8000d44 <__aeabi_fmul>
 800973e:	4605      	mov	r5, r0
 8009740:	494d      	ldr	r1, [pc, #308]	@ (8009878 <atanf+0x1d8>)
 8009742:	f7f7 faff 	bl	8000d44 <__aeabi_fmul>
 8009746:	494d      	ldr	r1, [pc, #308]	@ (800987c <atanf+0x1dc>)
 8009748:	f7f7 f9f4 	bl	8000b34 <__addsf3>
 800974c:	4629      	mov	r1, r5
 800974e:	f7f7 faf9 	bl	8000d44 <__aeabi_fmul>
 8009752:	494b      	ldr	r1, [pc, #300]	@ (8009880 <atanf+0x1e0>)
 8009754:	f7f7 f9ee 	bl	8000b34 <__addsf3>
 8009758:	4629      	mov	r1, r5
 800975a:	f7f7 faf3 	bl	8000d44 <__aeabi_fmul>
 800975e:	4949      	ldr	r1, [pc, #292]	@ (8009884 <atanf+0x1e4>)
 8009760:	f7f7 f9e8 	bl	8000b34 <__addsf3>
 8009764:	4629      	mov	r1, r5
 8009766:	f7f7 faed 	bl	8000d44 <__aeabi_fmul>
 800976a:	4947      	ldr	r1, [pc, #284]	@ (8009888 <atanf+0x1e8>)
 800976c:	f7f7 f9e2 	bl	8000b34 <__addsf3>
 8009770:	4629      	mov	r1, r5
 8009772:	f7f7 fae7 	bl	8000d44 <__aeabi_fmul>
 8009776:	4945      	ldr	r1, [pc, #276]	@ (800988c <atanf+0x1ec>)
 8009778:	f7f7 f9dc 	bl	8000b34 <__addsf3>
 800977c:	4639      	mov	r1, r7
 800977e:	f7f7 fae1 	bl	8000d44 <__aeabi_fmul>
 8009782:	4943      	ldr	r1, [pc, #268]	@ (8009890 <atanf+0x1f0>)
 8009784:	4607      	mov	r7, r0
 8009786:	4628      	mov	r0, r5
 8009788:	f7f7 fadc 	bl	8000d44 <__aeabi_fmul>
 800978c:	4941      	ldr	r1, [pc, #260]	@ (8009894 <atanf+0x1f4>)
 800978e:	f7f7 f9cf 	bl	8000b30 <__aeabi_fsub>
 8009792:	4629      	mov	r1, r5
 8009794:	f7f7 fad6 	bl	8000d44 <__aeabi_fmul>
 8009798:	493f      	ldr	r1, [pc, #252]	@ (8009898 <atanf+0x1f8>)
 800979a:	f7f7 f9c9 	bl	8000b30 <__aeabi_fsub>
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f7 fad0 	bl	8000d44 <__aeabi_fmul>
 80097a4:	493d      	ldr	r1, [pc, #244]	@ (800989c <atanf+0x1fc>)
 80097a6:	f7f7 f9c3 	bl	8000b30 <__aeabi_fsub>
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7f7 faca 	bl	8000d44 <__aeabi_fmul>
 80097b0:	493b      	ldr	r1, [pc, #236]	@ (80098a0 <atanf+0x200>)
 80097b2:	f7f7 f9bd 	bl	8000b30 <__aeabi_fsub>
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f7 fac4 	bl	8000d44 <__aeabi_fmul>
 80097bc:	4601      	mov	r1, r0
 80097be:	4638      	mov	r0, r7
 80097c0:	f7f7 f9b8 	bl	8000b34 <__addsf3>
 80097c4:	4621      	mov	r1, r4
 80097c6:	f7f7 fabd 	bl	8000d44 <__aeabi_fmul>
 80097ca:	1c73      	adds	r3, r6, #1
 80097cc:	4601      	mov	r1, r0
 80097ce:	d133      	bne.n	8009838 <atanf+0x198>
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7f7 f9ad 	bl	8000b30 <__aeabi_fsub>
 80097d6:	e772      	b.n	80096be <atanf+0x1e>
 80097d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80097dc:	f7f7 f9a8 	bl	8000b30 <__aeabi_fsub>
 80097e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80097e4:	4605      	mov	r5, r0
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7f7 f9a4 	bl	8000b34 <__addsf3>
 80097ec:	4601      	mov	r1, r0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7f7 fb5c 	bl	8000eac <__aeabi_fdiv>
 80097f4:	2601      	movs	r6, #1
 80097f6:	4604      	mov	r4, r0
 80097f8:	e799      	b.n	800972e <atanf+0x8e>
 80097fa:	4b2a      	ldr	r3, [pc, #168]	@ (80098a4 <atanf+0x204>)
 80097fc:	429d      	cmp	r5, r3
 80097fe:	d814      	bhi.n	800982a <atanf+0x18a>
 8009800:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8009804:	f7f7 f994 	bl	8000b30 <__aeabi_fsub>
 8009808:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800980c:	4605      	mov	r5, r0
 800980e:	4620      	mov	r0, r4
 8009810:	f7f7 fa98 	bl	8000d44 <__aeabi_fmul>
 8009814:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009818:	f7f7 f98c 	bl	8000b34 <__addsf3>
 800981c:	4601      	mov	r1, r0
 800981e:	4628      	mov	r0, r5
 8009820:	f7f7 fb44 	bl	8000eac <__aeabi_fdiv>
 8009824:	2602      	movs	r6, #2
 8009826:	4604      	mov	r4, r0
 8009828:	e781      	b.n	800972e <atanf+0x8e>
 800982a:	4601      	mov	r1, r0
 800982c:	481e      	ldr	r0, [pc, #120]	@ (80098a8 <atanf+0x208>)
 800982e:	f7f7 fb3d 	bl	8000eac <__aeabi_fdiv>
 8009832:	2603      	movs	r6, #3
 8009834:	4604      	mov	r4, r0
 8009836:	e77a      	b.n	800972e <atanf+0x8e>
 8009838:	4b1c      	ldr	r3, [pc, #112]	@ (80098ac <atanf+0x20c>)
 800983a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800983e:	f7f7 f977 	bl	8000b30 <__aeabi_fsub>
 8009842:	4621      	mov	r1, r4
 8009844:	f7f7 f974 	bl	8000b30 <__aeabi_fsub>
 8009848:	4b19      	ldr	r3, [pc, #100]	@ (80098b0 <atanf+0x210>)
 800984a:	4601      	mov	r1, r0
 800984c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009850:	f7f7 f96e 	bl	8000b30 <__aeabi_fsub>
 8009854:	f1b8 0f00 	cmp.w	r8, #0
 8009858:	4604      	mov	r4, r0
 800985a:	f6bf af36 	bge.w	80096ca <atanf+0x2a>
 800985e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009862:	e732      	b.n	80096ca <atanf+0x2a>
 8009864:	4c13      	ldr	r4, [pc, #76]	@ (80098b4 <atanf+0x214>)
 8009866:	e730      	b.n	80096ca <atanf+0x2a>
 8009868:	3fc90fdb 	.word	0x3fc90fdb
 800986c:	3edfffff 	.word	0x3edfffff
 8009870:	7149f2ca 	.word	0x7149f2ca
 8009874:	3f97ffff 	.word	0x3f97ffff
 8009878:	3c8569d7 	.word	0x3c8569d7
 800987c:	3d4bda59 	.word	0x3d4bda59
 8009880:	3d886b35 	.word	0x3d886b35
 8009884:	3dba2e6e 	.word	0x3dba2e6e
 8009888:	3e124925 	.word	0x3e124925
 800988c:	3eaaaaab 	.word	0x3eaaaaab
 8009890:	bd15a221 	.word	0xbd15a221
 8009894:	3d6ef16b 	.word	0x3d6ef16b
 8009898:	3d9d8795 	.word	0x3d9d8795
 800989c:	3de38e38 	.word	0x3de38e38
 80098a0:	3e4ccccd 	.word	0x3e4ccccd
 80098a4:	401bffff 	.word	0x401bffff
 80098a8:	bf800000 	.word	0xbf800000
 80098ac:	0800a150 	.word	0x0800a150
 80098b0:	0800a160 	.word	0x0800a160
 80098b4:	bfc90fdb 	.word	0xbfc90fdb

080098b8 <fabsf>:
 80098b8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80098bc:	4770      	bx	lr
	...

080098c0 <_kill>:
 80098c0:	2258      	movs	r2, #88	@ 0x58
 80098c2:	4b02      	ldr	r3, [pc, #8]	@ (80098cc <_kill+0xc>)
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	4770      	bx	lr
 80098cc:	200005fc 	.word	0x200005fc

080098d0 <_exit>:
 80098d0:	e7fe      	b.n	80098d0 <_exit>
	...

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
