
tdse-tp3_06-interactive_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  00007088  2**0
                  CONTENTS
  4 .ARM          00000008  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e8  080051e8  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080051f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000088  08005278  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08005278  000073e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae0f  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209d  00000000  00000000  00011ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00013f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b9  00000000  00000000  00014960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018900  00000000  00000000  00015119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1a4  00000000  00000000  0002da19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086168  00000000  00000000  0003cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003474  00000000  00000000  000c2d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000c61dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df0 	.word	0x08004df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004df0 	.word	0x08004df0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000162:	f003 fc31 	bl	80039c8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 faf3 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f855 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f8ed 	bl	800034c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f8c1 	bl	80002f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000176:	f000 f891 	bl	800029c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t who_am_i = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &who_am_i, 1, HAL_MAX_DELAY);
 800017e:	f04f 33ff 	mov.w	r3, #4294967295
 8000182:	9302      	str	r3, [sp, #8]
 8000184:	2301      	movs	r3, #1
 8000186:	9301      	str	r3, [sp, #4]
 8000188:	1d7b      	adds	r3, r7, #5
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	2301      	movs	r3, #1
 800018e:	2275      	movs	r2, #117	@ 0x75
 8000190:	21d0      	movs	r1, #208	@ 0xd0
 8000192:	481b      	ldr	r0, [pc, #108]	@ (8000200 <main+0xa4>)
 8000194:	f000 ff90 	bl	80010b8 <HAL_I2C_Mem_Read>
 8000198:	4603      	mov	r3, r0
 800019a:	71bb      	strb	r3, [r7, #6]

  if (status == HAL_OK) {
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d105      	bne.n	80001ae <main+0x52>
      printf("Lectura OK. WHO_AM_I = 0x%02X\n", who_am_i);
 80001a2:	797b      	ldrb	r3, [r7, #5]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4817      	ldr	r0, [pc, #92]	@ (8000204 <main+0xa8>)
 80001a8:	f003 fe0a 	bl	8003dc0 <iprintf>
 80001ac:	e002      	b.n	80001b4 <main+0x58>
  } else {
      printf("Error leyendo WHO_AM_I\n");
 80001ae:	4816      	ldr	r0, [pc, #88]	@ (8000208 <main+0xac>)
 80001b0:	f003 fe6e 	bl	8003e90 <puts>
  }

  printf("Escaneando bus I2C...\n");
 80001b4:	4815      	ldr	r0, [pc, #84]	@ (800020c <main+0xb0>)
 80001b6:	f003 fe6b 	bl	8003e90 <puts>
  for (uint8_t addr = 1; addr < 127; addr++) {
 80001ba:	2301      	movs	r3, #1
 80001bc:	71fb      	strb	r3, [r7, #7]
 80001be:	e013      	b.n	80001e8 <main+0x8c>
      if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	b29b      	uxth	r3, r3
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	b299      	uxth	r1, r3
 80001c8:	230a      	movs	r3, #10
 80001ca:	2201      	movs	r2, #1
 80001cc:	480c      	ldr	r0, [pc, #48]	@ (8000200 <main+0xa4>)
 80001ce:	f001 f9e7 	bl	80015a0 <HAL_I2C_IsDeviceReady>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d104      	bne.n	80001e2 <main+0x86>
          printf("Dispositivo detectado en 0x%02X\n", addr);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4619      	mov	r1, r3
 80001dc:	480c      	ldr	r0, [pc, #48]	@ (8000210 <main+0xb4>)
 80001de:	f003 fdef 	bl	8003dc0 <iprintf>
  for (uint8_t addr = 1; addr < 127; addr++) {
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	3301      	adds	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80001ec:	d9e8      	bls.n	80001c0 <main+0x64>
      }
  }
  printf("Escaneo finalizado.\n");
 80001ee:	4809      	ldr	r0, [pc, #36]	@ (8000214 <main+0xb8>)
 80001f0:	f003 fe4e 	bl	8003e90 <puts>


	/* Application Init */
	app_init();
 80001f4:	f002 fac6 	bl	8002784 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 80001f8:	f002 fb8a 	bl	8002910 <app_update>
 80001fc:	e7fc      	b.n	80001f8 <main+0x9c>
 80001fe:	bf00      	nop
 8000200:	200000a4 	.word	0x200000a4
 8000204:	08004e08 	.word	0x08004e08
 8000208:	08004e28 	.word	0x08004e28
 800020c:	08004e40 	.word	0x08004e40
 8000210:	08004e58 	.word	0x08004e58
 8000214:	08004e7c 	.word	0x08004e7c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	@ 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 ff46 	bl	80040b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f001 fda5 	bl	8001da8 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000264:	f000 f928 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f812 	bl	80022ac <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f000 f913 	bl	80004b8 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a0:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002a2:	4a14      	ldr	r2, [pc, #80]	@ (80002f4 <MX_I2C1_Init+0x58>)
 80002a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80002a6:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002a8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80002ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002ae:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ba:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <MX_I2C1_Init+0x54>)
 80002dc:	f000 fda8 	bl	8000e30 <HAL_I2C_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f8e7 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	200000a4 	.word	0x200000a4
 80002f4:	40005400 	.word	0x40005400

080002f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <MX_USART2_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_USART2_UART_Init+0x4c>)
 8000330:	f002 f94a 	bl	80025c8 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f8bd 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000f8 	.word	0x200000f8
 8000348:	40004400 	.word	0x40004400

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b50      	ldr	r3, [pc, #320]	@ (80004a4 <MX_GPIO_Init+0x158>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a4f      	ldr	r2, [pc, #316]	@ (80004a4 <MX_GPIO_Init+0x158>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b4d      	ldr	r3, [pc, #308]	@ (80004a4 <MX_GPIO_Init+0x158>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b4a      	ldr	r3, [pc, #296]	@ (80004a4 <MX_GPIO_Init+0x158>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a49      	ldr	r2, [pc, #292]	@ (80004a4 <MX_GPIO_Init+0x158>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b47      	ldr	r3, [pc, #284]	@ (80004a4 <MX_GPIO_Init+0x158>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b44      	ldr	r3, [pc, #272]	@ (80004a4 <MX_GPIO_Init+0x158>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a43      	ldr	r2, [pc, #268]	@ (80004a4 <MX_GPIO_Init+0x158>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b41      	ldr	r3, [pc, #260]	@ (80004a4 <MX_GPIO_Init+0x158>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b3e      	ldr	r3, [pc, #248]	@ (80004a4 <MX_GPIO_Init+0x158>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a3d      	ldr	r2, [pc, #244]	@ (80004a4 <MX_GPIO_Init+0x158>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b3b      	ldr	r3, [pc, #236]	@ (80004a4 <MX_GPIO_Init+0x158>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80003c6:	4838      	ldr	r0, [pc, #224]	@ (80004a8 <MX_GPIO_Init+0x15c>)
 80003c8:	f000 fcf7 	bl	8000dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80003d2:	4836      	ldr	r0, [pc, #216]	@ (80004ac <MX_GPIO_Init+0x160>)
 80003d4:	f000 fcf1 	bl	8000dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2180      	movs	r1, #128	@ 0x80
 80003dc:	4834      	ldr	r0, [pc, #208]	@ (80004b0 <MX_GPIO_Init+0x164>)
 80003de:	f000 fcec 	bl	8000dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e8:	4b32      	ldr	r3, [pc, #200]	@ (80004b4 <MX_GPIO_Init+0x168>)
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	482e      	ldr	r0, [pc, #184]	@ (80004b0 <MX_GPIO_Init+0x164>)
 80003f8:	f000 fb44 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fc:	2320      	movs	r3, #32
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4825      	ldr	r0, [pc, #148]	@ (80004a8 <MX_GPIO_Init+0x15c>)
 8000414:	f000 fb36 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D11_Pin D2_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D11_Pin|D2_Pin;
 8000418:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	481e      	ldr	r0, [pc, #120]	@ (80004a8 <MX_GPIO_Init+0x15c>)
 800042e:	f000 fb29 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000432:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2302      	movs	r3, #2
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4818      	ldr	r0, [pc, #96]	@ (80004ac <MX_GPIO_Init+0x160>)
 800044c:	f000 fb1a 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000458:	2301      	movs	r3, #1
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4812      	ldr	r0, [pc, #72]	@ (80004b0 <MX_GPIO_Init+0x164>)
 8000468:	f000 fb0c 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin;
 800046c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2302      	movs	r3, #2
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	4808      	ldr	r0, [pc, #32]	@ (80004a8 <MX_GPIO_Init+0x15c>)
 8000486:	f000 fafd 	bl	8000a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2028      	movs	r0, #40	@ 0x28
 8000490:	f000 fabb 	bl	8000a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000494:	2028      	movs	r0, #40	@ 0x28
 8000496:	f000 fad4 	bl	8000a42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	40011000 	.word	0x40011000
 80004b4:	10110000 	.word	0x10110000

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <Error_Handler+0x8>

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a14      	ldr	r2, [pc, #80]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <HAL_MspInit+0x60>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <HAL_MspInit+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <HAL_I2C_MspInit+0x70>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d123      	bne.n	8000590 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <HAL_I2C_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a13      	ldr	r2, [pc, #76]	@ (800059c <HAL_I2C_MspInit+0x74>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <HAL_I2C_MspInit+0x74>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000560:	23c0      	movs	r3, #192	@ 0xc0
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000564:	2312      	movs	r3, #18
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <HAL_I2C_MspInit+0x78>)
 8000574:	f000 fa86 	bl	8000a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <HAL_I2C_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a07      	ldr	r2, [pc, #28]	@ (800059c <HAL_I2C_MspInit+0x74>)
 800057e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <HAL_I2C_MspInit+0x74>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40005400 	.word	0x40005400
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010c00 	.word	0x40010c00

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	@ (8000614 <HAL_UART_MspInit+0x70>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d123      	bne.n	800060c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ce:	61d3      	str	r3, [r2, #28]
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_UART_MspInit+0x74>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005f4:	230c      	movs	r3, #12
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <HAL_UART_MspInit+0x78>)
 8000608:	f000 fa3c 	bl	8000a84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <NMI_Handler+0x4>

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <UsageFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000670:	f000 f8b4 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000674:	f000 f9ff 	bl	8000a76 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000680:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000684:	f000 fbb2 	bl	8000dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f003 fd4a 	bl	8004154 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20005000 	.word	0x20005000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	20000140 	.word	0x20000140
 80006f4:	200003e8 	.word	0x200003e8

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff fff8 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800070a:	490c      	ldr	r1, [pc, #48]	@ (800073c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000720:	4c09      	ldr	r4, [pc, #36]	@ (8000748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f003 fd17 	bl	8004160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd13 	bl	800015c <main>
  bx lr
 8000736:	4770      	bx	lr
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000740:	080051f0 	.word	0x080051f0
  ldr r2, =_sbss
 8000744:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000748:	200003e8 	.word	0x200003e8

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f947 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff feaa 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f95f 	bl	8000a5e <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f927 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	@ (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000144 	.word	0x20000144

08000800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000144 	.word	0x20000144

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4906      	ldr	r1, [pc, #24]	@ (80008f4 <__NVIC_EnableIRQ+0x34>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	@ (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	@ (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	@ 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	@ 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff2d 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff42 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff35 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a7a:	f001 ffaf 	bl	80029dc <HAL_SYSTICK_Callback>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b08b      	sub	sp, #44	@ 0x2c
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e169      	b.n	8000d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 8158 	bne.w	8000d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a9a      	ldr	r2, [pc, #616]	@ (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d05e      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ac0:	4a98      	ldr	r2, [pc, #608]	@ (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d875      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ac6:	4a98      	ldr	r2, [pc, #608]	@ (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d058      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000acc:	4a96      	ldr	r2, [pc, #600]	@ (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d86f      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ad2:	4a96      	ldr	r2, [pc, #600]	@ (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d052      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ad8:	4a94      	ldr	r2, [pc, #592]	@ (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d869      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ade:	4a94      	ldr	r2, [pc, #592]	@ (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d04c      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d863      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000aea:	4a92      	ldr	r2, [pc, #584]	@ (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d046      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000af0:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d85d      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d82a      	bhi.n	8000b50 <HAL_GPIO_Init+0xcc>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d859      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000afe:	a201      	add	r2, pc, #4	@ (adr r2, 8000b04 <HAL_GPIO_Init+0x80>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b59 	.word	0x08000b59
 8000b0c:	08000b6b 	.word	0x08000b6b
 8000b10:	08000bad 	.word	0x08000bad
 8000b14:	08000bb3 	.word	0x08000bb3
 8000b18:	08000bb3 	.word	0x08000bb3
 8000b1c:	08000bb3 	.word	0x08000bb3
 8000b20:	08000bb3 	.word	0x08000bb3
 8000b24:	08000bb3 	.word	0x08000bb3
 8000b28:	08000bb3 	.word	0x08000bb3
 8000b2c:	08000bb3 	.word	0x08000bb3
 8000b30:	08000bb3 	.word	0x08000bb3
 8000b34:	08000bb3 	.word	0x08000bb3
 8000b38:	08000bb3 	.word	0x08000bb3
 8000b3c:	08000bb3 	.word	0x08000bb3
 8000b40:	08000bb3 	.word	0x08000bb3
 8000b44:	08000bb3 	.word	0x08000bb3
 8000b48:	08000b61 	.word	0x08000b61
 8000b4c:	08000b75 	.word	0x08000b75
 8000b50:	4a79      	ldr	r2, [pc, #484]	@ (8000d38 <HAL_GPIO_Init+0x2b4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b56:	e02c      	b.n	8000bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e029      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	3304      	adds	r3, #4
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e024      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e01f      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	330c      	adds	r3, #12
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e01a      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b86:	2304      	movs	r3, #4
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e013      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	611a      	str	r2, [r3, #16]
          break;
 8000b9e:	e009      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	615a      	str	r2, [r3, #20]
          break;
 8000baa:	e003      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e000      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          break;
 8000bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2bff      	cmp	r3, #255	@ 0xff
 8000bb8:	d801      	bhi.n	8000bbe <HAL_GPIO_Init+0x13a>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	e001      	b.n	8000bc2 <HAL_GPIO_Init+0x13e>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2bff      	cmp	r3, #255	@ 0xff
 8000bc8:	d802      	bhi.n	8000bd0 <HAL_GPIO_Init+0x14c>
 8000bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_Init+0x152>
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	3b08      	subs	r3, #8
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	210f      	movs	r1, #15
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	401a      	ands	r2, r3
 8000be8:	6a39      	ldr	r1, [r7, #32]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80b1 	beq.w	8000d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c04:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a4c      	ldr	r2, [pc, #304]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c1c:	4a48      	ldr	r2, [pc, #288]	@ (8000d40 <HAL_GPIO_Init+0x2bc>)
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <HAL_GPIO_Init+0x2c0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d013      	beq.n	8000c70 <HAL_GPIO_Init+0x1ec>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <HAL_GPIO_Init+0x2c4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00d      	beq.n	8000c6c <HAL_GPIO_Init+0x1e8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3e      	ldr	r2, [pc, #248]	@ (8000d4c <HAL_GPIO_Init+0x2c8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d50 <HAL_GPIO_Init+0x2cc>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d101      	bne.n	8000c64 <HAL_GPIO_Init+0x1e0>
 8000c60:	2303      	movs	r3, #3
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c64:	2304      	movs	r3, #4
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c82:	492f      	ldr	r1, [pc, #188]	@ (8000d40 <HAL_GPIO_Init+0x2bc>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	492c      	ldr	r1, [pc, #176]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000caa:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4928      	ldr	r1, [pc, #160]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	4922      	ldr	r1, [pc, #136]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60cb      	str	r3, [r1, #12]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd2:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	491e      	ldr	r1, [pc, #120]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4918      	ldr	r1, [pc, #96]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4914      	ldr	r1, [pc, #80]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d021      	beq.n	8000d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	490e      	ldr	r1, [pc, #56]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	e021      	b.n	8000d66 <HAL_GPIO_Init+0x2e2>
 8000d22:	bf00      	nop
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10310000 	.word	0x10310000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	10210000 	.word	0x10210000
 8000d34:	10120000 	.word	0x10120000
 8000d38:	10110000 	.word	0x10110000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40011400 	.word	0x40011400
 8000d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_GPIO_Init+0x304>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4909      	ldr	r1, [pc, #36]	@ (8000d88 <HAL_GPIO_Init+0x304>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	3301      	adds	r3, #1
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f ae8e 	bne.w	8000a98 <HAL_GPIO_Init+0x14>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	372c      	adds	r7, #44	@ 0x2c
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dca:	787b      	ldrb	r3, [r7, #1]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	887a      	ldrh	r2, [r7, #2]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd6:	e003      	b.n	8000de0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	041a      	lsls	r2, r3, #16
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	611a      	str	r2, [r3, #16]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f806 	bl	8000e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e12b      	b.n	800109a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fb66 	bl	8000528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2224      	movs	r2, #36	@ 0x24
 8000e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e94:	f001 fb52 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8000e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4a81      	ldr	r2, [pc, #516]	@ (80010a4 <HAL_I2C_Init+0x274>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d807      	bhi.n	8000eb4 <HAL_I2C_Init+0x84>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a80      	ldr	r2, [pc, #512]	@ (80010a8 <HAL_I2C_Init+0x278>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bf94      	ite	ls
 8000eac:	2301      	movls	r3, #1
 8000eae:	2300      	movhi	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	e006      	b.n	8000ec2 <HAL_I2C_Init+0x92>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80010ac <HAL_I2C_Init+0x27c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	bf94      	ite	ls
 8000ebc:	2301      	movls	r3, #1
 8000ebe:	2300      	movhi	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0e7      	b.n	800109a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4a78      	ldr	r2, [pc, #480]	@ (80010b0 <HAL_I2C_Init+0x280>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80010a4 <HAL_I2C_Init+0x274>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d802      	bhi.n	8000f04 <HAL_I2C_Init+0xd4>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3301      	adds	r3, #1
 8000f02:	e009      	b.n	8000f18 <HAL_I2C_Init+0xe8>
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a69      	ldr	r2, [pc, #420]	@ (80010b4 <HAL_I2C_Init+0x284>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099b      	lsrs	r3, r3, #6
 8000f16:	3301      	adds	r3, #1
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	495c      	ldr	r1, [pc, #368]	@ (80010a4 <HAL_I2C_Init+0x274>)
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d819      	bhi.n	8000f6c <HAL_I2C_Init+0x13c>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	1e59      	subs	r1, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f46:	1c59      	adds	r1, r3, #1
 8000f48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f4c:	400b      	ands	r3, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00a      	beq.n	8000f68 <HAL_I2C_Init+0x138>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1e59      	subs	r1, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f66:	e051      	b.n	800100c <HAL_I2C_Init+0x1dc>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e04f      	b.n	800100c <HAL_I2C_Init+0x1dc>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d111      	bne.n	8000f98 <HAL_I2C_Init+0x168>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1e58      	subs	r0, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6859      	ldr	r1, [r3, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	440b      	add	r3, r1
 8000f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f86:	3301      	adds	r3, #1
 8000f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e012      	b.n	8000fbe <HAL_I2C_Init+0x18e>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1e58      	subs	r0, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	0099      	lsls	r1, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf0c      	ite	eq
 8000fb8:	2301      	moveq	r3, #1
 8000fba:	2300      	movne	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_Init+0x196>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e022      	b.n	800100c <HAL_I2C_Init+0x1dc>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10e      	bne.n	8000fec <HAL_I2C_Init+0x1bc>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1e58      	subs	r0, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6859      	ldr	r1, [r3, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fea:	e00f      	b.n	800100c <HAL_I2C_Init+0x1dc>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1e58      	subs	r0, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	0099      	lsls	r1, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001002:	3301      	adds	r3, #1
 8001004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	6809      	ldr	r1, [r1, #0]
 8001010:	4313      	orrs	r3, r2
 8001012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69da      	ldr	r2, [r3, #28]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800103a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6911      	ldr	r1, [r2, #16]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68d2      	ldr	r2, [r2, #12]
 8001046:	4311      	orrs	r1, r2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	430b      	orrs	r3, r1
 800104e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2220      	movs	r2, #32
 8001086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	000186a0 	.word	0x000186a0
 80010a8:	001e847f 	.word	0x001e847f
 80010ac:	003d08ff 	.word	0x003d08ff
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	10624dd3 	.word	0x10624dd3

080010b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af02      	add	r7, sp, #8
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	817b      	strh	r3, [r7, #10]
 80010ca:	460b      	mov	r3, r1
 80010cc:	813b      	strh	r3, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010d6:	f7ff fb93 	bl	8000800 <HAL_GetTick>
 80010da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b20      	cmp	r3, #32
 80010e6:	f040 8250 	bne.w	800158a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2319      	movs	r3, #25
 80010f0:	2201      	movs	r2, #1
 80010f2:	4982      	ldr	r1, [pc, #520]	@ (80012fc <HAL_I2C_Mem_Read+0x244>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 fc69 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001100:	2302      	movs	r3, #2
 8001102:	e243      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_I2C_Mem_Read+0x5a>
 800110e:	2302      	movs	r3, #2
 8001110:	e23c      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	d007      	beq.n	8001138 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2222      	movs	r2, #34	@ 0x22
 800114c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2240      	movs	r2, #64	@ 0x40
 8001154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800116e:	b29a      	uxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a62      	ldr	r2, [pc, #392]	@ (8001300 <HAL_I2C_Mem_Read+0x248>)
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800117a:	88f8      	ldrh	r0, [r7, #6]
 800117c:	893a      	ldrh	r2, [r7, #8]
 800117e:	8979      	ldrh	r1, [r7, #10]
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4603      	mov	r3, r0
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 fb36 	bl	80017fc <I2C_RequestMemoryRead>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e1f8      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d113      	bne.n	80011ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e1cc      	b.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11e      	bne.n	8001210 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011e2:	b672      	cpsid	i
}
 80011e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800120a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800120c:	b662      	cpsie	i
}
 800120e:	e035      	b.n	800127c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001214:	2b02      	cmp	r3, #2
 8001216:	d11e      	bne.n	8001256 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001226:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001250:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001252:	b662      	cpsie	i
}
 8001254:	e012      	b.n	800127c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001264:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800127c:	e172      	b.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001282:	2b03      	cmp	r3, #3
 8001284:	f200 811f 	bhi.w	80014c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128c:	2b01      	cmp	r3, #1
 800128e:	d123      	bne.n	80012d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001292:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fcfb 	bl	8001c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e173      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80012d6:	e145      	b.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d152      	bne.n	8001386 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e6:	2200      	movs	r2, #0
 80012e8:	4906      	ldr	r1, [pc, #24]	@ (8001304 <HAL_I2C_Mem_Read+0x24c>)
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fb6e 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e148      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
 80012fa:	bf00      	nop
 80012fc:	00100002 	.word	0x00100002
 8001300:	ffff0000 	.word	0xffff0000
 8001304:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800131a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001338:	3b01      	subs	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001344:	b29b      	uxth	r3, r3
 8001346:	3b01      	subs	r3, #1
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800134e:	b662      	cpsie	i
}
 8001350:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001384:	e0ee      	b.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138c:	2200      	movs	r2, #0
 800138e:	4981      	ldr	r1, [pc, #516]	@ (8001594 <HAL_I2C_Mem_Read+0x4dc>)
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fb1b 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0f5      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80013e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001598 <HAL_I2C_Mem_Read+0x4e0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	4a6b      	ldr	r2, [pc, #428]	@ (800159c <HAL_I2C_Mem_Read+0x4e4>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a1a      	lsrs	r2, r3, #8
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00da      	lsls	r2, r3, #3
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3b01      	subs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d118      	bne.n	800143e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2220      	movs	r2, #32
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f043 0220 	orr.w	r2, r3, #32
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800142e:	b662      	cpsie	i
}
 8001430:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0a6      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b04      	cmp	r3, #4
 800144a:	d1d9      	bne.n	8001400 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001478:	3b01      	subs	r3, #1
 800147a:	b29a      	uxth	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001484:	b29b      	uxth	r3, r3
 8001486:	3b01      	subs	r3, #1
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800148e:	b662      	cpsie	i
}
 8001490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80014c4:	e04e      	b.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fbe0 	bl	8001c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e058      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b04      	cmp	r3, #4
 8001518:	d124      	bne.n	8001564 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151e:	2b03      	cmp	r3, #3
 8001520:	d107      	bne.n	8001532 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001530:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae88 	bne.w	800127e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
  }
}
 800158c:	4618      	mov	r0, r3
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	00010004 	.word	0x00010004
 8001598:	20000000 	.word	0x20000000
 800159c:	14f8b589 	.word	0x14f8b589

080015a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	460b      	mov	r3, r1
 80015ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff f926 	bl	8000800 <HAL_GetTick>
 80015b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	f040 8111 	bne.w	80017ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2319      	movs	r3, #25
 80015ce:	2201      	movs	r2, #1
 80015d0:	4988      	ldr	r1, [pc, #544]	@ (80017f4 <HAL_I2C_IsDeviceReady+0x254>)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f9fa 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	e104      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_I2C_IsDeviceReady+0x50>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e0fd      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d007      	beq.n	8001616 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2224      	movs	r2, #36	@ 0x24
 800162a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4a70      	ldr	r2, [pc, #448]	@ (80017f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001648:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f9b8 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001670:	d103      	bne.n	800167a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0b6      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800168c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff f8b7 	bl	8000800 <HAL_GetTick>
 8001692:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b8:	bf0c      	ite	eq
 80016ba:	2301      	moveq	r3, #1
 80016bc:	2300      	movne	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80016c2:	e025      	b.n	8001710 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016c4:	f7ff f89c 	bl	8000800 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d302      	bcc.n	80016da <HAL_I2C_IsDeviceReady+0x13a>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	22a0      	movs	r2, #160	@ 0xa0
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2ba0      	cmp	r3, #160	@ 0xa0
 800171a:	d005      	beq.n	8001728 <HAL_I2C_IsDeviceReady+0x188>
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_I2C_IsDeviceReady+0x188>
 8001722:	7dbb      	ldrb	r3, [r7, #22]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0cd      	beq.n	80016c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d129      	bne.n	8001792 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800174c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2319      	movs	r3, #25
 800176a:	2201      	movs	r2, #1
 800176c:	4921      	ldr	r1, [pc, #132]	@ (80017f4 <HAL_I2C_IsDeviceReady+0x254>)
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f92c 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e036      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e02c      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2319      	movs	r3, #25
 80017b2:	2201      	movs	r2, #1
 80017b4:	490f      	ldr	r1, [pc, #60]	@ (80017f4 <HAL_I2C_IsDeviceReady+0x254>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f908 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e012      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f4ff af32 	bcc.w	800163a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
  }
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	00100002 	.word	0x00100002
 80017f8:	ffff0000 	.word	0xffff0000

080017fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	817b      	strh	r3, [r7, #10]
 800180e:	460b      	mov	r3, r1
 8001810:	813b      	strh	r3, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	2200      	movs	r2, #0
 800183e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8c2 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800185c:	d103      	bne.n	8001866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001864:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0aa      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	4952      	ldr	r1, [pc, #328]	@ (80019c8 <I2C_RequestMemoryRead+0x1cc>)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f91d 	bl	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e097      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f9a8 	bl	8001c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d107      	bne.n	80018ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e076      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e021      	b.n	8001928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f982 	bl	8001c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00d      	beq.n	800191e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2b04      	cmp	r3, #4
 8001908:	d107      	bne.n	800191a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e050      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192a:	6a39      	ldr	r1, [r7, #32]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f967 	bl	8001c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800194e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e035      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2200      	movs	r2, #0
 800196c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f82b 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00d      	beq.n	8001998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800198a:	d103      	bne.n	8001994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e013      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	6a3a      	ldr	r2, [r7, #32]
 80019ac:	4906      	ldr	r1, [pc, #24]	@ (80019c8 <I2C_RequestMemoryRead+0x1cc>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f886 	bl	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	00010002 	.word	0x00010002

080019cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	e048      	b.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d044      	beq.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7fe ff0b 	bl	8000800 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d139      	bne.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	4013      	ands	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	e00c      	b.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d116      	bne.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f043 0220 	orr.w	r2, r3, #32
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e023      	b.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10d      	bne.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	43da      	mvns	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	e00c      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d093      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ace:	e071      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ade:	d123      	bne.n	8001b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f043 0204 	orr.w	r2, r3, #4
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e067      	b.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d041      	beq.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7fe fe66 	bl	8000800 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d136      	bne.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10c      	bne.n	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e00b      	b.n	8001b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e021      	b.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10c      	bne.n	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e00b      	b.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4013      	ands	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f af6d 	bne.w	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0c:	e034      	b.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f89b 	bl	8001d4a <I2C_IsAcknowledgeFailed>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e034      	b.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d028      	beq.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c26:	f7fe fdeb 	bl	8000800 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d11d      	bne.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	2b80      	cmp	r3, #128	@ 0x80
 8001c48:	d016      	beq.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e007      	b.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	2b80      	cmp	r3, #128	@ 0x80
 8001c84:	d1c3      	bne.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c9c:	e049      	b.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d119      	bne.n	8001ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0210 	mvn.w	r2, #16
 8001cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e030      	b.n	8001d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7fe fd8e 	bl	8000800 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d302      	bcc.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11d      	bne.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d00:	2b40      	cmp	r3, #64	@ 0x40
 8001d02:	d016      	beq.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f043 0220 	orr.w	r2, r3, #32
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e007      	b.n	8001d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	d1ae      	bne.n	8001c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d60:	d11b      	bne.n	8001d9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e272      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc8:	4b92      	ldr	r3, [pc, #584]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00c      	beq.n	8001dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d112      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
 8001de0:	4b8c      	ldr	r3, [pc, #560]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d10b      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	4b89      	ldr	r3, [pc, #548]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d06c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d168      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e24c      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x76>
 8001e10:	4b80      	ldr	r3, [pc, #512]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a7f      	ldr	r2, [pc, #508]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e02e      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b7b      	ldr	r3, [pc, #492]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7a      	ldr	r2, [pc, #488]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b78      	ldr	r3, [pc, #480]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a77      	ldr	r2, [pc, #476]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0xbc>
 8001e4a:	4b72      	ldr	r3, [pc, #456]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a71      	ldr	r2, [pc, #452]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e64:	4b6b      	ldr	r3, [pc, #428]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6a      	ldr	r2, [pc, #424]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a67      	ldr	r2, [pc, #412]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fcbc 	bl	8000800 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fcb8 	bl	8000800 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e200      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe4>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7fe fca8 	bl	8000800 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fca4 	bl	8000800 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1ec      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x10c>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b43      	ldr	r3, [pc, #268]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c0      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4939      	ldr	r1, [pc, #228]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fc5d 	bl	8000800 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7fe fc59 	bl	8000800 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a1      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4927      	ldr	r1, [pc, #156]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fc3c 	bl	8000800 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7fe fc38 	bl	8000800 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e180      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d03a      	beq.n	800202c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fc1c 	bl	8000800 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fc18 	bl	8000800 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e160      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f000 face 	bl	800258c <RCC_Delay>
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fc02 	bl	8000800 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fbfe 	bl	8000800 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d908      	bls.n	8002020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e146      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	42420000 	.word	0x42420000
 800201c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b92      	ldr	r3, [pc, #584]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e9      	bne.n	8002000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a6 	beq.w	8002186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b8b      	ldr	r3, [pc, #556]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a87      	ldr	r2, [pc, #540]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b85      	ldr	r3, [pc, #532]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b82      	ldr	r3, [pc, #520]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b7f      	ldr	r3, [pc, #508]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7e      	ldr	r2, [pc, #504]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe fbbf 	bl	8000800 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fbbb 	bl	8000800 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	@ 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e103      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b75      	ldr	r3, [pc, #468]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x312>
 80020ac:	4b6f      	ldr	r3, [pc, #444]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a6e      	ldr	r2, [pc, #440]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e02d      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x334>
 80020c2:	4b6a      	ldr	r3, [pc, #424]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a69      	ldr	r2, [pc, #420]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4b67      	ldr	r3, [pc, #412]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a66      	ldr	r2, [pc, #408]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	e01c      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d10c      	bne.n	80020fe <HAL_RCC_OscConfig+0x356>
 80020e4:	4b61      	ldr	r3, [pc, #388]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a60      	ldr	r2, [pc, #384]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	4b5e      	ldr	r3, [pc, #376]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a5d      	ldr	r2, [pc, #372]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e00b      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020fe:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a5a      	ldr	r2, [pc, #360]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b58      	ldr	r3, [pc, #352]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d015      	beq.n	800214a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe fb6f 	bl	8000800 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fb6b 	bl	8000800 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0b1      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	4b4b      	ldr	r3, [pc, #300]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ee      	beq.n	8002126 <HAL_RCC_OscConfig+0x37e>
 8002148:	e014      	b.n	8002174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fb59 	bl	8000800 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fb55 	bl	8000800 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e09b      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	4b40      	ldr	r3, [pc, #256]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d105      	bne.n	8002186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b3c      	ldr	r3, [pc, #240]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a3b      	ldr	r2, [pc, #236]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	4b36      	ldr	r3, [pc, #216]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d061      	beq.n	8002260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d146      	bne.n	8002232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fb29 	bl	8000800 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fb25 	bl	8000800 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e06d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	4b29      	ldr	r3, [pc, #164]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4921      	ldr	r1, [pc, #132]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a19      	ldr	r1, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	430b      	orrs	r3, r1
 80021fe:	491b      	ldr	r1, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe faf9 	bl	8000800 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe faf5 	bl	8000800 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e03d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x46a>
 8002230:	e035      	b.n	800229e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fae2 	bl	8000800 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fade 	bl	8000800 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e026      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x498>
 800225e:	e01e      	b.n	800229e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e019      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
 8002274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_OscConfig+0x500>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4965      	ldr	r1, [pc, #404]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800232a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d040      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d115      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e073      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3d      	ldr	r3, [pc, #244]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4936      	ldr	r1, [pc, #216]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe fa30 	bl	8000800 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fa2c 	bl	8000800 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e053      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d210      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4922      	ldr	r1, [pc, #136]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <HAL_RCC_ClockConfig+0x1cc>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_ClockConfig+0x1d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f98e 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	0800510c 	.word	0x0800510c
 8002478:	20000000 	.word	0x20000000
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x94>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x30>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ae:	e027      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 80024b2:	613b      	str	r3, [r7, #16]
      break;
 80024b4:	e027      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	0c9b      	lsrs	r3, r3, #18
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	4a17      	ldr	r2, [pc, #92]	@ (800251c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	0c5b      	lsrs	r3, r3, #17
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	fb03 f202 	mul.w	r2, r3, r2
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e004      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	613b      	str	r3, [r7, #16]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	693b      	ldr	r3, [r7, #16]
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	08005124 	.word	0x08005124
 8002520:	08005134 	.word	0x08005134
 8002524:	003d0900 	.word	0x003d0900

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <HAL_RCC_GetHCLKFreq+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff2 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	0800511c 	.word	0x0800511c

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffde 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	0800511c 	.word	0x0800511c

0800258c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <RCC_Delay+0x34>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <RCC_Delay+0x38>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a8:	bf00      	nop
  }
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <RCC_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e042      	b.n	8002660 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fd ffd8 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	@ 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800260a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f82b 	bl	8002668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026a2:	f023 030c 	bic.w	r3, r3, #12
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2c      	ldr	r2, [pc, #176]	@ (800277c <UART_SetConfig+0x114>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026d0:	f7ff ff48 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	e002      	b.n	80026de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026d8:	f7ff ff30 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80026dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009a      	lsls	r2, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <UART_SetConfig+0x118>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	0119      	lsls	r1, r3, #4
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fbb2 f2f3 	udiv	r2, r2, r3
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <UART_SetConfig+0x118>)
 8002716:	fba3 0302 	umull	r0, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2064      	movs	r0, #100	@ 0x64
 800271e:	fb00 f303 	mul.w	r3, r0, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	3332      	adds	r3, #50	@ 0x32
 8002728:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <UART_SetConfig+0x118>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002734:	4419      	add	r1, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fbb2 f2f3 	udiv	r2, r2, r3
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <UART_SetConfig+0x118>)
 800274e:	fba3 0302 	umull	r0, r3, r3, r2
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2064      	movs	r0, #100	@ 0x64
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	3332      	adds	r3, #50	@ 0x32
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <UART_SetConfig+0x118>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f003 020f 	and.w	r2, r3, #15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	440a      	add	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40013800 	.word	0x40013800
 8002780:	51eb851f 	.word	0x51eb851f

08002784 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800278a:	b672      	cpsid	i
 800278c:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <app_init+0x148>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a4f      	ldr	r2, [pc, #316]	@ (80028d0 <app_init+0x14c>)
 8002792:	213f      	movs	r1, #63	@ 0x3f
 8002794:	4618      	mov	r0, r3
 8002796:	f001 fb83 	bl	8003ea0 <sniprintf>
 800279a:	4603      	mov	r3, r0
 800279c:	4a4d      	ldr	r2, [pc, #308]	@ (80028d4 <app_init+0x150>)
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <app_init+0x148>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb4d 	bl	8002e44 <logger_log_print_>
 80027aa:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 80027ac:	b672      	cpsid	i
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <app_init+0x148>)
 80027b0:	681c      	ldr	r4, [r3, #0]
 80027b2:	f7fe f825 	bl	8000800 <HAL_GetTick>
 80027b6:	4603      	mov	r3, r0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <app_init+0x154>)
 80027bc:	4a47      	ldr	r2, [pc, #284]	@ (80028dc <app_init+0x158>)
 80027be:	213f      	movs	r1, #63	@ 0x3f
 80027c0:	4620      	mov	r0, r4
 80027c2:	f001 fb6d 	bl	8003ea0 <sniprintf>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a42      	ldr	r2, [pc, #264]	@ (80028d4 <app_init+0x150>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <app_init+0x148>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fb37 	bl	8002e44 <logger_log_print_>
 80027d6:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80027d8:	b672      	cpsid	i
 80027da:	4b3c      	ldr	r3, [pc, #240]	@ (80028cc <app_init+0x148>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a40      	ldr	r2, [pc, #256]	@ (80028e0 <app_init+0x15c>)
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	213f      	movs	r1, #63	@ 0x3f
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fb5b 	bl	8003ea0 <sniprintf>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <app_init+0x150>)
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <app_init+0x148>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fb25 	bl	8002e44 <logger_log_print_>
 80027fa:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80027fc:	b672      	cpsid	i
 80027fe:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <app_init+0x148>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a38      	ldr	r2, [pc, #224]	@ (80028e4 <app_init+0x160>)
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	213f      	movs	r1, #63	@ 0x3f
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fb49 	bl	8003ea0 <sniprintf>
 800280e:	4603      	mov	r3, r0
 8002810:	4a30      	ldr	r2, [pc, #192]	@ (80028d4 <app_init+0x150>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <app_init+0x148>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fb13 	bl	8002e44 <logger_log_print_>
 800281e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8002820:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <app_init+0x164>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8002826:	b672      	cpsid	i
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <app_init+0x148>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <app_init+0x164>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <app_init+0x168>)
 8002834:	4a2e      	ldr	r2, [pc, #184]	@ (80028f0 <app_init+0x16c>)
 8002836:	213f      	movs	r1, #63	@ 0x3f
 8002838:	f001 fb32 	bl	8003ea0 <sniprintf>
 800283c:	4603      	mov	r3, r0
 800283e:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <app_init+0x150>)
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <app_init+0x148>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fafc 	bl	8002e44 <logger_log_print_>
 800284c:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	e01a      	b.n	800288a <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8002854:	4927      	ldr	r1, [pc, #156]	@ (80028f4 <app_init+0x170>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	4823      	ldr	r0, [pc, #140]	@ (80028f4 <app_init+0x170>)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4403      	add	r3, r0
 8002872:	3308      	adds	r3, #8
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <app_init+0x174>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2100      	movs	r1, #0
 8002880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3301      	adds	r3, #1
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d9e1      	bls.n	8002854 <app_init+0xd0>
	}

	cycle_counter_init();
 8002890:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <app_init+0x178>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <app_init+0x178>)
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289a:	60d3      	str	r3, [r2, #12]
 800289c:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <app_init+0x17c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <app_init+0x17c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <app_init+0x17c>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 80028ae:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <app_init+0x180>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 80028b6:	4b14      	ldr	r3, [pc, #80]	@ (8002908 <app_init+0x184>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
	g_task_menu_tick_cnt = G_APP_TICK_CNT_INI;
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <app_init+0x188>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 80028c2:	b662      	cpsie	i
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	08005150 	.word	0x08005150
 80028d0:	08004edc 	.word	0x08004edc
 80028d4:	200001a0 	.word	0x200001a0
 80028d8:	08004ee0 	.word	0x08004ee0
 80028dc:	08004eec 	.word	0x08004eec
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	20000010 	.word	0x20000010
 80028e8:	20000148 	.word	0x20000148
 80028ec:	08004f10 	.word	0x08004f10
 80028f0:	08004f1c 	.word	0x08004f1c
 80028f4:	08005138 	.word	0x08005138
 80028f8:	20000154 	.word	0x20000154
 80028fc:	e000edf0 	.word	0xe000edf0
 8002900:	e0001000 	.word	0xe0001000
 8002904:	20000150 	.word	0x20000150
 8002908:	200001ec 	.word	0x200001ec
 800290c:	200001b0 	.word	0x200001b0

08002910 <app_update>:

void app_update(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8002916:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <app_update+0xac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d049      	beq.n	80029b2 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <app_update+0xac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	4a25      	ldr	r2, [pc, #148]	@ (80029bc <app_update+0xac>)
 8002926:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8002928:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <app_update+0xb0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <app_update+0xb0>)
 8002930:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8002932:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <app_update+0xb4>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	e036      	b.n	80029ac <app_update+0x9c>
    	{
			cycle_counter_reset();
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <app_update+0xb8>)
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8002944:	4921      	ldr	r1, [pc, #132]	@ (80029cc <app_update+0xbc>)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3304      	adds	r3, #4
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	481d      	ldr	r0, [pc, #116]	@ (80029cc <app_update+0xbc>)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4403      	add	r3, r0
 8002964:	3308      	adds	r3, #8
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 800296c:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <app_update+0xb8>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <app_update+0xc0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4917      	ldr	r1, [pc, #92]	@ (80029d4 <app_update+0xc4>)
 8002976:	fba1 1303 	umull	r1, r3, r1, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <app_update+0xb4>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	4a0e      	ldr	r2, [pc, #56]	@ (80029c4 <app_update+0xb4>)
 800298c:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <app_update+0xc8>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d904      	bls.n	80029a6 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 800299c:	490e      	ldr	r1, [pc, #56]	@ (80029d8 <app_update+0xc8>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3301      	adds	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d9c5      	bls.n	800293e <app_update+0x2e>
			}
	    }
    }
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000150 	.word	0x20000150
 80029c0:	20000148 	.word	0x20000148
 80029c4:	2000014c 	.word	0x2000014c
 80029c8:	e0001000 	.word	0xe0001000
 80029cc:	08005138 	.word	0x08005138
 80029d0:	20000000 	.word	0x20000000
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	20000154 	.word	0x20000154

080029dc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_SYSTICK_Callback+0x2c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <HAL_SYSTICK_Callback+0x2c>)
 80029e8:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_SYSTICK_Callback+0x30>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_SYSTICK_Callback+0x30>)
 80029f2:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_SYSTICK_Callback+0x34>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <HAL_SYSTICK_Callback+0x34>)
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000150 	.word	0x20000150
 8002a0c:	200001ec 	.word	0x200001ec
 8002a10:	200001b0 	.word	0x200001b0

08002a14 <displayInit>:

void display_delay_us(uint32_t delay_us);

//=====[Implementations of public functions]===================================
void displayInit( displayConnection_t connection )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 8002a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002adc <displayInit+0xc8>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 8002a24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <displayInit+0xcc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8002a2a:	2032      	movs	r0, #50	@ 0x32
 8002a2c:	f7fd fef2 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a30:	2130      	movs	r1, #48	@ 0x30
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 f8b6 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8002a38:	2005      	movs	r0, #5
 8002a3a:	f7fd feeb 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a3e:	2130      	movs	r1, #48	@ 0x30
 8002a40:	2000      	movs	r0, #0
 8002a42:	f000 f8af 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7fd fee4 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a4c:	2130      	movs	r1, #48	@ 0x30
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f000 f8a8 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fd fedd 	bl	8000814 <HAL_Delay>

    switch( display.connection ) {
 8002a5a:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <displayInit+0xc8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <displayInit+0x62>
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d119      	bne.n	8002a9a <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a66:	2138      	movs	r1, #56	@ 0x38
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 f89b 	bl	8002ba4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fd fed0 	bl	8000814 <HAL_Delay>
        break;
 8002a74:	e011      	b.n	8002a9a <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a76:	2120      	movs	r1, #32
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f000 f893 	bl	8002ba4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7fd fec8 	bl	8000814 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8002a84:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <displayInit+0xcc>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a8a:	2128      	movs	r1, #40	@ 0x28
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 f889 	bl	8002ba4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7fd febe 	bl	8000814 <HAL_Delay>
        break;
 8002a98:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f881 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7fd feb6 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f87a 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7fd feaf 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002ab6:	2106      	movs	r1, #6
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f873 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7fd fea8 	bl	8000814 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002ac4:	210c      	movs	r1, #12
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f000 f86c 	bl	8002ba4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7fd fea1 	bl	8000814 <HAL_Delay>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000015c 	.word	0x2000015c
 8002ae0:	2000015d 	.word	0x2000015d

08002ae4 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	460a      	mov	r2, r1
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 8002af4:	79bb      	ldrb	r3, [r7, #6]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d83a      	bhi.n	8002b70 <displayCharPositionWrite+0x8c>
 8002afa:	a201      	add	r2, pc, #4	@ (adr r2, 8002b00 <displayCharPositionWrite+0x1c>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b23 	.word	0x08002b23
 8002b08:	08002b3d 	.word	0x08002b3d
 8002b0c:	08002b57 	.word	0x08002b57
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 f842 	bl	8002ba4 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8002b20:	e026      	b.n	8002b70 <displayCharPositionWrite+0x8c>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	3340      	adds	r3, #64	@ 0x40
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8002b2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b2e:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	2000      	movs	r0, #0
 8002b36:	f000 f835 	bl	8002ba4 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8002b3a:	e019      	b.n	8002b70 <displayCharPositionWrite+0x8c>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8002b44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b48:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f828 	bl	8002ba4 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8002b54:	e00c      	b.n	8002b70 <displayCharPositionWrite+0x8c>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	3354      	adds	r3, #84	@ 0x54
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8002b5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b62:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f000 f81b 	bl	8002ba4 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8002b6e:	bf00      	nop
    }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002b80:	e007      	b.n	8002b92 <displayStringWrite+0x1a>
    	displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f000 f809 	bl	8002ba4 <displayCodeWrite>
    while (*str) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f3      	bne.n	8002b82 <displayStringWrite+0xa>
    }
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	460a      	mov	r2, r1
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71bb      	strb	r3, [r7, #6]
	if ( type == DISPLAY_RS_INSTRUCTION )
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	f000 f812 	bl	8002bec <displayPinWrite>
 8002bc8:	e003      	b.n	8002bd2 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 8002bca:	2101      	movs	r1, #1
 8002bcc:	2004      	movs	r0, #4
 8002bce:	f000 f80d 	bl	8002bec <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2005      	movs	r0, #5
 8002bd6:	f000 f809 	bl	8002bec <displayPinWrite>
	displayDataBusWrite( dataBus );
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f873 	bl	8002cc8 <displayDataBusWrite>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <displayPinWrite+0xcc>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <displayPinWrite+0x1c>
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d154      	bne.n	8002cae <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8002c04:	bf00      	nop
            }
            break;
 8002c06:	e052      	b.n	8002cae <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	2b0a      	cmp	r3, #10
 8002c0e:	d84c      	bhi.n	8002caa <displayPinWrite+0xbe>
 8002c10:	a201      	add	r2, pc, #4	@ (adr r2, 8002c18 <displayPinWrite+0x2c>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c89 	.word	0x08002c89
 8002c1c:	08002cab 	.word	0x08002cab
 8002c20:	08002c9b 	.word	0x08002c9b
 8002c24:	08002cab 	.word	0x08002cab
 8002c28:	08002cab 	.word	0x08002cab
 8002c2c:	08002cab 	.word	0x08002cab
 8002c30:	08002cab 	.word	0x08002cab
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	08002c65 	.word	0x08002c65
 8002c40:	08002c77 	.word	0x08002c77
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, value);   break;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	481b      	ldr	r0, [pc, #108]	@ (8002cbc <displayPinWrite+0xd0>)
 8002c4e:	f7fe f8b4 	bl	8000dba <HAL_GPIO_WritePin>
 8002c52:	e02b      	b.n	8002cac <displayPinWrite+0xc0>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, value);   break;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	4817      	ldr	r0, [pc, #92]	@ (8002cbc <displayPinWrite+0xd0>)
 8002c5e:	f7fe f8ac 	bl	8000dba <HAL_GPIO_WritePin>
 8002c62:	e023      	b.n	8002cac <displayPinWrite+0xc0>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, value);   break;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c6e:	4813      	ldr	r0, [pc, #76]	@ (8002cbc <displayPinWrite+0xd0>)
 8002c70:	f7fe f8a3 	bl	8000dba <HAL_GPIO_WritePin>
 8002c74:	e01a      	b.n	8002cac <displayPinWrite+0xc0>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, value);   break;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c80:	480f      	ldr	r0, [pc, #60]	@ (8002cc0 <displayPinWrite+0xd4>)
 8002c82:	f7fe f89a 	bl	8000dba <HAL_GPIO_WritePin>
 8002c86:	e011      	b.n	8002cac <displayPinWrite+0xc0>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, value);   break;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c92:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <displayPinWrite+0xd4>)
 8002c94:	f7fe f891 	bl	8000dba <HAL_GPIO_WritePin>
 8002c98:	e008      	b.n	8002cac <displayPinWrite+0xc0>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, value);   break;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	4808      	ldr	r0, [pc, #32]	@ (8002cc4 <displayPinWrite+0xd8>)
 8002ca4:	f7fe f889 	bl	8000dba <HAL_GPIO_WritePin>
 8002ca8:	e000      	b.n	8002cac <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 8002caa:	bf00      	nop
            }
            break;
 8002cac:	bf00      	nop
    }
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000015c 	.word	0x2000015c
 8002cbc:	40010c00 	.word	0x40010c00
 8002cc0:	40010800 	.word	0x40010800
 8002cc4:	40011000 	.word	0x40011000

08002cc8 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2006      	movs	r0, #6
 8002cd6:	f7ff ff89 	bl	8002bec <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	200e      	movs	r0, #14
 8002ce4:	f7ff ff82 	bl	8002bec <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	4619      	mov	r1, r3
 8002cf0:	200d      	movs	r0, #13
 8002cf2:	f7ff ff7b 	bl	8002bec <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	200c      	movs	r0, #12
 8002d00:	f7ff ff74 	bl	8002bec <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	200b      	movs	r0, #11
 8002d0e:	f7ff ff6d 	bl	8002bec <displayPinWrite>
    switch( display.connection ) {
 8002d12:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <displayDataBusWrite+0x114>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01e      	beq.n	8002d58 <displayDataBusWrite+0x90>
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d14b      	bne.n	8002db6 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	4619      	mov	r1, r3
 8002d26:	200a      	movs	r0, #10
 8002d28:	f7ff ff60 	bl	8002bec <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	2009      	movs	r0, #9
 8002d36:	f7ff ff59 	bl	8002bec <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	4619      	mov	r1, r3
 8002d42:	2008      	movs	r0, #8
 8002d44:	f7ff ff52 	bl	8002bec <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	4619      	mov	r1, r3
 8002d50:	2007      	movs	r0, #7
 8002d52:	f7ff ff4b 	bl	8002bec <displayPinWrite>
        break;
 8002d56:	e02e      	b.n	8002db6 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <displayDataBusWrite+0x118>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d029      	beq.n	8002db4 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8002d60:	2101      	movs	r1, #1
 8002d62:	2006      	movs	r0, #6
 8002d64:	f7ff ff42 	bl	8002bec <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_01US);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f000 f83b 	bl	8002de4 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2006      	movs	r0, #6
 8002d72:	f7ff ff3b 	bl	8002bec <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_37US);
 8002d76:	2025      	movs	r0, #37	@ 0x25
 8002d78:	f000 f834 	bl	8002de4 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	200e      	movs	r0, #14
 8002d86:	f7ff ff31 	bl	8002bec <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	200d      	movs	r0, #13
 8002d94:	f7ff ff2a 	bl	8002bec <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	200c      	movs	r0, #12
 8002da2:	f7ff ff23 	bl	8002bec <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	4619      	mov	r1, r3
 8002dae:	200b      	movs	r0, #11
 8002db0:	f7ff ff1c 	bl	8002bec <displayPinWrite>
            }
        break;
 8002db4:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8002db6:	2101      	movs	r1, #1
 8002db8:	2006      	movs	r0, #6
 8002dba:	f7ff ff17 	bl	8002bec <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_01US);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 f810 	bl	8002de4 <display_delay_us>

    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2006      	movs	r0, #6
 8002dc8:	f7ff ff10 	bl	8002bec <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_37US);
 8002dcc:	2025      	movs	r0, #37	@ 0x25
 8002dce:	f000 f809 	bl	8002de4 <display_delay_us>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000015c 	.word	0x2000015c
 8002de0:	2000015d 	.word	0x2000015d

08002de4 <display_delay_us>:

void display_delay_us(uint32_t delay_us)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	uint32_t now = cycle_counter_time_us();
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <display_delay_us+0x54>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <display_delay_us+0x58>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4912      	ldr	r1, [pc, #72]	@ (8002e40 <display_delay_us+0x5c>)
 8002df6:	fba1 1303 	umull	r1, r3, r1, r3
 8002dfa:	0c9b      	lsrs	r3, r3, #18
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	60fb      	str	r3, [r7, #12]
	uint32_t then = delay_us + now;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60bb      	str	r3, [r7, #8]

	while (now < then)
 8002e0a:	e00a      	b.n	8002e22 <display_delay_us+0x3e>
		now = cycle_counter_time_us();
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <display_delay_us+0x54>)
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <display_delay_us+0x58>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	490a      	ldr	r1, [pc, #40]	@ (8002e40 <display_delay_us+0x5c>)
 8002e16:	fba1 1303 	umull	r1, r3, r1, r3
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60fb      	str	r3, [r7, #12]
	while (now < then)
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3f0      	bcc.n	8002e0c <display_delay_us+0x28>
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e0001000 	.word	0xe0001000
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	431bde83 	.word	0x431bde83

08002e44 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 ffb7 	bl	8003dc0 <iprintf>
	fflush(stdout);
 8002e52:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <logger_log_print_+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fedb 	bl	8003c14 <fflush>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000038 	.word	0x20000038

08002e6c <task_menu_init>:
uint32_t g_task_menu_cnt;
volatile uint32_t g_task_menu_tick_cnt;

/********************** external functions definition ************************/
void task_menu_init(void *parameters)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	6078      	str	r0, [r7, #4]
	task_menu_st_t	state;
	task_menu_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 8002e74:	b672      	cpsid	i
 8002e76:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <task_menu_init+0x170>)
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <task_menu_init+0x174>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4b58      	ldr	r3, [pc, #352]	@ (8002fe4 <task_menu_init+0x178>)
 8002e82:	4a59      	ldr	r2, [pc, #356]	@ (8002fe8 <task_menu_init+0x17c>)
 8002e84:	213f      	movs	r1, #63	@ 0x3f
 8002e86:	f001 f80b 	bl	8003ea0 <sniprintf>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a57      	ldr	r2, [pc, #348]	@ (8002fec <task_menu_init+0x180>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b52      	ldr	r3, [pc, #328]	@ (8002fdc <task_menu_init+0x170>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ffd5 	bl	8002e44 <logger_log_print_>
 8002e9a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 8002e9c:	b672      	cpsid	i
 8002e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002fdc <task_menu_init+0x170>)
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <task_menu_init+0x184>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	@ (8002ff4 <task_menu_init+0x188>)
 8002eaa:	4a53      	ldr	r2, [pc, #332]	@ (8002ff8 <task_menu_init+0x18c>)
 8002eac:	213f      	movs	r1, #63	@ 0x3f
 8002eae:	f000 fff7 	bl	8003ea0 <sniprintf>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002fec <task_menu_init+0x180>)
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b48      	ldr	r3, [pc, #288]	@ (8002fdc <task_menu_init+0x170>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ffc1 	bl	8002e44 <logger_log_print_>
 8002ec2:	b662      	cpsie	i

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <task_menu_init+0x190>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 8002eca:	b672      	cpsid	i
 8002ecc:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <task_menu_init+0x170>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <task_menu_init+0x190>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8003000 <task_menu_init+0x194>)
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <task_menu_init+0x198>)
 8002eda:	213f      	movs	r1, #63	@ 0x3f
 8002edc:	f000 ffe0 	bl	8003ea0 <sniprintf>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a42      	ldr	r2, [pc, #264]	@ (8002fec <task_menu_init+0x180>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <task_menu_init+0x170>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ffaa 	bl	8002e44 <logger_log_print_>
 8002ef0:	b662      	cpsie	i

	init_queue_event_task_menu();
 8002ef2:	f000 f947 	bl	8003184 <init_queue_event_task_menu>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_menu_dta = &task_menu_dta;
 8002ef6:	4b44      	ldr	r3, [pc, #272]	@ (8003008 <task_menu_init+0x19c>)
 8002ef8:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_menu_dta->state;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002f00:	b672      	cpsid	i
 8002f02:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <task_menu_init+0x170>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4b40      	ldr	r3, [pc, #256]	@ (800300c <task_menu_init+0x1a0>)
 8002f0c:	4a40      	ldr	r2, [pc, #256]	@ (8003010 <task_menu_init+0x1a4>)
 8002f0e:	213f      	movs	r1, #63	@ 0x3f
 8002f10:	f000 ffc6 	bl	8003ea0 <sniprintf>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4a35      	ldr	r2, [pc, #212]	@ (8002fec <task_menu_init+0x180>)
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <task_menu_init+0x170>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff90 	bl	8002e44 <logger_log_print_>
 8002f24:	b662      	cpsie	i

	event = p_task_menu_dta->event;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	795b      	ldrb	r3, [r3, #5]
 8002f2a:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002f2c:	b672      	cpsid	i
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <task_menu_init+0x170>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	7abb      	ldrb	r3, [r7, #10]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4b37      	ldr	r3, [pc, #220]	@ (8003014 <task_menu_init+0x1a8>)
 8002f38:	4a35      	ldr	r2, [pc, #212]	@ (8003010 <task_menu_init+0x1a4>)
 8002f3a:	213f      	movs	r1, #63	@ 0x3f
 8002f3c:	f000 ffb0 	bl	8003ea0 <sniprintf>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a2a      	ldr	r2, [pc, #168]	@ (8002fec <task_menu_init+0x180>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <task_menu_init+0x170>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff7a 	bl	8002e44 <logger_log_print_>
 8002f50:	b662      	cpsie	i

	b_event = p_task_menu_dta->flag;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	799b      	ldrb	r3, [r3, #6]
 8002f56:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002f58:	b672      	cpsid	i
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <task_menu_init+0x170>)
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	7a7b      	ldrb	r3, [r7, #9]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <task_menu_init+0xfc>
 8002f64:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <task_menu_init+0x1ac>)
 8002f66:	e000      	b.n	8002f6a <task_menu_init+0xfe>
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <task_menu_init+0x1b0>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <task_menu_init+0x1b4>)
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <task_menu_init+0x1b8>)
 8002f70:	213f      	movs	r1, #63	@ 0x3f
 8002f72:	f000 ff95 	bl	8003ea0 <sniprintf>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <task_menu_init+0x180>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b17      	ldr	r3, [pc, #92]	@ (8002fdc <task_menu_init+0x170>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <logger_log_print_>
 8002f86:	b662      	cpsie	i

	cycle_counter_init();
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <task_menu_init+0x1bc>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <task_menu_init+0x1bc>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	60d3      	str	r3, [r2, #12]
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <task_menu_init+0x1c0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <task_menu_init+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a23      	ldr	r2, [pc, #140]	@ (800302c <task_menu_init+0x1c0>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]
	cycle_counter_reset();
 8002fa6:	4b21      	ldr	r3, [pc, #132]	@ (800302c <task_menu_init+0x1c0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]

	displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff fd31 	bl	8002a14 <displayInit>

    displayCharPositionWrite(0, 0);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7ff fd95 	bl	8002ae4 <displayCharPositionWrite>
	displayStringWrite("TdSE Bienvenidos");
 8002fba:	481d      	ldr	r0, [pc, #116]	@ (8003030 <task_menu_init+0x1c4>)
 8002fbc:	f7ff fddc 	bl	8002b78 <displayStringWrite>

	displayCharPositionWrite(0, 1);
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fd8e 	bl	8002ae4 <displayCharPositionWrite>
	displayStringWrite("Test Nro: ");
 8002fc8:	481a      	ldr	r0, [pc, #104]	@ (8003034 <task_menu_init+0x1c8>)
 8002fca:	f7ff fdd5 	bl	8002b78 <displayStringWrite>

	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <task_menu_init+0x1cc>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08005150 	.word	0x08005150
 8002fe0:	20000014 	.word	0x20000014
 8002fe4:	08004f6c 	.word	0x08004f6c
 8002fe8:	08004f7c 	.word	0x08004f7c
 8002fec:	200001a0 	.word	0x200001a0
 8002ff0:	20000018 	.word	0x20000018
 8002ff4:	08004f94 	.word	0x08004f94
 8002ff8:	08004fa0 	.word	0x08004fa0
 8002ffc:	200001ac 	.word	0x200001ac
 8003000:	08004fb0 	.word	0x08004fb0
 8003004:	08004fc0 	.word	0x08004fc0
 8003008:	200001a4 	.word	0x200001a4
 800300c:	08004fd0 	.word	0x08004fd0
 8003010:	08004fd8 	.word	0x08004fd8
 8003014:	08004fe4 	.word	0x08004fe4
 8003018:	08004fec 	.word	0x08004fec
 800301c:	08004ff4 	.word	0x08004ff4
 8003020:	08004ffc 	.word	0x08004ffc
 8003024:	08005004 	.word	0x08005004
 8003028:	e000edf0 	.word	0xe000edf0
 800302c:	e0001000 	.word	0xe0001000
 8003030:	08005014 	.word	0x08005014
 8003034:	08005028 	.word	0x08005028
 8003038:	200001b0 	.word	0x200001b0

0800303c <task_menu_update>:

void task_menu_update(void *parameters)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	task_menu_dta_t *p_task_menu_dta;
	bool b_time_update_required = false;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
	char menu_str[8];

	/* Update Task Menu Counter */
	g_task_menu_cnt++;
 8003048:	4b49      	ldr	r3, [pc, #292]	@ (8003170 <task_menu_update+0x134>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	4a48      	ldr	r2, [pc, #288]	@ (8003170 <task_menu_update+0x134>)
 8003050:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8003052:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8003054:	4b47      	ldr	r3, [pc, #284]	@ (8003174 <task_menu_update+0x138>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <task_menu_update+0x2e>
    {
    	g_task_menu_tick_cnt--;
 800305c:	4b45      	ldr	r3, [pc, #276]	@ (8003174 <task_menu_update+0x138>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	4a44      	ldr	r2, [pc, #272]	@ (8003174 <task_menu_update+0x138>)
 8003064:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800306a:	b662      	cpsie	i

    while (b_time_update_required)
 800306c:	e077      	b.n	800315e <task_menu_update+0x122>
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 800306e:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <task_menu_update+0x138>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <task_menu_update+0x4c>
		{
			g_task_menu_tick_cnt--;
 8003078:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <task_menu_update+0x138>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	4a3d      	ldr	r2, [pc, #244]	@ (8003174 <task_menu_update+0x138>)
 8003080:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
 8003086:	e001      	b.n	800308c <task_menu_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 800308c:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_menu_dta = &task_menu_dta;
 800308e:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <task_menu_update+0x13c>)
 8003090:	613b      	str	r3, [r7, #16]

    	if (DEL_MEN_XX_MIN < p_task_menu_dta->tick)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <task_menu_update+0x6a>
		{
			p_task_menu_dta->tick--;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e05b      	b.n	800315e <task_menu_update+0x122>
		}
		else
		{
			snprintf(menu_str, sizeof(menu_str), "%lu", (g_task_menu_cnt/1000ul));
 80030a6:	4b32      	ldr	r3, [pc, #200]	@ (8003170 <task_menu_update+0x134>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a34      	ldr	r2, [pc, #208]	@ (800317c <task_menu_update+0x140>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	f107 0008 	add.w	r0, r7, #8
 80030b6:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <task_menu_update+0x144>)
 80030b8:	2108      	movs	r1, #8
 80030ba:	f000 fef1 	bl	8003ea0 <sniprintf>
			displayCharPositionWrite(10, 1);
 80030be:	2101      	movs	r1, #1
 80030c0:	200a      	movs	r0, #10
 80030c2:	f7ff fd0f 	bl	8002ae4 <displayCharPositionWrite>
			displayStringWrite(menu_str);
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fd54 	bl	8002b78 <displayStringWrite>

			p_task_menu_dta->tick = DEL_MEN_XX_MAX;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80030d6:	601a      	str	r2, [r3, #0]

			if (true == any_event_task_menu())
 80030d8:	f000 f8c0 	bl	800325c <any_event_task_menu>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <task_menu_update+0xb8>
			{
				p_task_menu_dta->flag = true;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2201      	movs	r2, #1
 80030e6:	719a      	strb	r2, [r3, #6]
				p_task_menu_dta->event = get_event_task_menu();
 80030e8:	f000 f892 	bl	8003210 <get_event_task_menu>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_menu_dta->state)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	791b      	ldrb	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <task_menu_update+0xc6>
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00f      	beq.n	8003120 <task_menu_update+0xe4>
 8003100:	e01d      	b.n	800313e <task_menu_update+0x102>
			{
				case ST_MEN_XX_IDLE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	799b      	ldrb	r3, [r3, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d026      	beq.n	8003158 <task_menu_update+0x11c>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	795b      	ldrb	r3, [r3, #5]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d122      	bne.n	8003158 <task_menu_update+0x11c>
					{
						p_task_menu_dta->flag = false;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2200      	movs	r2, #0
 8003116:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ACTIVE;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2201      	movs	r2, #1
 800311c:	711a      	strb	r2, [r3, #4]
					}

					break;
 800311e:	e01b      	b.n	8003158 <task_menu_update+0x11c>

				case ST_MEN_XX_ACTIVE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_IDLE == p_task_menu_dta->event))
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	799b      	ldrb	r3, [r3, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d019      	beq.n	800315c <task_menu_update+0x120>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	795b      	ldrb	r3, [r3, #5]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d115      	bne.n	800315c <task_menu_update+0x120>
					{
						p_task_menu_dta->flag = false;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2200      	movs	r2, #0
 8003134:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_IDLE;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2200      	movs	r2, #0
 800313a:	711a      	strb	r2, [r3, #4]
					}

					break;
 800313c:	e00e      	b.n	800315c <task_menu_update+0x120>

				default:

					p_task_menu_dta->tick  = DEL_MEN_XX_MIN;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
					p_task_menu_dta->state = ST_MEN_XX_IDLE;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2200      	movs	r2, #0
 8003148:	711a      	strb	r2, [r3, #4]
					p_task_menu_dta->event = EV_MEN_ENT_IDLE;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2200      	movs	r2, #0
 800314e:	715a      	strb	r2, [r3, #5]
					p_task_menu_dta->flag  = false;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2200      	movs	r2, #0
 8003154:	719a      	strb	r2, [r3, #6]

					break;
 8003156:	e002      	b.n	800315e <task_menu_update+0x122>
					break;
 8003158:	bf00      	nop
 800315a:	e000      	b.n	800315e <task_menu_update+0x122>
					break;
 800315c:	bf00      	nop
    while (b_time_update_required)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d184      	bne.n	800306e <task_menu_update+0x32>
			}
		}
	}
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200001ac 	.word	0x200001ac
 8003174:	200001b0 	.word	0x200001b0
 8003178:	200001a4 	.word	0x200001a4
 800317c:	10624dd3 	.word	0x10624dd3
 8003180:	08005034 	.word	0x08005034

08003184 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <init_queue_event_task_menu+0x44>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8003190:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <init_queue_event_task_menu+0x44>)
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8003196:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <init_queue_event_task_menu+0x44>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 800319c:	2300      	movs	r3, #0
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	e008      	b.n	80031b4 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80031a2:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <init_queue_event_task_menu+0x44>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	330c      	adds	r3, #12
 80031aa:	22ff      	movs	r2, #255	@ 0xff
 80031ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3301      	adds	r3, #1
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d9f3      	bls.n	80031a2 <init_queue_event_task_menu+0x1e>
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	200001b4 	.word	0x200001b4

080031cc <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <put_event_task_menu+0x40>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <put_event_task_menu+0x40>)
 80031de:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <put_event_task_menu+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4909      	ldr	r1, [pc, #36]	@ (800320c <put_event_task_menu+0x40>)
 80031e8:	600a      	str	r2, [r1, #0]
 80031ea:	4a08      	ldr	r2, [pc, #32]	@ (800320c <put_event_task_menu+0x40>)
 80031ec:	4413      	add	r3, r2
 80031ee:	79fa      	ldrb	r2, [r7, #7]
 80031f0:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <put_event_task_menu+0x40>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d102      	bne.n	8003200 <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <put_event_task_menu+0x40>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200001b4 	.word	0x200001b4

08003210 <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <get_event_task_menu+0x48>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	3b01      	subs	r3, #1
 800321c:	4a0e      	ldr	r2, [pc, #56]	@ (8003258 <get_event_task_menu+0x48>)
 800321e:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <get_event_task_menu+0x48>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a0c      	ldr	r2, [pc, #48]	@ (8003258 <get_event_task_menu+0x48>)
 8003226:	4413      	add	r3, r2
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <get_event_task_menu+0x48>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	4909      	ldr	r1, [pc, #36]	@ (8003258 <get_event_task_menu+0x48>)
 8003234:	604a      	str	r2, [r1, #4]
 8003236:	4a08      	ldr	r2, [pc, #32]	@ (8003258 <get_event_task_menu+0x48>)
 8003238:	4413      	add	r3, r2
 800323a:	22ff      	movs	r2, #255	@ 0xff
 800323c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <get_event_task_menu+0x48>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b10      	cmp	r3, #16
 8003244:	d102      	bne.n	800324c <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 8003246:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <get_event_task_menu+0x48>)
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]

	return event;
 800324c:	79fb      	ldrb	r3, [r7, #7]
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	200001b4 	.word	0x200001b4

0800325c <any_event_task_menu>:

bool any_event_task_menu(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <any_event_task_menu+0x20>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <any_event_task_menu+0x20>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	200001b4 	.word	0x200001b4

08003280 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8003288:	b672      	cpsid	i
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <task_sensor_init+0x130>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	4b49      	ldr	r3, [pc, #292]	@ (80033b4 <task_sensor_init+0x134>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4b48      	ldr	r3, [pc, #288]	@ (80033b8 <task_sensor_init+0x138>)
 8003296:	4a49      	ldr	r2, [pc, #292]	@ (80033bc <task_sensor_init+0x13c>)
 8003298:	213f      	movs	r1, #63	@ 0x3f
 800329a:	f000 fe01 	bl	8003ea0 <sniprintf>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a47      	ldr	r2, [pc, #284]	@ (80033c0 <task_sensor_init+0x140>)
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b42      	ldr	r3, [pc, #264]	@ (80033b0 <task_sensor_init+0x130>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fdcb 	bl	8002e44 <logger_log_print_>
 80032ae:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 80032b0:	b672      	cpsid	i
 80032b2:	4b3f      	ldr	r3, [pc, #252]	@ (80033b0 <task_sensor_init+0x130>)
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <task_sensor_init+0x144>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4b42      	ldr	r3, [pc, #264]	@ (80033c8 <task_sensor_init+0x148>)
 80032be:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <task_sensor_init+0x14c>)
 80032c0:	213f      	movs	r1, #63	@ 0x3f
 80032c2:	f000 fded 	bl	8003ea0 <sniprintf>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4a3d      	ldr	r2, [pc, #244]	@ (80033c0 <task_sensor_init+0x140>)
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b38      	ldr	r3, [pc, #224]	@ (80033b0 <task_sensor_init+0x130>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fdb7 	bl	8002e44 <logger_log_print_>
 80032d6:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 80032d8:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <task_sensor_init+0x150>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 80032de:	b672      	cpsid	i
 80032e0:	4b33      	ldr	r3, [pc, #204]	@ (80033b0 <task_sensor_init+0x130>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	4b3a      	ldr	r3, [pc, #232]	@ (80033d0 <task_sensor_init+0x150>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <task_sensor_init+0x154>)
 80032ec:	4a3a      	ldr	r2, [pc, #232]	@ (80033d8 <task_sensor_init+0x158>)
 80032ee:	213f      	movs	r1, #63	@ 0x3f
 80032f0:	f000 fdd6 	bl	8003ea0 <sniprintf>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <task_sensor_init+0x140>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <task_sensor_init+0x130>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fda0 	bl	8002e44 <logger_log_print_>
 8003304:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e046      	b.n	800339a <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <task_sensor_init+0x15c>)
 8003312:	4413      	add	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8003316:	b672      	cpsid	i
 8003318:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <task_sensor_init+0x130>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <task_sensor_init+0x160>)
 8003322:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <task_sensor_init+0x164>)
 8003324:	213f      	movs	r1, #63	@ 0x3f
 8003326:	f000 fdbb 	bl	8003ea0 <sniprintf>
 800332a:	4603      	mov	r3, r0
 800332c:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <task_sensor_init+0x140>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <task_sensor_init+0x130>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fd85 	bl	8002e44 <logger_log_print_>
 800333a:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003342:	b672      	cpsid	i
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <task_sensor_init+0x130>)
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4b26      	ldr	r3, [pc, #152]	@ (80033e8 <task_sensor_init+0x168>)
 800334e:	4a25      	ldr	r2, [pc, #148]	@ (80033e4 <task_sensor_init+0x164>)
 8003350:	213f      	movs	r1, #63	@ 0x3f
 8003352:	f000 fda5 	bl	8003ea0 <sniprintf>
 8003356:	4603      	mov	r3, r0
 8003358:	4a19      	ldr	r2, [pc, #100]	@ (80033c0 <task_sensor_init+0x140>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <task_sensor_init+0x130>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fd6f 	bl	8002e44 <logger_log_print_>
 8003366:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	795b      	ldrb	r3, [r3, #5]
 800336c:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 800336e:	b672      	cpsid	i
 8003370:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <task_sensor_init+0x130>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <task_sensor_init+0x16c>)
 800337a:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <task_sensor_init+0x158>)
 800337c:	213f      	movs	r1, #63	@ 0x3f
 800337e:	f000 fd8f 	bl	8003ea0 <sniprintf>
 8003382:	4603      	mov	r3, r0
 8003384:	4a0e      	ldr	r2, [pc, #56]	@ (80033c0 <task_sensor_init+0x140>)
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <task_sensor_init+0x130>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fd59 	bl	8002e44 <logger_log_print_>
 8003392:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d9b5      	bls.n	800330c <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <task_sensor_init+0x170>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08005150 	.word	0x08005150
 80033b4:	2000001c 	.word	0x2000001c
 80033b8:	0800507c 	.word	0x0800507c
 80033bc:	08005090 	.word	0x08005090
 80033c0:	200001a0 	.word	0x200001a0
 80033c4:	20000020 	.word	0x20000020
 80033c8:	080050a8 	.word	0x080050a8
 80033cc:	080050b4 	.word	0x080050b4
 80033d0:	200001e8 	.word	0x200001e8
 80033d4:	080050c4 	.word	0x080050c4
 80033d8:	080050d8 	.word	0x080050d8
 80033dc:	200001d0 	.word	0x200001d0
 80033e0:	080050e8 	.word	0x080050e8
 80033e4:	080050f0 	.word	0x080050f0
 80033e8:	080050fc 	.word	0x080050fc
 80033ec:	08005104 	.word	0x08005104
 80033f0:	200001ec 	.word	0x200001ec

080033f4 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 80033fc:	2300      	movs	r3, #0
 80033fe:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8003400:	4b61      	ldr	r3, [pc, #388]	@ (8003588 <task_sensor_update+0x194>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a60      	ldr	r2, [pc, #384]	@ (8003588 <task_sensor_update+0x194>)
 8003408:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800340a:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 800340c:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <task_sensor_update+0x198>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8003414:	4b5d      	ldr	r3, [pc, #372]	@ (800358c <task_sensor_update+0x198>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	4a5c      	ldr	r2, [pc, #368]	@ (800358c <task_sensor_update+0x198>)
 800341c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800341e:	2301      	movs	r3, #1
 8003420:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8003422:	b662      	cpsie	i

    while (b_time_update_required)
 8003424:	e0a6      	b.n	8003574 <task_sensor_update+0x180>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8003426:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8003428:	4b58      	ldr	r3, [pc, #352]	@ (800358c <task_sensor_update+0x198>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8003430:	4b56      	ldr	r3, [pc, #344]	@ (800358c <task_sensor_update+0x198>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3b01      	subs	r3, #1
 8003436:	4a55      	ldr	r2, [pc, #340]	@ (800358c <task_sensor_update+0x198>)
 8003438:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800343a:	2301      	movs	r3, #1
 800343c:	74fb      	strb	r3, [r7, #19]
 800343e:	e001      	b.n	8003444 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8003440:	2300      	movs	r3, #0
 8003442:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003444:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e08f      	b.n	800356c <task_sensor_update+0x178>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a4e      	ldr	r2, [pc, #312]	@ (8003590 <task_sensor_update+0x19c>)
 8003458:	4413      	add	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4a4c      	ldr	r2, [pc, #304]	@ (8003594 <task_sensor_update+0x1a0>)
 8003462:	4413      	add	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7a9c      	ldrb	r4, [r3, #10]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	891b      	ldrh	r3, [r3, #8]
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f7fd fc89 	bl	8000d8c <HAL_GPIO_ReadPin>
 800347a:	4603      	mov	r3, r0
 800347c:	429c      	cmp	r4, r3
 800347e:	d103      	bne.n	8003488 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2201      	movs	r2, #1
 8003484:	715a      	strb	r2, [r3, #5]
 8003486:	e002      	b.n	800348e <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d856      	bhi.n	8003544 <task_sensor_update+0x150>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <task_sensor_update+0xa8>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	08003511 	.word	0x08003511
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	795b      	ldrb	r3, [r3, #5]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d151      	bne.n	8003558 <task_sensor_update+0x164>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2201      	movs	r2, #1
 80034c0:	711a      	strb	r2, [r3, #4]
					}

					break;
 80034c2:	e049      	b.n	8003558 <task_sensor_update+0x164>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d142      	bne.n	800355c <task_sensor_update+0x168>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	795b      	ldrb	r3, [r3, #5]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <task_sensor_update+0xfc>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	7c5b      	ldrb	r3, [r3, #17]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fe72 	bl	80031cc <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2202      	movs	r2, #2
 80034ec:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 80034ee:	e035      	b.n	800355c <task_sensor_update+0x168>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	711a      	strb	r2, [r3, #4]
					break;
 80034f6:	e031      	b.n	800355c <task_sensor_update+0x168>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	795b      	ldrb	r3, [r3, #5]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d12f      	bne.n	8003560 <task_sensor_update+0x16c>
					{
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2203      	movs	r2, #3
 8003504:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	601a      	str	r2, [r3, #0]
					}

					break;
 800350e:	e027      	b.n	8003560 <task_sensor_update+0x16c>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d120      	bne.n	8003564 <task_sensor_update+0x170>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	795b      	ldrb	r3, [r3, #5]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <task_sensor_update+0x148>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_up);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	7c1b      	ldrb	r3, [r3, #16]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fe4c 	bl	80031cc <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 800353a:	e013      	b.n	8003564 <task_sensor_update+0x170>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2202      	movs	r2, #2
 8003540:	711a      	strb	r2, [r3, #4]
					break;
 8003542:	e00f      	b.n	8003564 <task_sensor_update+0x170>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	715a      	strb	r2, [r3, #5]

					break;
 8003556:	e006      	b.n	8003566 <task_sensor_update+0x172>
					break;
 8003558:	bf00      	nop
 800355a:	e004      	b.n	8003566 <task_sensor_update+0x172>
					break;
 800355c:	bf00      	nop
 800355e:	e002      	b.n	8003566 <task_sensor_update+0x172>
					break;
 8003560:	bf00      	nop
 8003562:	e000      	b.n	8003566 <task_sensor_update+0x172>
					break;
 8003564:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b02      	cmp	r3, #2
 8003570:	f67f af6c 	bls.w	800344c <task_sensor_update+0x58>
    while (b_time_update_required)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f47f af55 	bne.w	8003426 <task_sensor_update+0x32>
			}
		}
    }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop
 8003588:	200001e8 	.word	0x200001e8
 800358c:	200001ec 	.word	0x200001ec
 8003590:	08005154 	.word	0x08005154
 8003594:	200001d0 	.word	0x200001d0

08003598 <findslot>:
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <findslot+0x2c>)
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	b118      	cbz	r0, 80035aa <findslot+0x12>
 80035a2:	6a03      	ldr	r3, [r0, #32]
 80035a4:	b90b      	cbnz	r3, 80035aa <findslot+0x12>
 80035a6:	f000 fbd5 	bl	8003d54 <__sinit>
 80035aa:	2c13      	cmp	r4, #19
 80035ac:	d807      	bhi.n	80035be <findslot+0x26>
 80035ae:	4806      	ldr	r0, [pc, #24]	@ (80035c8 <findslot+0x30>)
 80035b0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80035b4:	3201      	adds	r2, #1
 80035b6:	d002      	beq.n	80035be <findslot+0x26>
 80035b8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	2000      	movs	r0, #0
 80035c0:	e7fc      	b.n	80035bc <findslot+0x24>
 80035c2:	bf00      	nop
 80035c4:	20000038 	.word	0x20000038
 80035c8:	200001fc 	.word	0x200001fc

080035cc <error>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	4604      	mov	r4, r0
 80035d0:	f000 fdc0 	bl	8004154 <__errno>
 80035d4:	2613      	movs	r6, #19
 80035d6:	4605      	mov	r5, r0
 80035d8:	2700      	movs	r7, #0
 80035da:	4630      	mov	r0, r6
 80035dc:	4639      	mov	r1, r7
 80035de:	beab      	bkpt	0x00ab
 80035e0:	4606      	mov	r6, r0
 80035e2:	4620      	mov	r0, r4
 80035e4:	602e      	str	r6, [r5, #0]
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035e8 <checkerror>:
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d101      	bne.n	80035f0 <checkerror+0x8>
 80035ec:	f7ff bfee 	b.w	80035cc <error>
 80035f0:	4770      	bx	lr

080035f2 <_swiread>:
 80035f2:	b530      	push	{r4, r5, lr}
 80035f4:	b085      	sub	sp, #20
 80035f6:	2406      	movs	r4, #6
 80035f8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80035fc:	9203      	str	r2, [sp, #12]
 80035fe:	ad01      	add	r5, sp, #4
 8003600:	4620      	mov	r0, r4
 8003602:	4629      	mov	r1, r5
 8003604:	beab      	bkpt	0x00ab
 8003606:	4604      	mov	r4, r0
 8003608:	4620      	mov	r0, r4
 800360a:	f7ff ffed 	bl	80035e8 <checkerror>
 800360e:	b005      	add	sp, #20
 8003610:	bd30      	pop	{r4, r5, pc}

08003612 <_read>:
 8003612:	b570      	push	{r4, r5, r6, lr}
 8003614:	460e      	mov	r6, r1
 8003616:	4614      	mov	r4, r2
 8003618:	f7ff ffbe 	bl	8003598 <findslot>
 800361c:	4605      	mov	r5, r0
 800361e:	b930      	cbnz	r0, 800362e <_read+0x1c>
 8003620:	f000 fd98 	bl	8004154 <__errno>
 8003624:	2309      	movs	r3, #9
 8003626:	6003      	str	r3, [r0, #0]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	4622      	mov	r2, r4
 8003630:	4631      	mov	r1, r6
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	f7ff ffdd 	bl	80035f2 <_swiread>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d0f5      	beq.n	8003628 <_read+0x16>
 800363c:	686b      	ldr	r3, [r5, #4]
 800363e:	1a20      	subs	r0, r4, r0
 8003640:	4403      	add	r3, r0
 8003642:	606b      	str	r3, [r5, #4]
 8003644:	e7f2      	b.n	800362c <_read+0x1a>

08003646 <_swilseek>:
 8003646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003648:	460c      	mov	r4, r1
 800364a:	4616      	mov	r6, r2
 800364c:	f7ff ffa4 	bl	8003598 <findslot>
 8003650:	4605      	mov	r5, r0
 8003652:	b940      	cbnz	r0, 8003666 <_swilseek+0x20>
 8003654:	f000 fd7e 	bl	8004154 <__errno>
 8003658:	2309      	movs	r3, #9
 800365a:	6003      	str	r3, [r0, #0]
 800365c:	f04f 34ff 	mov.w	r4, #4294967295
 8003660:	4620      	mov	r0, r4
 8003662:	b003      	add	sp, #12
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003666:	2e02      	cmp	r6, #2
 8003668:	d903      	bls.n	8003672 <_swilseek+0x2c>
 800366a:	f000 fd73 	bl	8004154 <__errno>
 800366e:	2316      	movs	r3, #22
 8003670:	e7f3      	b.n	800365a <_swilseek+0x14>
 8003672:	2e01      	cmp	r6, #1
 8003674:	d112      	bne.n	800369c <_swilseek+0x56>
 8003676:	6843      	ldr	r3, [r0, #4]
 8003678:	18e4      	adds	r4, r4, r3
 800367a:	d4f6      	bmi.n	800366a <_swilseek+0x24>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	260a      	movs	r6, #10
 8003680:	466f      	mov	r7, sp
 8003682:	e9cd 3400 	strd	r3, r4, [sp]
 8003686:	4630      	mov	r0, r6
 8003688:	4639      	mov	r1, r7
 800368a:	beab      	bkpt	0x00ab
 800368c:	4606      	mov	r6, r0
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff ffaa 	bl	80035e8 <checkerror>
 8003694:	2800      	cmp	r0, #0
 8003696:	dbe1      	blt.n	800365c <_swilseek+0x16>
 8003698:	606c      	str	r4, [r5, #4]
 800369a:	e7e1      	b.n	8003660 <_swilseek+0x1a>
 800369c:	2e02      	cmp	r6, #2
 800369e:	6803      	ldr	r3, [r0, #0]
 80036a0:	d1ec      	bne.n	800367c <_swilseek+0x36>
 80036a2:	260c      	movs	r6, #12
 80036a4:	466f      	mov	r7, sp
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4630      	mov	r0, r6
 80036aa:	4639      	mov	r1, r7
 80036ac:	beab      	bkpt	0x00ab
 80036ae:	4606      	mov	r6, r0
 80036b0:	4630      	mov	r0, r6
 80036b2:	f7ff ff99 	bl	80035e8 <checkerror>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d0d0      	beq.n	800365c <_swilseek+0x16>
 80036ba:	4404      	add	r4, r0
 80036bc:	e7de      	b.n	800367c <_swilseek+0x36>

080036be <_lseek>:
 80036be:	f7ff bfc2 	b.w	8003646 <_swilseek>

080036c2 <_swiwrite>:
 80036c2:	b530      	push	{r4, r5, lr}
 80036c4:	b085      	sub	sp, #20
 80036c6:	2405      	movs	r4, #5
 80036c8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80036cc:	9203      	str	r2, [sp, #12]
 80036ce:	ad01      	add	r5, sp, #4
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	beab      	bkpt	0x00ab
 80036d6:	4604      	mov	r4, r0
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff85 	bl	80035e8 <checkerror>
 80036de:	b005      	add	sp, #20
 80036e0:	bd30      	pop	{r4, r5, pc}

080036e2 <_write>:
 80036e2:	b570      	push	{r4, r5, r6, lr}
 80036e4:	460e      	mov	r6, r1
 80036e6:	4615      	mov	r5, r2
 80036e8:	f7ff ff56 	bl	8003598 <findslot>
 80036ec:	4604      	mov	r4, r0
 80036ee:	b930      	cbnz	r0, 80036fe <_write+0x1c>
 80036f0:	f000 fd30 	bl	8004154 <__errno>
 80036f4:	2309      	movs	r3, #9
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	462a      	mov	r2, r5
 8003700:	4631      	mov	r1, r6
 8003702:	6800      	ldr	r0, [r0, #0]
 8003704:	f7ff ffdd 	bl	80036c2 <_swiwrite>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	dbf5      	blt.n	80036f8 <_write+0x16>
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	1ae8      	subs	r0, r5, r3
 8003710:	4402      	add	r2, r0
 8003712:	42ab      	cmp	r3, r5
 8003714:	6062      	str	r2, [r4, #4]
 8003716:	d1f1      	bne.n	80036fc <_write+0x1a>
 8003718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800371c:	2000      	movs	r0, #0
 800371e:	f7ff bf55 	b.w	80035cc <error>

08003722 <_swiclose>:
 8003722:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003724:	2402      	movs	r4, #2
 8003726:	9001      	str	r0, [sp, #4]
 8003728:	ad01      	add	r5, sp, #4
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	beab      	bkpt	0x00ab
 8003730:	4604      	mov	r4, r0
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff ff58 	bl	80035e8 <checkerror>
 8003738:	b003      	add	sp, #12
 800373a:	bd30      	pop	{r4, r5, pc}

0800373c <_close>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	f7ff ff2a 	bl	8003598 <findslot>
 8003744:	4604      	mov	r4, r0
 8003746:	b930      	cbnz	r0, 8003756 <_close+0x1a>
 8003748:	f000 fd04 	bl	8004154 <__errno>
 800374c:	2309      	movs	r3, #9
 800374e:	6003      	str	r3, [r0, #0]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	3d01      	subs	r5, #1
 8003758:	2d01      	cmp	r5, #1
 800375a:	d809      	bhi.n	8003770 <_close+0x34>
 800375c:	4b07      	ldr	r3, [pc, #28]	@ (800377c <_close+0x40>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d104      	bne.n	8003770 <_close+0x34>
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	2000      	movs	r0, #0
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	e7f1      	b.n	8003754 <_close+0x18>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	f7ff ffd6 	bl	8003722 <_swiclose>
 8003776:	2800      	cmp	r0, #0
 8003778:	d0f5      	beq.n	8003766 <_close+0x2a>
 800377a:	e7eb      	b.n	8003754 <_close+0x18>
 800377c:	200001fc 	.word	0x200001fc

08003780 <_swistat>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	460c      	mov	r4, r1
 8003784:	f7ff ff08 	bl	8003598 <findslot>
 8003788:	4605      	mov	r5, r0
 800378a:	b930      	cbnz	r0, 800379a <_swistat+0x1a>
 800378c:	f000 fce2 	bl	8004154 <__errno>
 8003790:	2309      	movs	r3, #9
 8003792:	6003      	str	r3, [r0, #0]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	6863      	ldr	r3, [r4, #4]
 800379c:	260c      	movs	r6, #12
 800379e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037a8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80037aa:	4630      	mov	r0, r6
 80037ac:	4629      	mov	r1, r5
 80037ae:	beab      	bkpt	0x00ab
 80037b0:	4605      	mov	r5, r0
 80037b2:	4628      	mov	r0, r5
 80037b4:	f7ff ff18 	bl	80035e8 <checkerror>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d0eb      	beq.n	8003794 <_swistat+0x14>
 80037bc:	6120      	str	r0, [r4, #16]
 80037be:	2000      	movs	r0, #0
 80037c0:	e7ea      	b.n	8003798 <_swistat+0x18>

080037c2 <_fstat>:
 80037c2:	460b      	mov	r3, r1
 80037c4:	b510      	push	{r4, lr}
 80037c6:	2100      	movs	r1, #0
 80037c8:	4604      	mov	r4, r0
 80037ca:	2258      	movs	r2, #88	@ 0x58
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fc73 	bl	80040b8 <memset>
 80037d2:	4601      	mov	r1, r0
 80037d4:	4620      	mov	r0, r4
 80037d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037da:	f7ff bfd1 	b.w	8003780 <_swistat>

080037de <_stat>:
 80037de:	b538      	push	{r3, r4, r5, lr}
 80037e0:	460d      	mov	r5, r1
 80037e2:	4604      	mov	r4, r0
 80037e4:	2258      	movs	r2, #88	@ 0x58
 80037e6:	2100      	movs	r1, #0
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fc65 	bl	80040b8 <memset>
 80037ee:	4620      	mov	r0, r4
 80037f0:	2100      	movs	r1, #0
 80037f2:	f000 f811 	bl	8003818 <_swiopen>
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	4604      	mov	r4, r0
 80037fa:	d00b      	beq.n	8003814 <_stat+0x36>
 80037fc:	686b      	ldr	r3, [r5, #4]
 80037fe:	4629      	mov	r1, r5
 8003800:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003804:	606b      	str	r3, [r5, #4]
 8003806:	f7ff ffbb 	bl	8003780 <_swistat>
 800380a:	4605      	mov	r5, r0
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff95 	bl	800373c <_close>
 8003812:	462c      	mov	r4, r5
 8003814:	4620      	mov	r0, r4
 8003816:	bd38      	pop	{r3, r4, r5, pc}

08003818 <_swiopen>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	4682      	mov	sl, r0
 800381e:	460e      	mov	r6, r1
 8003820:	2400      	movs	r4, #0
 8003822:	4f28      	ldr	r7, [pc, #160]	@ (80038c4 <_swiopen+0xac>)
 8003824:	b096      	sub	sp, #88	@ 0x58
 8003826:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800382a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800382e:	3301      	adds	r3, #1
 8003830:	d00c      	beq.n	800384c <_swiopen+0x34>
 8003832:	3401      	adds	r4, #1
 8003834:	2c14      	cmp	r4, #20
 8003836:	d1f6      	bne.n	8003826 <_swiopen+0xe>
 8003838:	f000 fc8c 	bl	8004154 <__errno>
 800383c:	2318      	movs	r3, #24
 800383e:	f04f 34ff 	mov.w	r4, #4294967295
 8003842:	6003      	str	r3, [r0, #0]
 8003844:	4620      	mov	r0, r4
 8003846:	b016      	add	sp, #88	@ 0x58
 8003848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800384c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003850:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003854:	46e9      	mov	r9, sp
 8003856:	d109      	bne.n	800386c <_swiopen+0x54>
 8003858:	4649      	mov	r1, r9
 800385a:	4650      	mov	r0, sl
 800385c:	f7ff ffbf 	bl	80037de <_stat>
 8003860:	3001      	adds	r0, #1
 8003862:	d003      	beq.n	800386c <_swiopen+0x54>
 8003864:	f000 fc76 	bl	8004154 <__errno>
 8003868:	2311      	movs	r3, #17
 800386a:	e7e8      	b.n	800383e <_swiopen+0x26>
 800386c:	f240 6301 	movw	r3, #1537	@ 0x601
 8003870:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003874:	07b2      	lsls	r2, r6, #30
 8003876:	bf48      	it	mi
 8003878:	f045 0502 	orrmi.w	r5, r5, #2
 800387c:	421e      	tst	r6, r3
 800387e:	bf18      	it	ne
 8003880:	f045 0504 	orrne.w	r5, r5, #4
 8003884:	0733      	lsls	r3, r6, #28
 8003886:	bf48      	it	mi
 8003888:	f025 0504 	bicmi.w	r5, r5, #4
 800388c:	4650      	mov	r0, sl
 800388e:	bf48      	it	mi
 8003890:	f045 0508 	orrmi.w	r5, r5, #8
 8003894:	f8cd a000 	str.w	sl, [sp]
 8003898:	f7fc fc58 	bl	800014c <strlen>
 800389c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80038a0:	2501      	movs	r5, #1
 80038a2:	4628      	mov	r0, r5
 80038a4:	4649      	mov	r1, r9
 80038a6:	beab      	bkpt	0x00ab
 80038a8:	4605      	mov	r5, r0
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	db05      	blt.n	80038ba <_swiopen+0xa2>
 80038ae:	2300      	movs	r3, #0
 80038b0:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80038b4:	4447      	add	r7, r8
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e7c4      	b.n	8003844 <_swiopen+0x2c>
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7ff fe86 	bl	80035cc <error>
 80038c0:	4604      	mov	r4, r0
 80038c2:	e7bf      	b.n	8003844 <_swiopen+0x2c>
 80038c4:	200001fc 	.word	0x200001fc

080038c8 <_get_semihosting_exts>:
 80038c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038cc:	4606      	mov	r6, r0
 80038ce:	460f      	mov	r7, r1
 80038d0:	4829      	ldr	r0, [pc, #164]	@ (8003978 <_get_semihosting_exts+0xb0>)
 80038d2:	2100      	movs	r1, #0
 80038d4:	4615      	mov	r5, r2
 80038d6:	f7ff ff9f 	bl	8003818 <_swiopen>
 80038da:	4604      	mov	r4, r0
 80038dc:	462a      	mov	r2, r5
 80038de:	2100      	movs	r1, #0
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 fbe9 	bl	80040b8 <memset>
 80038e6:	1c63      	adds	r3, r4, #1
 80038e8:	d014      	beq.n	8003914 <_get_semihosting_exts+0x4c>
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff fe54 	bl	8003598 <findslot>
 80038f0:	f04f 080c 	mov.w	r8, #12
 80038f4:	4681      	mov	r9, r0
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	beab      	bkpt	0x00ab
 80038fc:	4680      	mov	r8, r0
 80038fe:	4640      	mov	r0, r8
 8003900:	f7ff fe72 	bl	80035e8 <checkerror>
 8003904:	2803      	cmp	r0, #3
 8003906:	dd02      	ble.n	800390e <_get_semihosting_exts+0x46>
 8003908:	1ec3      	subs	r3, r0, #3
 800390a:	42ab      	cmp	r3, r5
 800390c:	dc07      	bgt.n	800391e <_get_semihosting_exts+0x56>
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff ff14 	bl	800373c <_close>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	b003      	add	sp, #12
 800391a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800391e:	2204      	movs	r2, #4
 8003920:	4620      	mov	r0, r4
 8003922:	eb0d 0102 	add.w	r1, sp, r2
 8003926:	f7ff fe74 	bl	8003612 <_read>
 800392a:	2803      	cmp	r0, #3
 800392c:	ddef      	ble.n	800390e <_get_semihosting_exts+0x46>
 800392e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003932:	2b53      	cmp	r3, #83	@ 0x53
 8003934:	d1eb      	bne.n	800390e <_get_semihosting_exts+0x46>
 8003936:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800393a:	2b48      	cmp	r3, #72	@ 0x48
 800393c:	d1e7      	bne.n	800390e <_get_semihosting_exts+0x46>
 800393e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003942:	2b46      	cmp	r3, #70	@ 0x46
 8003944:	d1e3      	bne.n	800390e <_get_semihosting_exts+0x46>
 8003946:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800394a:	2b42      	cmp	r3, #66	@ 0x42
 800394c:	d1df      	bne.n	800390e <_get_semihosting_exts+0x46>
 800394e:	2201      	movs	r2, #1
 8003950:	4639      	mov	r1, r7
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff fe77 	bl	8003646 <_swilseek>
 8003958:	2800      	cmp	r0, #0
 800395a:	dbd8      	blt.n	800390e <_get_semihosting_exts+0x46>
 800395c:	462a      	mov	r2, r5
 800395e:	4631      	mov	r1, r6
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff fe56 	bl	8003612 <_read>
 8003966:	4605      	mov	r5, r0
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff fee7 	bl	800373c <_close>
 800396e:	4628      	mov	r0, r5
 8003970:	f7ff fe3a 	bl	80035e8 <checkerror>
 8003974:	e7d0      	b.n	8003918 <_get_semihosting_exts+0x50>
 8003976:	bf00      	nop
 8003978:	08005190 	.word	0x08005190

0800397c <initialise_semihosting_exts>:
 800397c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800397e:	2100      	movs	r1, #0
 8003980:	2201      	movs	r2, #1
 8003982:	4d09      	ldr	r5, [pc, #36]	@ (80039a8 <initialise_semihosting_exts+0x2c>)
 8003984:	4c09      	ldr	r4, [pc, #36]	@ (80039ac <initialise_semihosting_exts+0x30>)
 8003986:	a801      	add	r0, sp, #4
 8003988:	6029      	str	r1, [r5, #0]
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	f7ff ff9c 	bl	80038c8 <_get_semihosting_exts>
 8003990:	2800      	cmp	r0, #0
 8003992:	dd07      	ble.n	80039a4 <initialise_semihosting_exts+0x28>
 8003994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003998:	f003 0201 	and.w	r2, r3, #1
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	602a      	str	r2, [r5, #0]
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	b003      	add	sp, #12
 80039a6:	bd30      	pop	{r4, r5, pc}
 80039a8:	20000028 	.word	0x20000028
 80039ac:	20000024 	.word	0x20000024

080039b0 <_has_ext_stdout_stderr>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4c04      	ldr	r4, [pc, #16]	@ (80039c4 <_has_ext_stdout_stderr+0x14>)
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da01      	bge.n	80039be <_has_ext_stdout_stderr+0xe>
 80039ba:	f7ff ffdf 	bl	800397c <initialise_semihosting_exts>
 80039be:	6820      	ldr	r0, [r4, #0]
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	bf00      	nop
 80039c4:	20000024 	.word	0x20000024

080039c8 <initialise_monitor_handles>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	2303      	movs	r3, #3
 80039ce:	2400      	movs	r4, #0
 80039d0:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8003a74 <initialise_monitor_handles+0xac>
 80039d4:	b085      	sub	sp, #20
 80039d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80039da:	af01      	add	r7, sp, #4
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	2501      	movs	r5, #1
 80039e0:	9402      	str	r4, [sp, #8]
 80039e2:	4628      	mov	r0, r5
 80039e4:	4639      	mov	r1, r7
 80039e6:	beab      	bkpt	0x00ab
 80039e8:	4605      	mov	r5, r0
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003a78 <initialise_monitor_handles+0xb0>
 80039f2:	4623      	mov	r3, r4
 80039f4:	4c21      	ldr	r4, [pc, #132]	@ (8003a7c <initialise_monitor_handles+0xb4>)
 80039f6:	f8c8 5000 	str.w	r5, [r8]
 80039fa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80039fe:	3301      	adds	r3, #1
 8003a00:	2b14      	cmp	r3, #20
 8003a02:	d1fa      	bne.n	80039fa <initialise_monitor_handles+0x32>
 8003a04:	f7ff ffd4 	bl	80039b0 <_has_ext_stdout_stderr>
 8003a08:	4d1d      	ldr	r5, [pc, #116]	@ (8003a80 <initialise_monitor_handles+0xb8>)
 8003a0a:	b1d0      	cbz	r0, 8003a42 <initialise_monitor_handles+0x7a>
 8003a0c:	f04f 0a03 	mov.w	sl, #3
 8003a10:	2304      	movs	r3, #4
 8003a12:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a16:	2601      	movs	r6, #1
 8003a18:	f8cd a00c 	str.w	sl, [sp, #12]
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4639      	mov	r1, r7
 8003a22:	beab      	bkpt	0x00ab
 8003a24:	4683      	mov	fp, r0
 8003a26:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <initialise_monitor_handles+0xbc>)
 8003a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a2c:	f8c3 b000 	str.w	fp, [r3]
 8003a30:	2308      	movs	r3, #8
 8003a32:	f8cd a00c 	str.w	sl, [sp, #12]
 8003a36:	9302      	str	r3, [sp, #8]
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	beab      	bkpt	0x00ab
 8003a3e:	4606      	mov	r6, r0
 8003a40:	602e      	str	r6, [r5, #0]
 8003a42:	2600      	movs	r6, #0
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	6066      	str	r6, [r4, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	bf02      	ittt	eq
 8003a4c:	4b0d      	ldreq	r3, [pc, #52]	@ (8003a84 <initialise_monitor_handles+0xbc>)
 8003a4e:	681b      	ldreq	r3, [r3, #0]
 8003a50:	602b      	streq	r3, [r5, #0]
 8003a52:	f8d8 3000 	ldr.w	r3, [r8]
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	f7ff ffaa 	bl	80039b0 <_has_ext_stdout_stderr>
 8003a5c:	b130      	cbz	r0, 8003a6c <initialise_monitor_handles+0xa4>
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <initialise_monitor_handles+0xbc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003a66:	682b      	ldr	r3, [r5, #0]
 8003a68:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003a6c:	b005      	add	sp, #20
 8003a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	080051a6 	.word	0x080051a6
 8003a78:	200001f8 	.word	0x200001f8
 8003a7c:	200001fc 	.word	0x200001fc
 8003a80:	200001f0 	.word	0x200001f0
 8003a84:	200001f4 	.word	0x200001f4

08003a88 <_isatty>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	f7ff fd85 	bl	8003598 <findslot>
 8003a8e:	2409      	movs	r4, #9
 8003a90:	4605      	mov	r5, r0
 8003a92:	b920      	cbnz	r0, 8003a9e <_isatty+0x16>
 8003a94:	f000 fb5e 	bl	8004154 <__errno>
 8003a98:	6004      	str	r4, [r0, #0]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	beab      	bkpt	0x00ab
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	2c01      	cmp	r4, #1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	d0f7      	beq.n	8003a9c <_isatty+0x14>
 8003aac:	f000 fb52 	bl	8004154 <__errno>
 8003ab0:	2513      	movs	r5, #19
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	4631      	mov	r1, r6
 8003aba:	beab      	bkpt	0x00ab
 8003abc:	4605      	mov	r5, r0
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	e7eb      	b.n	8003a9a <_isatty+0x12>
	...

08003ac4 <__sflush_r>:
 8003ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	0716      	lsls	r6, r2, #28
 8003acc:	4605      	mov	r5, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	d454      	bmi.n	8003b7c <__sflush_r+0xb8>
 8003ad2:	684b      	ldr	r3, [r1, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dc02      	bgt.n	8003ade <__sflush_r+0x1a>
 8003ad8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dd48      	ble.n	8003b70 <__sflush_r+0xac>
 8003ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	d045      	beq.n	8003b70 <__sflush_r+0xac>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003aea:	682f      	ldr	r7, [r5, #0]
 8003aec:	6a21      	ldr	r1, [r4, #32]
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	d030      	beq.n	8003b54 <__sflush_r+0x90>
 8003af2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	0759      	lsls	r1, r3, #29
 8003af8:	d505      	bpl.n	8003b06 <__sflush_r+0x42>
 8003afa:	6863      	ldr	r3, [r4, #4]
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b00:	b10b      	cbz	r3, 8003b06 <__sflush_r+0x42>
 8003b02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	4628      	mov	r0, r5
 8003b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b0c:	6a21      	ldr	r1, [r4, #32]
 8003b0e:	47b0      	blx	r6
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	d106      	bne.n	8003b24 <__sflush_r+0x60>
 8003b16:	6829      	ldr	r1, [r5, #0]
 8003b18:	291d      	cmp	r1, #29
 8003b1a:	d82b      	bhi.n	8003b74 <__sflush_r+0xb0>
 8003b1c:	4a28      	ldr	r2, [pc, #160]	@ (8003bc0 <__sflush_r+0xfc>)
 8003b1e:	410a      	asrs	r2, r1
 8003b20:	07d6      	lsls	r6, r2, #31
 8003b22:	d427      	bmi.n	8003b74 <__sflush_r+0xb0>
 8003b24:	2200      	movs	r2, #0
 8003b26:	6062      	str	r2, [r4, #4]
 8003b28:	6922      	ldr	r2, [r4, #16]
 8003b2a:	04d9      	lsls	r1, r3, #19
 8003b2c:	6022      	str	r2, [r4, #0]
 8003b2e:	d504      	bpl.n	8003b3a <__sflush_r+0x76>
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	d101      	bne.n	8003b38 <__sflush_r+0x74>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b903      	cbnz	r3, 8003b3a <__sflush_r+0x76>
 8003b38:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b3c:	602f      	str	r7, [r5, #0]
 8003b3e:	b1b9      	cbz	r1, 8003b70 <__sflush_r+0xac>
 8003b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b44:	4299      	cmp	r1, r3
 8003b46:	d002      	beq.n	8003b4e <__sflush_r+0x8a>
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 fb31 	bl	80041b0 <_free_r>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b52:	e00d      	b.n	8003b70 <__sflush_r+0xac>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4628      	mov	r0, r5
 8003b58:	47b0      	blx	r6
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	1c50      	adds	r0, r2, #1
 8003b5e:	d1c9      	bne.n	8003af4 <__sflush_r+0x30>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0c6      	beq.n	8003af4 <__sflush_r+0x30>
 8003b66:	2b1d      	cmp	r3, #29
 8003b68:	d001      	beq.n	8003b6e <__sflush_r+0xaa>
 8003b6a:	2b16      	cmp	r3, #22
 8003b6c:	d11d      	bne.n	8003baa <__sflush_r+0xe6>
 8003b6e:	602f      	str	r7, [r5, #0]
 8003b70:	2000      	movs	r0, #0
 8003b72:	e021      	b.n	8003bb8 <__sflush_r+0xf4>
 8003b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b78:	b21b      	sxth	r3, r3
 8003b7a:	e01a      	b.n	8003bb2 <__sflush_r+0xee>
 8003b7c:	690f      	ldr	r7, [r1, #16]
 8003b7e:	2f00      	cmp	r7, #0
 8003b80:	d0f6      	beq.n	8003b70 <__sflush_r+0xac>
 8003b82:	0793      	lsls	r3, r2, #30
 8003b84:	bf18      	it	ne
 8003b86:	2300      	movne	r3, #0
 8003b88:	680e      	ldr	r6, [r1, #0]
 8003b8a:	bf08      	it	eq
 8003b8c:	694b      	ldreq	r3, [r1, #20]
 8003b8e:	1bf6      	subs	r6, r6, r7
 8003b90:	600f      	str	r7, [r1, #0]
 8003b92:	608b      	str	r3, [r1, #8]
 8003b94:	2e00      	cmp	r6, #0
 8003b96:	ddeb      	ble.n	8003b70 <__sflush_r+0xac>
 8003b98:	4633      	mov	r3, r6
 8003b9a:	463a      	mov	r2, r7
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	6a21      	ldr	r1, [r4, #32]
 8003ba0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ba4:	47e0      	blx	ip
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	dc07      	bgt.n	8003bba <__sflush_r+0xf6>
 8003baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bba:	4407      	add	r7, r0
 8003bbc:	1a36      	subs	r6, r6, r0
 8003bbe:	e7e9      	b.n	8003b94 <__sflush_r+0xd0>
 8003bc0:	dfbffffe 	.word	0xdfbffffe

08003bc4 <_fflush_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	690b      	ldr	r3, [r1, #16]
 8003bc8:	4605      	mov	r5, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	b913      	cbnz	r3, 8003bd4 <_fflush_r+0x10>
 8003bce:	2500      	movs	r5, #0
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	b118      	cbz	r0, 8003bde <_fflush_r+0x1a>
 8003bd6:	6a03      	ldr	r3, [r0, #32]
 8003bd8:	b90b      	cbnz	r3, 8003bde <_fflush_r+0x1a>
 8003bda:	f000 f8bb 	bl	8003d54 <__sinit>
 8003bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f3      	beq.n	8003bce <_fflush_r+0xa>
 8003be6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003be8:	07d0      	lsls	r0, r2, #31
 8003bea:	d404      	bmi.n	8003bf6 <_fflush_r+0x32>
 8003bec:	0599      	lsls	r1, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <_fflush_r+0x32>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bf2:	f000 fada 	bl	80041aa <__retarget_lock_acquire_recursive>
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7ff ff63 	bl	8003ac4 <__sflush_r>
 8003bfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c00:	4605      	mov	r5, r0
 8003c02:	07da      	lsls	r2, r3, #31
 8003c04:	d4e4      	bmi.n	8003bd0 <_fflush_r+0xc>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	059b      	lsls	r3, r3, #22
 8003c0a:	d4e1      	bmi.n	8003bd0 <_fflush_r+0xc>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0e:	f000 facd 	bl	80041ac <__retarget_lock_release_recursive>
 8003c12:	e7dd      	b.n	8003bd0 <_fflush_r+0xc>

08003c14 <fflush>:
 8003c14:	4601      	mov	r1, r0
 8003c16:	b920      	cbnz	r0, 8003c22 <fflush+0xe>
 8003c18:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <fflush+0x18>)
 8003c1a:	4905      	ldr	r1, [pc, #20]	@ (8003c30 <fflush+0x1c>)
 8003c1c:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <fflush+0x20>)
 8003c1e:	f000 b8b1 	b.w	8003d84 <_fwalk_sglue>
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <fflush+0x24>)
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f7ff bfcd 	b.w	8003bc4 <_fflush_r>
 8003c2a:	bf00      	nop
 8003c2c:	2000002c 	.word	0x2000002c
 8003c30:	08003bc5 	.word	0x08003bc5
 8003c34:	2000003c 	.word	0x2000003c
 8003c38:	20000038 	.word	0x20000038

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	@ 0x5c
 8003c5a:	f000 fa2d 	bl	80040b8 <memset>
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <std+0x58>)
 8003c60:	6224      	str	r4, [r4, #32]
 8003c62:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <std+0x5c>)
 8003c66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <std+0x60>)
 8003c6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <std+0x64>)
 8003c6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <std+0x68>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d006      	beq.n	8003c84 <std+0x48>
 8003c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c7a:	4294      	cmp	r4, r2
 8003c7c:	d002      	beq.n	8003c84 <std+0x48>
 8003c7e:	33d0      	adds	r3, #208	@ 0xd0
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d105      	bne.n	8003c90 <std+0x54>
 8003c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f000 ba8c 	b.w	80041a8 <__retarget_lock_init_recursive>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	08003f09 	.word	0x08003f09
 8003c98:	08003f2b 	.word	0x08003f2b
 8003c9c:	08003f63 	.word	0x08003f63
 8003ca0:	08003f87 	.word	0x08003f87
 8003ca4:	2000029c 	.word	0x2000029c

08003ca8 <stdio_exit_handler>:
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <stdio_exit_handler+0xc>)
 8003caa:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <stdio_exit_handler+0x10>)
 8003cac:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <stdio_exit_handler+0x14>)
 8003cae:	f000 b869 	b.w	8003d84 <_fwalk_sglue>
 8003cb2:	bf00      	nop
 8003cb4:	2000002c 	.word	0x2000002c
 8003cb8:	08003bc5 	.word	0x08003bc5
 8003cbc:	2000003c 	.word	0x2000003c

08003cc0 <cleanup_stdio>:
 8003cc0:	6841      	ldr	r1, [r0, #4]
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <cleanup_stdio+0x34>)
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d001      	beq.n	8003cd0 <cleanup_stdio+0x10>
 8003ccc:	f7ff ff7a 	bl	8003bc4 <_fflush_r>
 8003cd0:	68a1      	ldr	r1, [r4, #8]
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <cleanup_stdio+0x38>)
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <cleanup_stdio+0x1e>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff ff73 	bl	8003bc4 <_fflush_r>
 8003cde:	68e1      	ldr	r1, [r4, #12]
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <cleanup_stdio+0x3c>)
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d004      	beq.n	8003cf0 <cleanup_stdio+0x30>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f7ff bf6a 	b.w	8003bc4 <_fflush_r>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000029c 	.word	0x2000029c
 8003cf8:	20000304 	.word	0x20000304
 8003cfc:	2000036c 	.word	0x2000036c

08003d00 <global_stdio_init.part.0>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <global_stdio_init.part.0+0x30>)
 8003d04:	4c0b      	ldr	r4, [pc, #44]	@ (8003d34 <global_stdio_init.part.0+0x34>)
 8003d06:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <global_stdio_init.part.0+0x38>)
 8003d08:	4620      	mov	r0, r4
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f7ff ff94 	bl	8003c3c <std>
 8003d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2109      	movs	r1, #9
 8003d1c:	f7ff ff8e 	bl	8003c3c <std>
 8003d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d24:	2202      	movs	r2, #2
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2a:	2112      	movs	r1, #18
 8003d2c:	f7ff bf86 	b.w	8003c3c <std>
 8003d30:	200003d4 	.word	0x200003d4
 8003d34:	2000029c 	.word	0x2000029c
 8003d38:	08003ca9 	.word	0x08003ca9

08003d3c <__sfp_lock_acquire>:
 8003d3c:	4801      	ldr	r0, [pc, #4]	@ (8003d44 <__sfp_lock_acquire+0x8>)
 8003d3e:	f000 ba34 	b.w	80041aa <__retarget_lock_acquire_recursive>
 8003d42:	bf00      	nop
 8003d44:	200003dd 	.word	0x200003dd

08003d48 <__sfp_lock_release>:
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <__sfp_lock_release+0x8>)
 8003d4a:	f000 ba2f 	b.w	80041ac <__retarget_lock_release_recursive>
 8003d4e:	bf00      	nop
 8003d50:	200003dd 	.word	0x200003dd

08003d54 <__sinit>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	f7ff fff0 	bl	8003d3c <__sfp_lock_acquire>
 8003d5c:	6a23      	ldr	r3, [r4, #32]
 8003d5e:	b11b      	cbz	r3, 8003d68 <__sinit+0x14>
 8003d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d64:	f7ff bff0 	b.w	8003d48 <__sfp_lock_release>
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__sinit+0x28>)
 8003d6a:	6223      	str	r3, [r4, #32]
 8003d6c:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <__sinit+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f5      	bne.n	8003d60 <__sinit+0xc>
 8003d74:	f7ff ffc4 	bl	8003d00 <global_stdio_init.part.0>
 8003d78:	e7f2      	b.n	8003d60 <__sinit+0xc>
 8003d7a:	bf00      	nop
 8003d7c:	08003cc1 	.word	0x08003cc1
 8003d80:	200003d4 	.word	0x200003d4

08003d84 <_fwalk_sglue>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4688      	mov	r8, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d94:	f1b9 0901 	subs.w	r9, r9, #1
 8003d98:	d505      	bpl.n	8003da6 <_fwalk_sglue+0x22>
 8003d9a:	6824      	ldr	r4, [r4, #0]
 8003d9c:	2c00      	cmp	r4, #0
 8003d9e:	d1f7      	bne.n	8003d90 <_fwalk_sglue+0xc>
 8003da0:	4630      	mov	r0, r6
 8003da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d907      	bls.n	8003dbc <_fwalk_sglue+0x38>
 8003dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d003      	beq.n	8003dbc <_fwalk_sglue+0x38>
 8003db4:	4629      	mov	r1, r5
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	4306      	orrs	r6, r0
 8003dbc:	3568      	adds	r5, #104	@ 0x68
 8003dbe:	e7e9      	b.n	8003d94 <_fwalk_sglue+0x10>

08003dc0 <iprintf>:
 8003dc0:	b40f      	push	{r0, r1, r2, r3}
 8003dc2:	b507      	push	{r0, r1, r2, lr}
 8003dc4:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <iprintf+0x20>)
 8003dc6:	ab04      	add	r3, sp, #16
 8003dc8:	6808      	ldr	r0, [r1, #0]
 8003dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dce:	6881      	ldr	r1, [r0, #8]
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	f000 fc63 	bl	800469c <_vfiprintf_r>
 8003dd6:	b003      	add	sp, #12
 8003dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ddc:	b004      	add	sp, #16
 8003dde:	4770      	bx	lr
 8003de0:	20000038 	.word	0x20000038

08003de4 <_puts_r>:
 8003de4:	6a03      	ldr	r3, [r0, #32]
 8003de6:	b570      	push	{r4, r5, r6, lr}
 8003de8:	4605      	mov	r5, r0
 8003dea:	460e      	mov	r6, r1
 8003dec:	6884      	ldr	r4, [r0, #8]
 8003dee:	b90b      	cbnz	r3, 8003df4 <_puts_r+0x10>
 8003df0:	f7ff ffb0 	bl	8003d54 <__sinit>
 8003df4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	d405      	bmi.n	8003e06 <_puts_r+0x22>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	0598      	lsls	r0, r3, #22
 8003dfe:	d402      	bmi.n	8003e06 <_puts_r+0x22>
 8003e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e02:	f000 f9d2 	bl	80041aa <__retarget_lock_acquire_recursive>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	0719      	lsls	r1, r3, #28
 8003e0a:	d502      	bpl.n	8003e12 <_puts_r+0x2e>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d135      	bne.n	8003e7e <_puts_r+0x9a>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 f8f9 	bl	800400c <__swsetup_r>
 8003e1a:	b380      	cbz	r0, 8003e7e <_puts_r+0x9a>
 8003e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e22:	07da      	lsls	r2, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_puts_r+0x4e>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_puts_r+0x4e>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e2e:	f000 f9bd 	bl	80041ac <__retarget_lock_release_recursive>
 8003e32:	4628      	mov	r0, r5
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da04      	bge.n	8003e44 <_puts_r+0x60>
 8003e3a:	69a2      	ldr	r2, [r4, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dc17      	bgt.n	8003e70 <_puts_r+0x8c>
 8003e40:	290a      	cmp	r1, #10
 8003e42:	d015      	beq.n	8003e70 <_puts_r+0x8c>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	6022      	str	r2, [r4, #0]
 8003e4a:	7019      	strb	r1, [r3, #0]
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e52:	3b01      	subs	r3, #1
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	2900      	cmp	r1, #0
 8003e58:	d1ed      	bne.n	8003e36 <_puts_r+0x52>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da11      	bge.n	8003e82 <_puts_r+0x9e>
 8003e5e:	4622      	mov	r2, r4
 8003e60:	210a      	movs	r1, #10
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f893 	bl	8003f8e <__swbuf_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d0d7      	beq.n	8003e1c <_puts_r+0x38>
 8003e6c:	250a      	movs	r5, #10
 8003e6e:	e7d7      	b.n	8003e20 <_puts_r+0x3c>
 8003e70:	4622      	mov	r2, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f88b 	bl	8003f8e <__swbuf_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d1e7      	bne.n	8003e4c <_puts_r+0x68>
 8003e7c:	e7ce      	b.n	8003e1c <_puts_r+0x38>
 8003e7e:	3e01      	subs	r6, #1
 8003e80:	e7e4      	b.n	8003e4c <_puts_r+0x68>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	220a      	movs	r2, #10
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e7ee      	b.n	8003e6c <_puts_r+0x88>
	...

08003e90 <puts>:
 8003e90:	4b02      	ldr	r3, [pc, #8]	@ (8003e9c <puts+0xc>)
 8003e92:	4601      	mov	r1, r0
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f7ff bfa5 	b.w	8003de4 <_puts_r>
 8003e9a:	bf00      	nop
 8003e9c:	20000038 	.word	0x20000038

08003ea0 <sniprintf>:
 8003ea0:	b40c      	push	{r2, r3}
 8003ea2:	b530      	push	{r4, r5, lr}
 8003ea4:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <sniprintf+0x64>)
 8003ea6:	1e0c      	subs	r4, r1, #0
 8003ea8:	681d      	ldr	r5, [r3, #0]
 8003eaa:	b09d      	sub	sp, #116	@ 0x74
 8003eac:	da08      	bge.n	8003ec0 <sniprintf+0x20>
 8003eae:	238b      	movs	r3, #139	@ 0x8b
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	b01d      	add	sp, #116	@ 0x74
 8003eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ebc:	b002      	add	sp, #8
 8003ebe:	4770      	bx	lr
 8003ec0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ec4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ec8:	bf0c      	ite	eq
 8003eca:	4623      	moveq	r3, r4
 8003ecc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	9307      	str	r3, [sp, #28]
 8003ed4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ed8:	9002      	str	r0, [sp, #8]
 8003eda:	9006      	str	r0, [sp, #24]
 8003edc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	ab21      	add	r3, sp, #132	@ 0x84
 8003ee4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ee6:	a902      	add	r1, sp, #8
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	f000 fab3 	bl	8004454 <_svfiprintf_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	bfbc      	itt	lt
 8003ef2:	238b      	movlt	r3, #139	@ 0x8b
 8003ef4:	602b      	strlt	r3, [r5, #0]
 8003ef6:	2c00      	cmp	r4, #0
 8003ef8:	d0dd      	beq.n	8003eb6 <sniprintf+0x16>
 8003efa:	2200      	movs	r2, #0
 8003efc:	9b02      	ldr	r3, [sp, #8]
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e7d9      	b.n	8003eb6 <sniprintf+0x16>
 8003f02:	bf00      	nop
 8003f04:	20000038 	.word	0x20000038

08003f08 <__sread>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f10:	f000 f8fc 	bl	800410c <_read_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	bfab      	itete	ge
 8003f18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f1c:	181b      	addge	r3, r3, r0
 8003f1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f22:	bfac      	ite	ge
 8003f24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f26:	81a3      	strhlt	r3, [r4, #12]
 8003f28:	bd10      	pop	{r4, pc}

08003f2a <__swrite>:
 8003f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2e:	461f      	mov	r7, r3
 8003f30:	898b      	ldrh	r3, [r1, #12]
 8003f32:	4605      	mov	r5, r0
 8003f34:	05db      	lsls	r3, r3, #23
 8003f36:	460c      	mov	r4, r1
 8003f38:	4616      	mov	r6, r2
 8003f3a:	d505      	bpl.n	8003f48 <__swrite+0x1e>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	f000 f8d0 	bl	80040e8 <_lseek_r>
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	4628      	mov	r0, r5
 8003f54:	463b      	mov	r3, r7
 8003f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	f000 b8e7 	b.w	8004130 <_write_r>

08003f62 <__sseek>:
 8003f62:	b510      	push	{r4, lr}
 8003f64:	460c      	mov	r4, r1
 8003f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6a:	f000 f8bd 	bl	80040e8 <_lseek_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	bf15      	itete	ne
 8003f74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f7e:	81a3      	strheq	r3, [r4, #12]
 8003f80:	bf18      	it	ne
 8003f82:	81a3      	strhne	r3, [r4, #12]
 8003f84:	bd10      	pop	{r4, pc}

08003f86 <__sclose>:
 8003f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8a:	f000 b89d 	b.w	80040c8 <_close_r>

08003f8e <__swbuf_r>:
 8003f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f90:	460e      	mov	r6, r1
 8003f92:	4614      	mov	r4, r2
 8003f94:	4605      	mov	r5, r0
 8003f96:	b118      	cbz	r0, 8003fa0 <__swbuf_r+0x12>
 8003f98:	6a03      	ldr	r3, [r0, #32]
 8003f9a:	b90b      	cbnz	r3, 8003fa0 <__swbuf_r+0x12>
 8003f9c:	f7ff feda 	bl	8003d54 <__sinit>
 8003fa0:	69a3      	ldr	r3, [r4, #24]
 8003fa2:	60a3      	str	r3, [r4, #8]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	071a      	lsls	r2, r3, #28
 8003fa8:	d501      	bpl.n	8003fae <__swbuf_r+0x20>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	b943      	cbnz	r3, 8003fc0 <__swbuf_r+0x32>
 8003fae:	4621      	mov	r1, r4
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f000 f82b 	bl	800400c <__swsetup_r>
 8003fb6:	b118      	cbz	r0, 8003fc0 <__swbuf_r+0x32>
 8003fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	6922      	ldr	r2, [r4, #16]
 8003fc4:	b2f6      	uxtb	r6, r6
 8003fc6:	1a98      	subs	r0, r3, r2
 8003fc8:	6963      	ldr	r3, [r4, #20]
 8003fca:	4637      	mov	r7, r6
 8003fcc:	4283      	cmp	r3, r0
 8003fce:	dc05      	bgt.n	8003fdc <__swbuf_r+0x4e>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7ff fdf6 	bl	8003bc4 <_fflush_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1ed      	bne.n	8003fb8 <__swbuf_r+0x2a>
 8003fdc:	68a3      	ldr	r3, [r4, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	6022      	str	r2, [r4, #0]
 8003fe8:	701e      	strb	r6, [r3, #0]
 8003fea:	6962      	ldr	r2, [r4, #20]
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d004      	beq.n	8003ffc <__swbuf_r+0x6e>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	07db      	lsls	r3, r3, #31
 8003ff6:	d5e1      	bpl.n	8003fbc <__swbuf_r+0x2e>
 8003ff8:	2e0a      	cmp	r6, #10
 8003ffa:	d1df      	bne.n	8003fbc <__swbuf_r+0x2e>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7ff fde0 	bl	8003bc4 <_fflush_r>
 8004004:	2800      	cmp	r0, #0
 8004006:	d0d9      	beq.n	8003fbc <__swbuf_r+0x2e>
 8004008:	e7d6      	b.n	8003fb8 <__swbuf_r+0x2a>
	...

0800400c <__swsetup_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <__swsetup_r+0xa8>)
 8004010:	4605      	mov	r5, r0
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	460c      	mov	r4, r1
 8004016:	b118      	cbz	r0, 8004020 <__swsetup_r+0x14>
 8004018:	6a03      	ldr	r3, [r0, #32]
 800401a:	b90b      	cbnz	r3, 8004020 <__swsetup_r+0x14>
 800401c:	f7ff fe9a 	bl	8003d54 <__sinit>
 8004020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004024:	0719      	lsls	r1, r3, #28
 8004026:	d422      	bmi.n	800406e <__swsetup_r+0x62>
 8004028:	06da      	lsls	r2, r3, #27
 800402a:	d407      	bmi.n	800403c <__swsetup_r+0x30>
 800402c:	2209      	movs	r2, #9
 800402e:	602a      	str	r2, [r5, #0]
 8004030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	81a3      	strh	r3, [r4, #12]
 800403a:	e033      	b.n	80040a4 <__swsetup_r+0x98>
 800403c:	0758      	lsls	r0, r3, #29
 800403e:	d512      	bpl.n	8004066 <__swsetup_r+0x5a>
 8004040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004042:	b141      	cbz	r1, 8004056 <__swsetup_r+0x4a>
 8004044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004048:	4299      	cmp	r1, r3
 800404a:	d002      	beq.n	8004052 <__swsetup_r+0x46>
 800404c:	4628      	mov	r0, r5
 800404e:	f000 f8af 	bl	80041b0 <_free_r>
 8004052:	2300      	movs	r3, #0
 8004054:	6363      	str	r3, [r4, #52]	@ 0x34
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	2300      	movs	r3, #0
 8004060:	6063      	str	r3, [r4, #4]
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	b94b      	cbnz	r3, 8004086 <__swsetup_r+0x7a>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407c:	d003      	beq.n	8004086 <__swsetup_r+0x7a>
 800407e:	4621      	mov	r1, r4
 8004080:	4628      	mov	r0, r5
 8004082:	f000 fdda 	bl	8004c3a <__smakebuf_r>
 8004086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800408a:	f013 0201 	ands.w	r2, r3, #1
 800408e:	d00a      	beq.n	80040a6 <__swsetup_r+0x9a>
 8004090:	2200      	movs	r2, #0
 8004092:	60a2      	str	r2, [r4, #8]
 8004094:	6962      	ldr	r2, [r4, #20]
 8004096:	4252      	negs	r2, r2
 8004098:	61a2      	str	r2, [r4, #24]
 800409a:	6922      	ldr	r2, [r4, #16]
 800409c:	b942      	cbnz	r2, 80040b0 <__swsetup_r+0xa4>
 800409e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040a2:	d1c5      	bne.n	8004030 <__swsetup_r+0x24>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	0799      	lsls	r1, r3, #30
 80040a8:	bf58      	it	pl
 80040aa:	6962      	ldrpl	r2, [r4, #20]
 80040ac:	60a2      	str	r2, [r4, #8]
 80040ae:	e7f4      	b.n	800409a <__swsetup_r+0x8e>
 80040b0:	2000      	movs	r0, #0
 80040b2:	e7f7      	b.n	80040a4 <__swsetup_r+0x98>
 80040b4:	20000038 	.word	0x20000038

080040b8 <memset>:
 80040b8:	4603      	mov	r3, r0
 80040ba:	4402      	add	r2, r0
 80040bc:	4293      	cmp	r3, r2
 80040be:	d100      	bne.n	80040c2 <memset+0xa>
 80040c0:	4770      	bx	lr
 80040c2:	f803 1b01 	strb.w	r1, [r3], #1
 80040c6:	e7f9      	b.n	80040bc <memset+0x4>

080040c8 <_close_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	2300      	movs	r3, #0
 80040cc:	4d05      	ldr	r5, [pc, #20]	@ (80040e4 <_close_r+0x1c>)
 80040ce:	4604      	mov	r4, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	f7ff fb32 	bl	800373c <_close>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_close_r+0x1a>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_close_r+0x1a>
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	200003d8 	.word	0x200003d8

080040e8 <_lseek_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	4d05      	ldr	r5, [pc, #20]	@ (8004108 <_lseek_r+0x20>)
 80040f4:	602a      	str	r2, [r5, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7ff fae1 	bl	80036be <_lseek>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_lseek_r+0x1e>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_lseek_r+0x1e>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	200003d8 	.word	0x200003d8

0800410c <_read_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	2200      	movs	r2, #0
 8004116:	4d05      	ldr	r5, [pc, #20]	@ (800412c <_read_r+0x20>)
 8004118:	602a      	str	r2, [r5, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	f7ff fa79 	bl	8003612 <_read>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d102      	bne.n	800412a <_read_r+0x1e>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	b103      	cbz	r3, 800412a <_read_r+0x1e>
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	bd38      	pop	{r3, r4, r5, pc}
 800412c:	200003d8 	.word	0x200003d8

08004130 <_write_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4604      	mov	r4, r0
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	2200      	movs	r2, #0
 800413a:	4d05      	ldr	r5, [pc, #20]	@ (8004150 <_write_r+0x20>)
 800413c:	602a      	str	r2, [r5, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f7ff facf 	bl	80036e2 <_write>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d102      	bne.n	800414e <_write_r+0x1e>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	b103      	cbz	r3, 800414e <_write_r+0x1e>
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	200003d8 	.word	0x200003d8

08004154 <__errno>:
 8004154:	4b01      	ldr	r3, [pc, #4]	@ (800415c <__errno+0x8>)
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000038 	.word	0x20000038

08004160 <__libc_init_array>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	2600      	movs	r6, #0
 8004164:	4d0c      	ldr	r5, [pc, #48]	@ (8004198 <__libc_init_array+0x38>)
 8004166:	4c0d      	ldr	r4, [pc, #52]	@ (800419c <__libc_init_array+0x3c>)
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	42a6      	cmp	r6, r4
 800416e:	d109      	bne.n	8004184 <__libc_init_array+0x24>
 8004170:	f000 fe3e 	bl	8004df0 <_init>
 8004174:	2600      	movs	r6, #0
 8004176:	4d0a      	ldr	r5, [pc, #40]	@ (80041a0 <__libc_init_array+0x40>)
 8004178:	4c0a      	ldr	r4, [pc, #40]	@ (80041a4 <__libc_init_array+0x44>)
 800417a:	1b64      	subs	r4, r4, r5
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	42a6      	cmp	r6, r4
 8004180:	d105      	bne.n	800418e <__libc_init_array+0x2e>
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	f855 3b04 	ldr.w	r3, [r5], #4
 8004188:	4798      	blx	r3
 800418a:	3601      	adds	r6, #1
 800418c:	e7ee      	b.n	800416c <__libc_init_array+0xc>
 800418e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004192:	4798      	blx	r3
 8004194:	3601      	adds	r6, #1
 8004196:	e7f2      	b.n	800417e <__libc_init_array+0x1e>
 8004198:	080051e8 	.word	0x080051e8
 800419c:	080051e8 	.word	0x080051e8
 80041a0:	080051e8 	.word	0x080051e8
 80041a4:	080051ec 	.word	0x080051ec

080041a8 <__retarget_lock_init_recursive>:
 80041a8:	4770      	bx	lr

080041aa <__retarget_lock_acquire_recursive>:
 80041aa:	4770      	bx	lr

080041ac <__retarget_lock_release_recursive>:
 80041ac:	4770      	bx	lr
	...

080041b0 <_free_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4605      	mov	r5, r0
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d040      	beq.n	800423a <_free_r+0x8a>
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f0c      	subs	r4, r1, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfb8      	it	lt
 80041c2:	18e4      	addlt	r4, r4, r3
 80041c4:	f000 f8de 	bl	8004384 <__malloc_lock>
 80041c8:	4a1c      	ldr	r2, [pc, #112]	@ (800423c <_free_r+0x8c>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	b933      	cbnz	r3, 80041dc <_free_r+0x2c>
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6014      	str	r4, [r2, #0]
 80041d2:	4628      	mov	r0, r5
 80041d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d8:	f000 b8da 	b.w	8004390 <__malloc_unlock>
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x42>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	1821      	adds	r1, r4, r0
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf01      	itttt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	1809      	addeq	r1, r1, r0
 80041ee:	6021      	streq	r1, [r4, #0]
 80041f0:	e7ed      	b.n	80041ce <_free_r+0x1e>
 80041f2:	461a      	mov	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b10b      	cbz	r3, 80041fc <_free_r+0x4c>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d9fa      	bls.n	80041f2 <_free_r+0x42>
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	1850      	adds	r0, r2, r1
 8004200:	42a0      	cmp	r0, r4
 8004202:	d10b      	bne.n	800421c <_free_r+0x6c>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	4401      	add	r1, r0
 8004208:	1850      	adds	r0, r2, r1
 800420a:	4283      	cmp	r3, r0
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	d1e0      	bne.n	80041d2 <_free_r+0x22>
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4408      	add	r0, r1
 8004216:	6010      	str	r0, [r2, #0]
 8004218:	6053      	str	r3, [r2, #4]
 800421a:	e7da      	b.n	80041d2 <_free_r+0x22>
 800421c:	d902      	bls.n	8004224 <_free_r+0x74>
 800421e:	230c      	movs	r3, #12
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	e7d6      	b.n	80041d2 <_free_r+0x22>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	1821      	adds	r1, r4, r0
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	6054      	str	r4, [r2, #4]
 8004238:	e7cb      	b.n	80041d2 <_free_r+0x22>
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	200003e4 	.word	0x200003e4

08004240 <sbrk_aligned>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4e0f      	ldr	r6, [pc, #60]	@ (8004280 <sbrk_aligned+0x40>)
 8004244:	460c      	mov	r4, r1
 8004246:	6831      	ldr	r1, [r6, #0]
 8004248:	4605      	mov	r5, r0
 800424a:	b911      	cbnz	r1, 8004252 <sbrk_aligned+0x12>
 800424c:	f000 fd6e 	bl	8004d2c <_sbrk_r>
 8004250:	6030      	str	r0, [r6, #0]
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	f000 fd69 	bl	8004d2c <_sbrk_r>
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	d103      	bne.n	8004266 <sbrk_aligned+0x26>
 800425e:	f04f 34ff 	mov.w	r4, #4294967295
 8004262:	4620      	mov	r0, r4
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	1cc4      	adds	r4, r0, #3
 8004268:	f024 0403 	bic.w	r4, r4, #3
 800426c:	42a0      	cmp	r0, r4
 800426e:	d0f8      	beq.n	8004262 <sbrk_aligned+0x22>
 8004270:	1a21      	subs	r1, r4, r0
 8004272:	4628      	mov	r0, r5
 8004274:	f000 fd5a 	bl	8004d2c <_sbrk_r>
 8004278:	3001      	adds	r0, #1
 800427a:	d1f2      	bne.n	8004262 <sbrk_aligned+0x22>
 800427c:	e7ef      	b.n	800425e <sbrk_aligned+0x1e>
 800427e:	bf00      	nop
 8004280:	200003e0 	.word	0x200003e0

08004284 <_malloc_r>:
 8004284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004288:	1ccd      	adds	r5, r1, #3
 800428a:	f025 0503 	bic.w	r5, r5, #3
 800428e:	3508      	adds	r5, #8
 8004290:	2d0c      	cmp	r5, #12
 8004292:	bf38      	it	cc
 8004294:	250c      	movcc	r5, #12
 8004296:	2d00      	cmp	r5, #0
 8004298:	4606      	mov	r6, r0
 800429a:	db01      	blt.n	80042a0 <_malloc_r+0x1c>
 800429c:	42a9      	cmp	r1, r5
 800429e:	d904      	bls.n	80042aa <_malloc_r+0x26>
 80042a0:	230c      	movs	r3, #12
 80042a2:	6033      	str	r3, [r6, #0]
 80042a4:	2000      	movs	r0, #0
 80042a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004380 <_malloc_r+0xfc>
 80042ae:	f000 f869 	bl	8004384 <__malloc_lock>
 80042b2:	f8d8 3000 	ldr.w	r3, [r8]
 80042b6:	461c      	mov	r4, r3
 80042b8:	bb44      	cbnz	r4, 800430c <_malloc_r+0x88>
 80042ba:	4629      	mov	r1, r5
 80042bc:	4630      	mov	r0, r6
 80042be:	f7ff ffbf 	bl	8004240 <sbrk_aligned>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	4604      	mov	r4, r0
 80042c6:	d158      	bne.n	800437a <_malloc_r+0xf6>
 80042c8:	f8d8 4000 	ldr.w	r4, [r8]
 80042cc:	4627      	mov	r7, r4
 80042ce:	2f00      	cmp	r7, #0
 80042d0:	d143      	bne.n	800435a <_malloc_r+0xd6>
 80042d2:	2c00      	cmp	r4, #0
 80042d4:	d04b      	beq.n	800436e <_malloc_r+0xea>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4639      	mov	r1, r7
 80042da:	4630      	mov	r0, r6
 80042dc:	eb04 0903 	add.w	r9, r4, r3
 80042e0:	f000 fd24 	bl	8004d2c <_sbrk_r>
 80042e4:	4581      	cmp	r9, r0
 80042e6:	d142      	bne.n	800436e <_malloc_r+0xea>
 80042e8:	6821      	ldr	r1, [r4, #0]
 80042ea:	4630      	mov	r0, r6
 80042ec:	1a6d      	subs	r5, r5, r1
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7ff ffa6 	bl	8004240 <sbrk_aligned>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d03a      	beq.n	800436e <_malloc_r+0xea>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	442b      	add	r3, r5
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	bb62      	cbnz	r2, 8004360 <_malloc_r+0xdc>
 8004306:	f8c8 7000 	str.w	r7, [r8]
 800430a:	e00f      	b.n	800432c <_malloc_r+0xa8>
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	1b52      	subs	r2, r2, r5
 8004310:	d420      	bmi.n	8004354 <_malloc_r+0xd0>
 8004312:	2a0b      	cmp	r2, #11
 8004314:	d917      	bls.n	8004346 <_malloc_r+0xc2>
 8004316:	1961      	adds	r1, r4, r5
 8004318:	42a3      	cmp	r3, r4
 800431a:	6025      	str	r5, [r4, #0]
 800431c:	bf18      	it	ne
 800431e:	6059      	strne	r1, [r3, #4]
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	bf08      	it	eq
 8004324:	f8c8 1000 	streq.w	r1, [r8]
 8004328:	5162      	str	r2, [r4, r5]
 800432a:	604b      	str	r3, [r1, #4]
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f82f 	bl	8004390 <__malloc_unlock>
 8004332:	f104 000b 	add.w	r0, r4, #11
 8004336:	1d23      	adds	r3, r4, #4
 8004338:	f020 0007 	bic.w	r0, r0, #7
 800433c:	1ac2      	subs	r2, r0, r3
 800433e:	bf1c      	itt	ne
 8004340:	1a1b      	subne	r3, r3, r0
 8004342:	50a3      	strne	r3, [r4, r2]
 8004344:	e7af      	b.n	80042a6 <_malloc_r+0x22>
 8004346:	6862      	ldr	r2, [r4, #4]
 8004348:	42a3      	cmp	r3, r4
 800434a:	bf0c      	ite	eq
 800434c:	f8c8 2000 	streq.w	r2, [r8]
 8004350:	605a      	strne	r2, [r3, #4]
 8004352:	e7eb      	b.n	800432c <_malloc_r+0xa8>
 8004354:	4623      	mov	r3, r4
 8004356:	6864      	ldr	r4, [r4, #4]
 8004358:	e7ae      	b.n	80042b8 <_malloc_r+0x34>
 800435a:	463c      	mov	r4, r7
 800435c:	687f      	ldr	r7, [r7, #4]
 800435e:	e7b6      	b.n	80042ce <_malloc_r+0x4a>
 8004360:	461a      	mov	r2, r3
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	42a3      	cmp	r3, r4
 8004366:	d1fb      	bne.n	8004360 <_malloc_r+0xdc>
 8004368:	2300      	movs	r3, #0
 800436a:	6053      	str	r3, [r2, #4]
 800436c:	e7de      	b.n	800432c <_malloc_r+0xa8>
 800436e:	230c      	movs	r3, #12
 8004370:	4630      	mov	r0, r6
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f000 f80c 	bl	8004390 <__malloc_unlock>
 8004378:	e794      	b.n	80042a4 <_malloc_r+0x20>
 800437a:	6005      	str	r5, [r0, #0]
 800437c:	e7d6      	b.n	800432c <_malloc_r+0xa8>
 800437e:	bf00      	nop
 8004380:	200003e4 	.word	0x200003e4

08004384 <__malloc_lock>:
 8004384:	4801      	ldr	r0, [pc, #4]	@ (800438c <__malloc_lock+0x8>)
 8004386:	f7ff bf10 	b.w	80041aa <__retarget_lock_acquire_recursive>
 800438a:	bf00      	nop
 800438c:	200003dc 	.word	0x200003dc

08004390 <__malloc_unlock>:
 8004390:	4801      	ldr	r0, [pc, #4]	@ (8004398 <__malloc_unlock+0x8>)
 8004392:	f7ff bf0b 	b.w	80041ac <__retarget_lock_release_recursive>
 8004396:	bf00      	nop
 8004398:	200003dc 	.word	0x200003dc

0800439c <__ssputs_r>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	461f      	mov	r7, r3
 80043a2:	688e      	ldr	r6, [r1, #8]
 80043a4:	4682      	mov	sl, r0
 80043a6:	42be      	cmp	r6, r7
 80043a8:	460c      	mov	r4, r1
 80043aa:	4690      	mov	r8, r2
 80043ac:	680b      	ldr	r3, [r1, #0]
 80043ae:	d82d      	bhi.n	800440c <__ssputs_r+0x70>
 80043b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043b8:	d026      	beq.n	8004408 <__ssputs_r+0x6c>
 80043ba:	6965      	ldr	r5, [r4, #20]
 80043bc:	6909      	ldr	r1, [r1, #16]
 80043be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043c2:	eba3 0901 	sub.w	r9, r3, r1
 80043c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043ca:	1c7b      	adds	r3, r7, #1
 80043cc:	444b      	add	r3, r9
 80043ce:	106d      	asrs	r5, r5, #1
 80043d0:	429d      	cmp	r5, r3
 80043d2:	bf38      	it	cc
 80043d4:	461d      	movcc	r5, r3
 80043d6:	0553      	lsls	r3, r2, #21
 80043d8:	d527      	bpl.n	800442a <__ssputs_r+0x8e>
 80043da:	4629      	mov	r1, r5
 80043dc:	f7ff ff52 	bl	8004284 <_malloc_r>
 80043e0:	4606      	mov	r6, r0
 80043e2:	b360      	cbz	r0, 800443e <__ssputs_r+0xa2>
 80043e4:	464a      	mov	r2, r9
 80043e6:	6921      	ldr	r1, [r4, #16]
 80043e8:	f000 fcbe 	bl	8004d68 <memcpy>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	6126      	str	r6, [r4, #16]
 80043fa:	444e      	add	r6, r9
 80043fc:	6026      	str	r6, [r4, #0]
 80043fe:	463e      	mov	r6, r7
 8004400:	6165      	str	r5, [r4, #20]
 8004402:	eba5 0509 	sub.w	r5, r5, r9
 8004406:	60a5      	str	r5, [r4, #8]
 8004408:	42be      	cmp	r6, r7
 800440a:	d900      	bls.n	800440e <__ssputs_r+0x72>
 800440c:	463e      	mov	r6, r7
 800440e:	4632      	mov	r2, r6
 8004410:	4641      	mov	r1, r8
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	f000 fc4d 	bl	8004cb2 <memmove>
 8004418:	2000      	movs	r0, #0
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	1b9b      	subs	r3, r3, r6
 800441e:	60a3      	str	r3, [r4, #8]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	4433      	add	r3, r6
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442a:	462a      	mov	r2, r5
 800442c:	f000 fcaa 	bl	8004d84 <_realloc_r>
 8004430:	4606      	mov	r6, r0
 8004432:	2800      	cmp	r0, #0
 8004434:	d1e0      	bne.n	80043f8 <__ssputs_r+0x5c>
 8004436:	4650      	mov	r0, sl
 8004438:	6921      	ldr	r1, [r4, #16]
 800443a:	f7ff feb9 	bl	80041b0 <_free_r>
 800443e:	230c      	movs	r3, #12
 8004440:	f8ca 3000 	str.w	r3, [sl]
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	e7e9      	b.n	8004426 <__ssputs_r+0x8a>
	...

08004454 <_svfiprintf_r>:
 8004454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	4698      	mov	r8, r3
 800445a:	898b      	ldrh	r3, [r1, #12]
 800445c:	4607      	mov	r7, r0
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	460d      	mov	r5, r1
 8004462:	4614      	mov	r4, r2
 8004464:	b09d      	sub	sp, #116	@ 0x74
 8004466:	d510      	bpl.n	800448a <_svfiprintf_r+0x36>
 8004468:	690b      	ldr	r3, [r1, #16]
 800446a:	b973      	cbnz	r3, 800448a <_svfiprintf_r+0x36>
 800446c:	2140      	movs	r1, #64	@ 0x40
 800446e:	f7ff ff09 	bl	8004284 <_malloc_r>
 8004472:	6028      	str	r0, [r5, #0]
 8004474:	6128      	str	r0, [r5, #16]
 8004476:	b930      	cbnz	r0, 8004486 <_svfiprintf_r+0x32>
 8004478:	230c      	movs	r3, #12
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	b01d      	add	sp, #116	@ 0x74
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	2340      	movs	r3, #64	@ 0x40
 8004488:	616b      	str	r3, [r5, #20]
 800448a:	2300      	movs	r3, #0
 800448c:	9309      	str	r3, [sp, #36]	@ 0x24
 800448e:	2320      	movs	r3, #32
 8004490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004494:	2330      	movs	r3, #48	@ 0x30
 8004496:	f04f 0901 	mov.w	r9, #1
 800449a:	f8cd 800c 	str.w	r8, [sp, #12]
 800449e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004638 <_svfiprintf_r+0x1e4>
 80044a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044a6:	4623      	mov	r3, r4
 80044a8:	469a      	mov	sl, r3
 80044aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ae:	b10a      	cbz	r2, 80044b4 <_svfiprintf_r+0x60>
 80044b0:	2a25      	cmp	r2, #37	@ 0x25
 80044b2:	d1f9      	bne.n	80044a8 <_svfiprintf_r+0x54>
 80044b4:	ebba 0b04 	subs.w	fp, sl, r4
 80044b8:	d00b      	beq.n	80044d2 <_svfiprintf_r+0x7e>
 80044ba:	465b      	mov	r3, fp
 80044bc:	4622      	mov	r2, r4
 80044be:	4629      	mov	r1, r5
 80044c0:	4638      	mov	r0, r7
 80044c2:	f7ff ff6b 	bl	800439c <__ssputs_r>
 80044c6:	3001      	adds	r0, #1
 80044c8:	f000 80a7 	beq.w	800461a <_svfiprintf_r+0x1c6>
 80044cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044ce:	445a      	add	r2, fp
 80044d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80044d2:	f89a 3000 	ldrb.w	r3, [sl]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 809f 	beq.w	800461a <_svfiprintf_r+0x1c6>
 80044dc:	2300      	movs	r3, #0
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e6:	f10a 0a01 	add.w	sl, sl, #1
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	9307      	str	r3, [sp, #28]
 80044ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80044f4:	4654      	mov	r4, sl
 80044f6:	2205      	movs	r2, #5
 80044f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fc:	484e      	ldr	r0, [pc, #312]	@ (8004638 <_svfiprintf_r+0x1e4>)
 80044fe:	f000 fc25 	bl	8004d4c <memchr>
 8004502:	9a04      	ldr	r2, [sp, #16]
 8004504:	b9d8      	cbnz	r0, 800453e <_svfiprintf_r+0xea>
 8004506:	06d0      	lsls	r0, r2, #27
 8004508:	bf44      	itt	mi
 800450a:	2320      	movmi	r3, #32
 800450c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004510:	0711      	lsls	r1, r2, #28
 8004512:	bf44      	itt	mi
 8004514:	232b      	movmi	r3, #43	@ 0x2b
 8004516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800451a:	f89a 3000 	ldrb.w	r3, [sl]
 800451e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004520:	d015      	beq.n	800454e <_svfiprintf_r+0xfa>
 8004522:	4654      	mov	r4, sl
 8004524:	2000      	movs	r0, #0
 8004526:	f04f 0c0a 	mov.w	ip, #10
 800452a:	9a07      	ldr	r2, [sp, #28]
 800452c:	4621      	mov	r1, r4
 800452e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004532:	3b30      	subs	r3, #48	@ 0x30
 8004534:	2b09      	cmp	r3, #9
 8004536:	d94b      	bls.n	80045d0 <_svfiprintf_r+0x17c>
 8004538:	b1b0      	cbz	r0, 8004568 <_svfiprintf_r+0x114>
 800453a:	9207      	str	r2, [sp, #28]
 800453c:	e014      	b.n	8004568 <_svfiprintf_r+0x114>
 800453e:	eba0 0308 	sub.w	r3, r0, r8
 8004542:	fa09 f303 	lsl.w	r3, r9, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	46a2      	mov	sl, r4
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	e7d2      	b.n	80044f4 <_svfiprintf_r+0xa0>
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	1d19      	adds	r1, r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	9103      	str	r1, [sp, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	bfbb      	ittet	lt
 800455a:	425b      	neglt	r3, r3
 800455c:	f042 0202 	orrlt.w	r2, r2, #2
 8004560:	9307      	strge	r3, [sp, #28]
 8004562:	9307      	strlt	r3, [sp, #28]
 8004564:	bfb8      	it	lt
 8004566:	9204      	strlt	r2, [sp, #16]
 8004568:	7823      	ldrb	r3, [r4, #0]
 800456a:	2b2e      	cmp	r3, #46	@ 0x2e
 800456c:	d10a      	bne.n	8004584 <_svfiprintf_r+0x130>
 800456e:	7863      	ldrb	r3, [r4, #1]
 8004570:	2b2a      	cmp	r3, #42	@ 0x2a
 8004572:	d132      	bne.n	80045da <_svfiprintf_r+0x186>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	3402      	adds	r4, #2
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9203      	str	r2, [sp, #12]
 800457e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004582:	9305      	str	r3, [sp, #20]
 8004584:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800463c <_svfiprintf_r+0x1e8>
 8004588:	2203      	movs	r2, #3
 800458a:	4650      	mov	r0, sl
 800458c:	7821      	ldrb	r1, [r4, #0]
 800458e:	f000 fbdd 	bl	8004d4c <memchr>
 8004592:	b138      	cbz	r0, 80045a4 <_svfiprintf_r+0x150>
 8004594:	2240      	movs	r2, #64	@ 0x40
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	eba0 000a 	sub.w	r0, r0, sl
 800459c:	4082      	lsls	r2, r0
 800459e:	4313      	orrs	r3, r2
 80045a0:	3401      	adds	r4, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a8:	2206      	movs	r2, #6
 80045aa:	4825      	ldr	r0, [pc, #148]	@ (8004640 <_svfiprintf_r+0x1ec>)
 80045ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045b0:	f000 fbcc 	bl	8004d4c <memchr>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d036      	beq.n	8004626 <_svfiprintf_r+0x1d2>
 80045b8:	4b22      	ldr	r3, [pc, #136]	@ (8004644 <_svfiprintf_r+0x1f0>)
 80045ba:	bb1b      	cbnz	r3, 8004604 <_svfiprintf_r+0x1b0>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	3307      	adds	r3, #7
 80045c0:	f023 0307 	bic.w	r3, r3, #7
 80045c4:	3308      	adds	r3, #8
 80045c6:	9303      	str	r3, [sp, #12]
 80045c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ca:	4433      	add	r3, r6
 80045cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ce:	e76a      	b.n	80044a6 <_svfiprintf_r+0x52>
 80045d0:	460c      	mov	r4, r1
 80045d2:	2001      	movs	r0, #1
 80045d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045d8:	e7a8      	b.n	800452c <_svfiprintf_r+0xd8>
 80045da:	2300      	movs	r3, #0
 80045dc:	f04f 0c0a 	mov.w	ip, #10
 80045e0:	4619      	mov	r1, r3
 80045e2:	3401      	adds	r4, #1
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ec:	3a30      	subs	r2, #48	@ 0x30
 80045ee:	2a09      	cmp	r2, #9
 80045f0:	d903      	bls.n	80045fa <_svfiprintf_r+0x1a6>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0c6      	beq.n	8004584 <_svfiprintf_r+0x130>
 80045f6:	9105      	str	r1, [sp, #20]
 80045f8:	e7c4      	b.n	8004584 <_svfiprintf_r+0x130>
 80045fa:	4604      	mov	r4, r0
 80045fc:	2301      	movs	r3, #1
 80045fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004602:	e7f0      	b.n	80045e6 <_svfiprintf_r+0x192>
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	462a      	mov	r2, r5
 800460a:	4638      	mov	r0, r7
 800460c:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <_svfiprintf_r+0x1f4>)
 800460e:	a904      	add	r1, sp, #16
 8004610:	f3af 8000 	nop.w
 8004614:	1c42      	adds	r2, r0, #1
 8004616:	4606      	mov	r6, r0
 8004618:	d1d6      	bne.n	80045c8 <_svfiprintf_r+0x174>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	065b      	lsls	r3, r3, #25
 800461e:	f53f af2d 	bmi.w	800447c <_svfiprintf_r+0x28>
 8004622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004624:	e72c      	b.n	8004480 <_svfiprintf_r+0x2c>
 8004626:	ab03      	add	r3, sp, #12
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	462a      	mov	r2, r5
 800462c:	4638      	mov	r0, r7
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <_svfiprintf_r+0x1f4>)
 8004630:	a904      	add	r1, sp, #16
 8004632:	f000 f9bd 	bl	80049b0 <_printf_i>
 8004636:	e7ed      	b.n	8004614 <_svfiprintf_r+0x1c0>
 8004638:	080051aa 	.word	0x080051aa
 800463c:	080051b0 	.word	0x080051b0
 8004640:	080051b4 	.word	0x080051b4
 8004644:	00000000 	.word	0x00000000
 8004648:	0800439d 	.word	0x0800439d

0800464c <__sfputc_r>:
 800464c:	6893      	ldr	r3, [r2, #8]
 800464e:	b410      	push	{r4}
 8004650:	3b01      	subs	r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	da07      	bge.n	8004668 <__sfputc_r+0x1c>
 8004658:	6994      	ldr	r4, [r2, #24]
 800465a:	42a3      	cmp	r3, r4
 800465c:	db01      	blt.n	8004662 <__sfputc_r+0x16>
 800465e:	290a      	cmp	r1, #10
 8004660:	d102      	bne.n	8004668 <__sfputc_r+0x1c>
 8004662:	bc10      	pop	{r4}
 8004664:	f7ff bc93 	b.w	8003f8e <__swbuf_r>
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	1c58      	adds	r0, r3, #1
 800466c:	6010      	str	r0, [r2, #0]
 800466e:	7019      	strb	r1, [r3, #0]
 8004670:	4608      	mov	r0, r1
 8004672:	bc10      	pop	{r4}
 8004674:	4770      	bx	lr

08004676 <__sfputs_r>:
 8004676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	4614      	mov	r4, r2
 800467e:	18d5      	adds	r5, r2, r3
 8004680:	42ac      	cmp	r4, r5
 8004682:	d101      	bne.n	8004688 <__sfputs_r+0x12>
 8004684:	2000      	movs	r0, #0
 8004686:	e007      	b.n	8004698 <__sfputs_r+0x22>
 8004688:	463a      	mov	r2, r7
 800468a:	4630      	mov	r0, r6
 800468c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004690:	f7ff ffdc 	bl	800464c <__sfputc_r>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d1f3      	bne.n	8004680 <__sfputs_r+0xa>
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800469c <_vfiprintf_r>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	460d      	mov	r5, r1
 80046a2:	4614      	mov	r4, r2
 80046a4:	4698      	mov	r8, r3
 80046a6:	4606      	mov	r6, r0
 80046a8:	b09d      	sub	sp, #116	@ 0x74
 80046aa:	b118      	cbz	r0, 80046b4 <_vfiprintf_r+0x18>
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	b90b      	cbnz	r3, 80046b4 <_vfiprintf_r+0x18>
 80046b0:	f7ff fb50 	bl	8003d54 <__sinit>
 80046b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046b6:	07d9      	lsls	r1, r3, #31
 80046b8:	d405      	bmi.n	80046c6 <_vfiprintf_r+0x2a>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	059a      	lsls	r2, r3, #22
 80046be:	d402      	bmi.n	80046c6 <_vfiprintf_r+0x2a>
 80046c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046c2:	f7ff fd72 	bl	80041aa <__retarget_lock_acquire_recursive>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	d501      	bpl.n	80046d0 <_vfiprintf_r+0x34>
 80046cc:	692b      	ldr	r3, [r5, #16]
 80046ce:	b99b      	cbnz	r3, 80046f8 <_vfiprintf_r+0x5c>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff fc9a 	bl	800400c <__swsetup_r>
 80046d8:	b170      	cbz	r0, 80046f8 <_vfiprintf_r+0x5c>
 80046da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046dc:	07dc      	lsls	r4, r3, #31
 80046de:	d504      	bpl.n	80046ea <_vfiprintf_r+0x4e>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	b01d      	add	sp, #116	@ 0x74
 80046e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ea:	89ab      	ldrh	r3, [r5, #12]
 80046ec:	0598      	lsls	r0, r3, #22
 80046ee:	d4f7      	bmi.n	80046e0 <_vfiprintf_r+0x44>
 80046f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046f2:	f7ff fd5b 	bl	80041ac <__retarget_lock_release_recursive>
 80046f6:	e7f3      	b.n	80046e0 <_vfiprintf_r+0x44>
 80046f8:	2300      	movs	r3, #0
 80046fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80046fc:	2320      	movs	r3, #32
 80046fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004702:	2330      	movs	r3, #48	@ 0x30
 8004704:	f04f 0901 	mov.w	r9, #1
 8004708:	f8cd 800c 	str.w	r8, [sp, #12]
 800470c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80048b8 <_vfiprintf_r+0x21c>
 8004710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004714:	4623      	mov	r3, r4
 8004716:	469a      	mov	sl, r3
 8004718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800471c:	b10a      	cbz	r2, 8004722 <_vfiprintf_r+0x86>
 800471e:	2a25      	cmp	r2, #37	@ 0x25
 8004720:	d1f9      	bne.n	8004716 <_vfiprintf_r+0x7a>
 8004722:	ebba 0b04 	subs.w	fp, sl, r4
 8004726:	d00b      	beq.n	8004740 <_vfiprintf_r+0xa4>
 8004728:	465b      	mov	r3, fp
 800472a:	4622      	mov	r2, r4
 800472c:	4629      	mov	r1, r5
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff ffa1 	bl	8004676 <__sfputs_r>
 8004734:	3001      	adds	r0, #1
 8004736:	f000 80a7 	beq.w	8004888 <_vfiprintf_r+0x1ec>
 800473a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473c:	445a      	add	r2, fp
 800473e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004740:	f89a 3000 	ldrb.w	r3, [sl]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 809f 	beq.w	8004888 <_vfiprintf_r+0x1ec>
 800474a:	2300      	movs	r3, #0
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004754:	f10a 0a01 	add.w	sl, sl, #1
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	9307      	str	r3, [sp, #28]
 800475c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004760:	931a      	str	r3, [sp, #104]	@ 0x68
 8004762:	4654      	mov	r4, sl
 8004764:	2205      	movs	r2, #5
 8004766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476a:	4853      	ldr	r0, [pc, #332]	@ (80048b8 <_vfiprintf_r+0x21c>)
 800476c:	f000 faee 	bl	8004d4c <memchr>
 8004770:	9a04      	ldr	r2, [sp, #16]
 8004772:	b9d8      	cbnz	r0, 80047ac <_vfiprintf_r+0x110>
 8004774:	06d1      	lsls	r1, r2, #27
 8004776:	bf44      	itt	mi
 8004778:	2320      	movmi	r3, #32
 800477a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477e:	0713      	lsls	r3, r2, #28
 8004780:	bf44      	itt	mi
 8004782:	232b      	movmi	r3, #43	@ 0x2b
 8004784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004788:	f89a 3000 	ldrb.w	r3, [sl]
 800478c:	2b2a      	cmp	r3, #42	@ 0x2a
 800478e:	d015      	beq.n	80047bc <_vfiprintf_r+0x120>
 8004790:	4654      	mov	r4, sl
 8004792:	2000      	movs	r0, #0
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	9a07      	ldr	r2, [sp, #28]
 800479a:	4621      	mov	r1, r4
 800479c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a0:	3b30      	subs	r3, #48	@ 0x30
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d94b      	bls.n	800483e <_vfiprintf_r+0x1a2>
 80047a6:	b1b0      	cbz	r0, 80047d6 <_vfiprintf_r+0x13a>
 80047a8:	9207      	str	r2, [sp, #28]
 80047aa:	e014      	b.n	80047d6 <_vfiprintf_r+0x13a>
 80047ac:	eba0 0308 	sub.w	r3, r0, r8
 80047b0:	fa09 f303 	lsl.w	r3, r9, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	46a2      	mov	sl, r4
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	e7d2      	b.n	8004762 <_vfiprintf_r+0xc6>
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	1d19      	adds	r1, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	9103      	str	r1, [sp, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bfbb      	ittet	lt
 80047c8:	425b      	neglt	r3, r3
 80047ca:	f042 0202 	orrlt.w	r2, r2, #2
 80047ce:	9307      	strge	r3, [sp, #28]
 80047d0:	9307      	strlt	r3, [sp, #28]
 80047d2:	bfb8      	it	lt
 80047d4:	9204      	strlt	r2, [sp, #16]
 80047d6:	7823      	ldrb	r3, [r4, #0]
 80047d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047da:	d10a      	bne.n	80047f2 <_vfiprintf_r+0x156>
 80047dc:	7863      	ldrb	r3, [r4, #1]
 80047de:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e0:	d132      	bne.n	8004848 <_vfiprintf_r+0x1ac>
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	3402      	adds	r4, #2
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80048bc <_vfiprintf_r+0x220>
 80047f6:	2203      	movs	r2, #3
 80047f8:	4650      	mov	r0, sl
 80047fa:	7821      	ldrb	r1, [r4, #0]
 80047fc:	f000 faa6 	bl	8004d4c <memchr>
 8004800:	b138      	cbz	r0, 8004812 <_vfiprintf_r+0x176>
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	9b04      	ldr	r3, [sp, #16]
 8004806:	eba0 000a 	sub.w	r0, r0, sl
 800480a:	4082      	lsls	r2, r0
 800480c:	4313      	orrs	r3, r2
 800480e:	3401      	adds	r4, #1
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004816:	2206      	movs	r2, #6
 8004818:	4829      	ldr	r0, [pc, #164]	@ (80048c0 <_vfiprintf_r+0x224>)
 800481a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800481e:	f000 fa95 	bl	8004d4c <memchr>
 8004822:	2800      	cmp	r0, #0
 8004824:	d03f      	beq.n	80048a6 <_vfiprintf_r+0x20a>
 8004826:	4b27      	ldr	r3, [pc, #156]	@ (80048c4 <_vfiprintf_r+0x228>)
 8004828:	bb1b      	cbnz	r3, 8004872 <_vfiprintf_r+0x1d6>
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	3307      	adds	r3, #7
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	3308      	adds	r3, #8
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004838:	443b      	add	r3, r7
 800483a:	9309      	str	r3, [sp, #36]	@ 0x24
 800483c:	e76a      	b.n	8004714 <_vfiprintf_r+0x78>
 800483e:	460c      	mov	r4, r1
 8004840:	2001      	movs	r0, #1
 8004842:	fb0c 3202 	mla	r2, ip, r2, r3
 8004846:	e7a8      	b.n	800479a <_vfiprintf_r+0xfe>
 8004848:	2300      	movs	r3, #0
 800484a:	f04f 0c0a 	mov.w	ip, #10
 800484e:	4619      	mov	r1, r3
 8004850:	3401      	adds	r4, #1
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	4620      	mov	r0, r4
 8004856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485a:	3a30      	subs	r2, #48	@ 0x30
 800485c:	2a09      	cmp	r2, #9
 800485e:	d903      	bls.n	8004868 <_vfiprintf_r+0x1cc>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0c6      	beq.n	80047f2 <_vfiprintf_r+0x156>
 8004864:	9105      	str	r1, [sp, #20]
 8004866:	e7c4      	b.n	80047f2 <_vfiprintf_r+0x156>
 8004868:	4604      	mov	r4, r0
 800486a:	2301      	movs	r3, #1
 800486c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004870:	e7f0      	b.n	8004854 <_vfiprintf_r+0x1b8>
 8004872:	ab03      	add	r3, sp, #12
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	462a      	mov	r2, r5
 8004878:	4630      	mov	r0, r6
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <_vfiprintf_r+0x22c>)
 800487c:	a904      	add	r1, sp, #16
 800487e:	f3af 8000 	nop.w
 8004882:	4607      	mov	r7, r0
 8004884:	1c78      	adds	r0, r7, #1
 8004886:	d1d6      	bne.n	8004836 <_vfiprintf_r+0x19a>
 8004888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800488a:	07d9      	lsls	r1, r3, #31
 800488c:	d405      	bmi.n	800489a <_vfiprintf_r+0x1fe>
 800488e:	89ab      	ldrh	r3, [r5, #12]
 8004890:	059a      	lsls	r2, r3, #22
 8004892:	d402      	bmi.n	800489a <_vfiprintf_r+0x1fe>
 8004894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004896:	f7ff fc89 	bl	80041ac <__retarget_lock_release_recursive>
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	065b      	lsls	r3, r3, #25
 800489e:	f53f af1f 	bmi.w	80046e0 <_vfiprintf_r+0x44>
 80048a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a4:	e71e      	b.n	80046e4 <_vfiprintf_r+0x48>
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	462a      	mov	r2, r5
 80048ac:	4630      	mov	r0, r6
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <_vfiprintf_r+0x22c>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	f000 f87d 	bl	80049b0 <_printf_i>
 80048b6:	e7e4      	b.n	8004882 <_vfiprintf_r+0x1e6>
 80048b8:	080051aa 	.word	0x080051aa
 80048bc:	080051b0 	.word	0x080051b0
 80048c0:	080051b4 	.word	0x080051b4
 80048c4:	00000000 	.word	0x00000000
 80048c8:	08004677 	.word	0x08004677

080048cc <_printf_common>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	4616      	mov	r6, r2
 80048d2:	4698      	mov	r8, r3
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	4607      	mov	r7, r0
 80048da:	4293      	cmp	r3, r2
 80048dc:	bfb8      	it	lt
 80048de:	4613      	movlt	r3, r2
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048e6:	460c      	mov	r4, r1
 80048e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048ec:	b10a      	cbz	r2, 80048f2 <_printf_common+0x26>
 80048ee:	3301      	adds	r3, #1
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	6833      	ldrmi	r3, [r6, #0]
 80048fa:	3302      	addmi	r3, #2
 80048fc:	6033      	strmi	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d106      	bne.n	8004914 <_printf_common+0x48>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	6832      	ldr	r2, [r6, #0]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	42ab      	cmp	r3, r5
 8004912:	dc2b      	bgt.n	800496c <_printf_common+0xa0>
 8004914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	3b00      	subs	r3, #0
 800491c:	bf18      	it	ne
 800491e:	2301      	movne	r3, #1
 8004920:	0692      	lsls	r2, r2, #26
 8004922:	d430      	bmi.n	8004986 <_printf_common+0xba>
 8004924:	4641      	mov	r1, r8
 8004926:	4638      	mov	r0, r7
 8004928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800492c:	47c8      	blx	r9
 800492e:	3001      	adds	r0, #1
 8004930:	d023      	beq.n	800497a <_printf_common+0xae>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	2b04      	cmp	r3, #4
 800493c:	bf14      	ite	ne
 800493e:	2500      	movne	r5, #0
 8004940:	6833      	ldreq	r3, [r6, #0]
 8004942:	f04f 0600 	mov.w	r6, #0
 8004946:	bf08      	it	eq
 8004948:	68e5      	ldreq	r5, [r4, #12]
 800494a:	f104 041a 	add.w	r4, r4, #26
 800494e:	bf08      	it	eq
 8004950:	1aed      	subeq	r5, r5, r3
 8004952:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004956:	bf08      	it	eq
 8004958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800495c:	4293      	cmp	r3, r2
 800495e:	bfc4      	itt	gt
 8004960:	1a9b      	subgt	r3, r3, r2
 8004962:	18ed      	addgt	r5, r5, r3
 8004964:	42b5      	cmp	r5, r6
 8004966:	d11a      	bne.n	800499e <_printf_common+0xd2>
 8004968:	2000      	movs	r0, #0
 800496a:	e008      	b.n	800497e <_printf_common+0xb2>
 800496c:	2301      	movs	r3, #1
 800496e:	4652      	mov	r2, sl
 8004970:	4641      	mov	r1, r8
 8004972:	4638      	mov	r0, r7
 8004974:	47c8      	blx	r9
 8004976:	3001      	adds	r0, #1
 8004978:	d103      	bne.n	8004982 <_printf_common+0xb6>
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004982:	3501      	adds	r5, #1
 8004984:	e7c1      	b.n	800490a <_printf_common+0x3e>
 8004986:	2030      	movs	r0, #48	@ 0x30
 8004988:	18e1      	adds	r1, r4, r3
 800498a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004994:	4422      	add	r2, r4
 8004996:	3302      	adds	r3, #2
 8004998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800499c:	e7c2      	b.n	8004924 <_printf_common+0x58>
 800499e:	2301      	movs	r3, #1
 80049a0:	4622      	mov	r2, r4
 80049a2:	4641      	mov	r1, r8
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c8      	blx	r9
 80049a8:	3001      	adds	r0, #1
 80049aa:	d0e6      	beq.n	800497a <_printf_common+0xae>
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7d9      	b.n	8004964 <_printf_common+0x98>

080049b0 <_printf_i>:
 80049b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	7e0f      	ldrb	r7, [r1, #24]
 80049b6:	4691      	mov	r9, r2
 80049b8:	2f78      	cmp	r7, #120	@ 0x78
 80049ba:	4680      	mov	r8, r0
 80049bc:	460c      	mov	r4, r1
 80049be:	469a      	mov	sl, r3
 80049c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049c6:	d807      	bhi.n	80049d8 <_printf_i+0x28>
 80049c8:	2f62      	cmp	r7, #98	@ 0x62
 80049ca:	d80a      	bhi.n	80049e2 <_printf_i+0x32>
 80049cc:	2f00      	cmp	r7, #0
 80049ce:	f000 80d3 	beq.w	8004b78 <_printf_i+0x1c8>
 80049d2:	2f58      	cmp	r7, #88	@ 0x58
 80049d4:	f000 80ba 	beq.w	8004b4c <_printf_i+0x19c>
 80049d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049e0:	e03a      	b.n	8004a58 <_printf_i+0xa8>
 80049e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049e6:	2b15      	cmp	r3, #21
 80049e8:	d8f6      	bhi.n	80049d8 <_printf_i+0x28>
 80049ea:	a101      	add	r1, pc, #4	@ (adr r1, 80049f0 <_printf_i+0x40>)
 80049ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f0:	08004a49 	.word	0x08004a49
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	080049d9 	.word	0x080049d9
 80049fc:	080049d9 	.word	0x080049d9
 8004a00:	080049d9 	.word	0x080049d9
 8004a04:	080049d9 	.word	0x080049d9
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	080049d9 	.word	0x080049d9
 8004a10:	080049d9 	.word	0x080049d9
 8004a14:	080049d9 	.word	0x080049d9
 8004a18:	080049d9 	.word	0x080049d9
 8004a1c:	08004b5f 	.word	0x08004b5f
 8004a20:	08004a87 	.word	0x08004a87
 8004a24:	08004b19 	.word	0x08004b19
 8004a28:	080049d9 	.word	0x080049d9
 8004a2c:	080049d9 	.word	0x080049d9
 8004a30:	08004b81 	.word	0x08004b81
 8004a34:	080049d9 	.word	0x080049d9
 8004a38:	08004a87 	.word	0x08004a87
 8004a3c:	080049d9 	.word	0x080049d9
 8004a40:	080049d9 	.word	0x080049d9
 8004a44:	08004b21 	.word	0x08004b21
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6032      	str	r2, [r6, #0]
 8004a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e09e      	b.n	8004b9a <_printf_i+0x1ea>
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	1d19      	adds	r1, r3, #4
 8004a62:	6031      	str	r1, [r6, #0]
 8004a64:	0606      	lsls	r6, r0, #24
 8004a66:	d501      	bpl.n	8004a6c <_printf_i+0xbc>
 8004a68:	681d      	ldr	r5, [r3, #0]
 8004a6a:	e003      	b.n	8004a74 <_printf_i+0xc4>
 8004a6c:	0645      	lsls	r5, r0, #25
 8004a6e:	d5fb      	bpl.n	8004a68 <_printf_i+0xb8>
 8004a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xd0>
 8004a78:	232d      	movs	r3, #45	@ 0x2d
 8004a7a:	426d      	negs	r5, r5
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a80:	230a      	movs	r3, #10
 8004a82:	4859      	ldr	r0, [pc, #356]	@ (8004be8 <_printf_i+0x238>)
 8004a84:	e011      	b.n	8004aaa <_printf_i+0xfa>
 8004a86:	6821      	ldr	r1, [r4, #0]
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	0608      	lsls	r0, r1, #24
 8004a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a90:	d402      	bmi.n	8004a98 <_printf_i+0xe8>
 8004a92:	0649      	lsls	r1, r1, #25
 8004a94:	bf48      	it	mi
 8004a96:	b2ad      	uxthmi	r5, r5
 8004a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	bf14      	ite	ne
 8004a9e:	230a      	movne	r3, #10
 8004aa0:	2308      	moveq	r3, #8
 8004aa2:	4851      	ldr	r0, [pc, #324]	@ (8004be8 <_printf_i+0x238>)
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aaa:	6866      	ldr	r6, [r4, #4]
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	bfa8      	it	ge
 8004ab0:	6821      	ldrge	r1, [r4, #0]
 8004ab2:	60a6      	str	r6, [r4, #8]
 8004ab4:	bfa4      	itt	ge
 8004ab6:	f021 0104 	bicge.w	r1, r1, #4
 8004aba:	6021      	strge	r1, [r4, #0]
 8004abc:	b90d      	cbnz	r5, 8004ac2 <_printf_i+0x112>
 8004abe:	2e00      	cmp	r6, #0
 8004ac0:	d04b      	beq.n	8004b5a <_printf_i+0x1aa>
 8004ac2:	4616      	mov	r6, r2
 8004ac4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ac8:	fb03 5711 	mls	r7, r3, r1, r5
 8004acc:	5dc7      	ldrb	r7, [r0, r7]
 8004ace:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ad2:	462f      	mov	r7, r5
 8004ad4:	42bb      	cmp	r3, r7
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	d9f4      	bls.n	8004ac4 <_printf_i+0x114>
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d10b      	bne.n	8004af6 <_printf_i+0x146>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	07df      	lsls	r7, r3, #31
 8004ae2:	d508      	bpl.n	8004af6 <_printf_i+0x146>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	6861      	ldr	r1, [r4, #4]
 8004ae8:	4299      	cmp	r1, r3
 8004aea:	bfde      	ittt	le
 8004aec:	2330      	movle	r3, #48	@ 0x30
 8004aee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004af2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004af6:	1b92      	subs	r2, r2, r6
 8004af8:	6122      	str	r2, [r4, #16]
 8004afa:	464b      	mov	r3, r9
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f8cd a000 	str.w	sl, [sp]
 8004b04:	aa03      	add	r2, sp, #12
 8004b06:	f7ff fee1 	bl	80048cc <_printf_common>
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d14a      	bne.n	8004ba4 <_printf_i+0x1f4>
 8004b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b12:	b004      	add	sp, #16
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f043 0320 	orr.w	r3, r3, #32
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	2778      	movs	r7, #120	@ 0x78
 8004b22:	4832      	ldr	r0, [pc, #200]	@ (8004bec <_printf_i+0x23c>)
 8004b24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	6831      	ldr	r1, [r6, #0]
 8004b2c:	061f      	lsls	r7, r3, #24
 8004b2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b32:	d402      	bmi.n	8004b3a <_printf_i+0x18a>
 8004b34:	065f      	lsls	r7, r3, #25
 8004b36:	bf48      	it	mi
 8004b38:	b2ad      	uxthmi	r5, r5
 8004b3a:	6031      	str	r1, [r6, #0]
 8004b3c:	07d9      	lsls	r1, r3, #31
 8004b3e:	bf44      	itt	mi
 8004b40:	f043 0320 	orrmi.w	r3, r3, #32
 8004b44:	6023      	strmi	r3, [r4, #0]
 8004b46:	b11d      	cbz	r5, 8004b50 <_printf_i+0x1a0>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	e7ab      	b.n	8004aa4 <_printf_i+0xf4>
 8004b4c:	4826      	ldr	r0, [pc, #152]	@ (8004be8 <_printf_i+0x238>)
 8004b4e:	e7e9      	b.n	8004b24 <_printf_i+0x174>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	e7f6      	b.n	8004b48 <_printf_i+0x198>
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	e7bd      	b.n	8004ada <_printf_i+0x12a>
 8004b5e:	6833      	ldr	r3, [r6, #0]
 8004b60:	6825      	ldr	r5, [r4, #0]
 8004b62:	1d18      	adds	r0, r3, #4
 8004b64:	6961      	ldr	r1, [r4, #20]
 8004b66:	6030      	str	r0, [r6, #0]
 8004b68:	062e      	lsls	r6, r5, #24
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	d501      	bpl.n	8004b72 <_printf_i+0x1c2>
 8004b6e:	6019      	str	r1, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <_printf_i+0x1c8>
 8004b72:	0668      	lsls	r0, r5, #25
 8004b74:	d5fb      	bpl.n	8004b6e <_printf_i+0x1be>
 8004b76:	8019      	strh	r1, [r3, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	e7bc      	b.n	8004afa <_printf_i+0x14a>
 8004b80:	6833      	ldr	r3, [r6, #0]
 8004b82:	2100      	movs	r1, #0
 8004b84:	1d1a      	adds	r2, r3, #4
 8004b86:	6032      	str	r2, [r6, #0]
 8004b88:	681e      	ldr	r6, [r3, #0]
 8004b8a:	6862      	ldr	r2, [r4, #4]
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f000 f8dd 	bl	8004d4c <memchr>
 8004b92:	b108      	cbz	r0, 8004b98 <_printf_i+0x1e8>
 8004b94:	1b80      	subs	r0, r0, r6
 8004b96:	6060      	str	r0, [r4, #4]
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba2:	e7aa      	b.n	8004afa <_printf_i+0x14a>
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	47d0      	blx	sl
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0ad      	beq.n	8004b0e <_printf_i+0x15e>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	079b      	lsls	r3, r3, #30
 8004bb6:	d413      	bmi.n	8004be0 <_printf_i+0x230>
 8004bb8:	68e0      	ldr	r0, [r4, #12]
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	4298      	cmp	r0, r3
 8004bbe:	bfb8      	it	lt
 8004bc0:	4618      	movlt	r0, r3
 8004bc2:	e7a6      	b.n	8004b12 <_printf_i+0x162>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	4649      	mov	r1, r9
 8004bca:	4640      	mov	r0, r8
 8004bcc:	47d0      	blx	sl
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d09d      	beq.n	8004b0e <_printf_i+0x15e>
 8004bd2:	3501      	adds	r5, #1
 8004bd4:	68e3      	ldr	r3, [r4, #12]
 8004bd6:	9903      	ldr	r1, [sp, #12]
 8004bd8:	1a5b      	subs	r3, r3, r1
 8004bda:	42ab      	cmp	r3, r5
 8004bdc:	dcf2      	bgt.n	8004bc4 <_printf_i+0x214>
 8004bde:	e7eb      	b.n	8004bb8 <_printf_i+0x208>
 8004be0:	2500      	movs	r5, #0
 8004be2:	f104 0619 	add.w	r6, r4, #25
 8004be6:	e7f5      	b.n	8004bd4 <_printf_i+0x224>
 8004be8:	080051bb 	.word	0x080051bb
 8004bec:	080051cc 	.word	0x080051cc

08004bf0 <__swhatbuf_r>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	461e      	mov	r6, r3
 8004bfe:	b096      	sub	sp, #88	@ 0x58
 8004c00:	da0c      	bge.n	8004c1c <__swhatbuf_r+0x2c>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	2100      	movs	r1, #0
 8004c06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c0a:	bf14      	ite	ne
 8004c0c:	2340      	movne	r3, #64	@ 0x40
 8004c0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c12:	2000      	movs	r0, #0
 8004c14:	6031      	str	r1, [r6, #0]
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	b016      	add	sp, #88	@ 0x58
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	466a      	mov	r2, sp
 8004c1e:	f000 f863 	bl	8004ce8 <_fstat_r>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	dbed      	blt.n	8004c02 <__swhatbuf_r+0x12>
 8004c26:	9901      	ldr	r1, [sp, #4]
 8004c28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c30:	4259      	negs	r1, r3
 8004c32:	4159      	adcs	r1, r3
 8004c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c38:	e7eb      	b.n	8004c12 <__swhatbuf_r+0x22>

08004c3a <__smakebuf_r>:
 8004c3a:	898b      	ldrh	r3, [r1, #12]
 8004c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3e:	079d      	lsls	r5, r3, #30
 8004c40:	4606      	mov	r6, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	d507      	bpl.n	8004c56 <__smakebuf_r+0x1c>
 8004c46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	6163      	str	r3, [r4, #20]
 8004c52:	b003      	add	sp, #12
 8004c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c56:	466a      	mov	r2, sp
 8004c58:	ab01      	add	r3, sp, #4
 8004c5a:	f7ff ffc9 	bl	8004bf0 <__swhatbuf_r>
 8004c5e:	9f00      	ldr	r7, [sp, #0]
 8004c60:	4605      	mov	r5, r0
 8004c62:	4639      	mov	r1, r7
 8004c64:	4630      	mov	r0, r6
 8004c66:	f7ff fb0d 	bl	8004284 <_malloc_r>
 8004c6a:	b948      	cbnz	r0, 8004c80 <__smakebuf_r+0x46>
 8004c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c70:	059a      	lsls	r2, r3, #22
 8004c72:	d4ee      	bmi.n	8004c52 <__smakebuf_r+0x18>
 8004c74:	f023 0303 	bic.w	r3, r3, #3
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	e7e2      	b.n	8004c46 <__smakebuf_r+0xc>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	6020      	str	r0, [r4, #0]
 8004c90:	b15b      	cbz	r3, 8004caa <__smakebuf_r+0x70>
 8004c92:	4630      	mov	r0, r6
 8004c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c98:	f000 f838 	bl	8004d0c <_isatty_r>
 8004c9c:	b128      	cbz	r0, 8004caa <__smakebuf_r+0x70>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f023 0303 	bic.w	r3, r3, #3
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	431d      	orrs	r5, r3
 8004cae:	81a5      	strh	r5, [r4, #12]
 8004cb0:	e7cf      	b.n	8004c52 <__smakebuf_r+0x18>

08004cb2 <memmove>:
 8004cb2:	4288      	cmp	r0, r1
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	eb01 0402 	add.w	r4, r1, r2
 8004cba:	d902      	bls.n	8004cc2 <memmove+0x10>
 8004cbc:	4284      	cmp	r4, r0
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	d807      	bhi.n	8004cd2 <memmove+0x20>
 8004cc2:	1e43      	subs	r3, r0, #1
 8004cc4:	42a1      	cmp	r1, r4
 8004cc6:	d008      	beq.n	8004cda <memmove+0x28>
 8004cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ccc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cd0:	e7f8      	b.n	8004cc4 <memmove+0x12>
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	4402      	add	r2, r0
 8004cd6:	428a      	cmp	r2, r1
 8004cd8:	d100      	bne.n	8004cdc <memmove+0x2a>
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ce0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce4:	e7f7      	b.n	8004cd6 <memmove+0x24>
	...

08004ce8 <_fstat_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	2300      	movs	r3, #0
 8004cec:	4d06      	ldr	r5, [pc, #24]	@ (8004d08 <_fstat_r+0x20>)
 8004cee:	4604      	mov	r4, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	f7fe fd64 	bl	80037c2 <_fstat>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	d102      	bne.n	8004d04 <_fstat_r+0x1c>
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	b103      	cbz	r3, 8004d04 <_fstat_r+0x1c>
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
 8004d06:	bf00      	nop
 8004d08:	200003d8 	.word	0x200003d8

08004d0c <_isatty_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4d05      	ldr	r5, [pc, #20]	@ (8004d28 <_isatty_r+0x1c>)
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fe feb6 	bl	8003a88 <_isatty>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_isatty_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_isatty_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200003d8 	.word	0x200003d8

08004d2c <_sbrk_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4d05      	ldr	r5, [pc, #20]	@ (8004d48 <_sbrk_r+0x1c>)
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fb fca8 	bl	800068c <_sbrk>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_sbrk_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_sbrk_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	200003d8 	.word	0x200003d8

08004d4c <memchr>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	b2c9      	uxtb	r1, r1
 8004d52:	4402      	add	r2, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	d101      	bne.n	8004d5e <memchr+0x12>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e003      	b.n	8004d66 <memchr+0x1a>
 8004d5e:	7804      	ldrb	r4, [r0, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	428c      	cmp	r4, r1
 8004d64:	d1f6      	bne.n	8004d54 <memchr+0x8>
 8004d66:	bd10      	pop	{r4, pc}

08004d68 <memcpy>:
 8004d68:	440a      	add	r2, r1
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d70:	d100      	bne.n	8004d74 <memcpy+0xc>
 8004d72:	4770      	bx	lr
 8004d74:	b510      	push	{r4, lr}
 8004d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7a:	4291      	cmp	r1, r2
 8004d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d80:	d1f9      	bne.n	8004d76 <memcpy+0xe>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <_realloc_r>:
 8004d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4615      	mov	r5, r2
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	b921      	cbnz	r1, 8004d9a <_realloc_r+0x16>
 8004d90:	4611      	mov	r1, r2
 8004d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	f7ff ba75 	b.w	8004284 <_malloc_r>
 8004d9a:	b92a      	cbnz	r2, 8004da8 <_realloc_r+0x24>
 8004d9c:	f7ff fa08 	bl	80041b0 <_free_r>
 8004da0:	2400      	movs	r4, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da8:	f000 f81a 	bl	8004de0 <_malloc_usable_size_r>
 8004dac:	4285      	cmp	r5, r0
 8004dae:	4606      	mov	r6, r0
 8004db0:	d802      	bhi.n	8004db8 <_realloc_r+0x34>
 8004db2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004db6:	d8f4      	bhi.n	8004da2 <_realloc_r+0x1e>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff fa62 	bl	8004284 <_malloc_r>
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0ec      	beq.n	8004da0 <_realloc_r+0x1c>
 8004dc6:	42b5      	cmp	r5, r6
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4621      	mov	r1, r4
 8004dcc:	bf28      	it	cs
 8004dce:	4632      	movcs	r2, r6
 8004dd0:	f7ff ffca 	bl	8004d68 <memcpy>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f7ff f9ea 	bl	80041b0 <_free_r>
 8004ddc:	463c      	mov	r4, r7
 8004dde:	e7e0      	b.n	8004da2 <_realloc_r+0x1e>

08004de0 <_malloc_usable_size_r>:
 8004de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de4:	1f18      	subs	r0, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfbc      	itt	lt
 8004dea:	580b      	ldrlt	r3, [r1, r0]
 8004dec:	18c0      	addlt	r0, r0, r3
 8004dee:	4770      	bx	lr

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
